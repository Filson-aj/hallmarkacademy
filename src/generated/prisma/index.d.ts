
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Administration
 * 
 */
export type Administration = $Result.DefaultSelection<Prisma.$AdministrationPayload>
/**
 * Model School
 * 
 */
export type School = $Result.DefaultSelection<Prisma.$SchoolPayload>
/**
 * Model Student
 * 
 */
export type Student = $Result.DefaultSelection<Prisma.$StudentPayload>
/**
 * Model Teacher
 * 
 */
export type Teacher = $Result.DefaultSelection<Prisma.$TeacherPayload>
/**
 * Model Parent
 * 
 */
export type Parent = $Result.DefaultSelection<Prisma.$ParentPayload>
/**
 * Model Subject
 * 
 */
export type Subject = $Result.DefaultSelection<Prisma.$SubjectPayload>
/**
 * Model Class
 * 
 */
export type Class = $Result.DefaultSelection<Prisma.$ClassPayload>
/**
 * Model PaymentSetup
 * 
 */
export type PaymentSetup = $Result.DefaultSelection<Prisma.$PaymentSetupPayload>
/**
 * Model Term
 * 
 */
export type Term = $Result.DefaultSelection<Prisma.$TermPayload>
/**
 * Model Payment
 * 
 */
export type Payment = $Result.DefaultSelection<Prisma.$PaymentPayload>
/**
 * Model Assignment
 * 
 */
export type Assignment = $Result.DefaultSelection<Prisma.$AssignmentPayload>
/**
 * Model Test
 * 
 */
export type Test = $Result.DefaultSelection<Prisma.$TestPayload>
/**
 * Model Question
 * 
 */
export type Question = $Result.DefaultSelection<Prisma.$QuestionPayload>
/**
 * Model Answer
 * 
 */
export type Answer = $Result.DefaultSelection<Prisma.$AnswerPayload>
/**
 * Model Submission
 * 
 */
export type Submission = $Result.DefaultSelection<Prisma.$SubmissionPayload>
/**
 * Model Grade
 * 
 */
export type Grade = $Result.DefaultSelection<Prisma.$GradePayload>
/**
 * Model ClassGrade
 * 
 */
export type ClassGrade = $Result.DefaultSelection<Prisma.$ClassGradePayload>
/**
 * Model SubjectGrade
 * 
 */
export type SubjectGrade = $Result.DefaultSelection<Prisma.$SubjectGradePayload>
/**
 * Model StudentGrade
 * 
 */
export type StudentGrade = $Result.DefaultSelection<Prisma.$StudentGradePayload>
/**
 * Model EffectiveDomain
 * 
 */
export type EffectiveDomain = $Result.DefaultSelection<Prisma.$EffectiveDomainPayload>
/**
 * Model PsychomotiveDomain
 * 
 */
export type PsychomotiveDomain = $Result.DefaultSelection<Prisma.$PsychomotiveDomainPayload>
/**
 * Model Attendance
 * 
 */
export type Attendance = $Result.DefaultSelection<Prisma.$AttendancePayload>
/**
 * Model Event
 * 
 */
export type Event = $Result.DefaultSelection<Prisma.$EventPayload>
/**
 * Model Announcement
 * 
 */
export type Announcement = $Result.DefaultSelection<Prisma.$AnnouncementPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserSex: {
  MALE: 'MALE',
  FEMALE: 'FEMALE'
};

export type UserSex = (typeof UserSex)[keyof typeof UserSex]


export const Day: {
  MONDAY: 'MONDAY',
  TUESDAY: 'TUESDAY',
  WEDNESDAY: 'WEDNESDAY',
  THURSDAY: 'THURSDAY',
  FRIDAY: 'FRIDAY'
};

export type Day = (typeof Day)[keyof typeof Day]


export const Roles: {
  Admin: 'Admin',
  Super: 'Super',
  Management: 'Management'
};

export type Roles = (typeof Roles)[keyof typeof Roles]


export const TestStatus: {
  Completed: 'Completed',
  Cancelled: 'Cancelled',
  Pending: 'Pending'
};

export type TestStatus = (typeof TestStatus)[keyof typeof TestStatus]


export const TermStatus: {
  Active: 'Active',
  Inactive: 'Inactive'
};

export type TermStatus = (typeof TermStatus)[keyof typeof TermStatus]


export const Terms: {
  First: 'First',
  Second: 'Second',
  Third: 'Third'
};

export type Terms = (typeof Terms)[keyof typeof Terms]

}

export type UserSex = $Enums.UserSex

export const UserSex: typeof $Enums.UserSex

export type Day = $Enums.Day

export const Day: typeof $Enums.Day

export type Roles = $Enums.Roles

export const Roles: typeof $Enums.Roles

export type TestStatus = $Enums.TestStatus

export const TestStatus: typeof $Enums.TestStatus

export type TermStatus = $Enums.TermStatus

export const TermStatus: typeof $Enums.TermStatus

export type Terms = $Enums.Terms

export const Terms: typeof $Enums.Terms

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Administrations
 * const administrations = await prisma.administration.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Administrations
   * const administrations = await prisma.administration.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.administration`: Exposes CRUD operations for the **Administration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Administrations
    * const administrations = await prisma.administration.findMany()
    * ```
    */
  get administration(): Prisma.AdministrationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.school`: Exposes CRUD operations for the **School** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Schools
    * const schools = await prisma.school.findMany()
    * ```
    */
  get school(): Prisma.SchoolDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.student`: Exposes CRUD operations for the **Student** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.student.findMany()
    * ```
    */
  get student(): Prisma.StudentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teacher`: Exposes CRUD operations for the **Teacher** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teachers
    * const teachers = await prisma.teacher.findMany()
    * ```
    */
  get teacher(): Prisma.TeacherDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.parent`: Exposes CRUD operations for the **Parent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Parents
    * const parents = await prisma.parent.findMany()
    * ```
    */
  get parent(): Prisma.ParentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subject`: Exposes CRUD operations for the **Subject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subjects
    * const subjects = await prisma.subject.findMany()
    * ```
    */
  get subject(): Prisma.SubjectDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.class`: Exposes CRUD operations for the **Class** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Classes
    * const classes = await prisma.class.findMany()
    * ```
    */
  get class(): Prisma.ClassDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.paymentSetup`: Exposes CRUD operations for the **PaymentSetup** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PaymentSetups
    * const paymentSetups = await prisma.paymentSetup.findMany()
    * ```
    */
  get paymentSetup(): Prisma.PaymentSetupDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.term`: Exposes CRUD operations for the **Term** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Terms
    * const terms = await prisma.term.findMany()
    * ```
    */
  get term(): Prisma.TermDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **Payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.PaymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.assignment`: Exposes CRUD operations for the **Assignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Assignments
    * const assignments = await prisma.assignment.findMany()
    * ```
    */
  get assignment(): Prisma.AssignmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.test`: Exposes CRUD operations for the **Test** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tests
    * const tests = await prisma.test.findMany()
    * ```
    */
  get test(): Prisma.TestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.question`: Exposes CRUD operations for the **Question** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questions
    * const questions = await prisma.question.findMany()
    * ```
    */
  get question(): Prisma.QuestionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.answer`: Exposes CRUD operations for the **Answer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Answers
    * const answers = await prisma.answer.findMany()
    * ```
    */
  get answer(): Prisma.AnswerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.submission`: Exposes CRUD operations for the **Submission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Submissions
    * const submissions = await prisma.submission.findMany()
    * ```
    */
  get submission(): Prisma.SubmissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.grade`: Exposes CRUD operations for the **Grade** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Grades
    * const grades = await prisma.grade.findMany()
    * ```
    */
  get grade(): Prisma.GradeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.classGrade`: Exposes CRUD operations for the **ClassGrade** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClassGrades
    * const classGrades = await prisma.classGrade.findMany()
    * ```
    */
  get classGrade(): Prisma.ClassGradeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subjectGrade`: Exposes CRUD operations for the **SubjectGrade** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SubjectGrades
    * const subjectGrades = await prisma.subjectGrade.findMany()
    * ```
    */
  get subjectGrade(): Prisma.SubjectGradeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.studentGrade`: Exposes CRUD operations for the **StudentGrade** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudentGrades
    * const studentGrades = await prisma.studentGrade.findMany()
    * ```
    */
  get studentGrade(): Prisma.StudentGradeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.effectiveDomain`: Exposes CRUD operations for the **EffectiveDomain** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EffectiveDomains
    * const effectiveDomains = await prisma.effectiveDomain.findMany()
    * ```
    */
  get effectiveDomain(): Prisma.EffectiveDomainDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.psychomotiveDomain`: Exposes CRUD operations for the **PsychomotiveDomain** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PsychomotiveDomains
    * const psychomotiveDomains = await prisma.psychomotiveDomain.findMany()
    * ```
    */
  get psychomotiveDomain(): Prisma.PsychomotiveDomainDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.attendance`: Exposes CRUD operations for the **Attendance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Attendances
    * const attendances = await prisma.attendance.findMany()
    * ```
    */
  get attendance(): Prisma.AttendanceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.event`: Exposes CRUD operations for the **Event** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.event.findMany()
    * ```
    */
  get event(): Prisma.EventDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.announcement`: Exposes CRUD operations for the **Announcement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Announcements
    * const announcements = await prisma.announcement.findMany()
    * ```
    */
  get announcement(): Prisma.AnnouncementDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Administration: 'Administration',
    School: 'School',
    Student: 'Student',
    Teacher: 'Teacher',
    Parent: 'Parent',
    Subject: 'Subject',
    Class: 'Class',
    PaymentSetup: 'PaymentSetup',
    Term: 'Term',
    Payment: 'Payment',
    Assignment: 'Assignment',
    Test: 'Test',
    Question: 'Question',
    Answer: 'Answer',
    Submission: 'Submission',
    Grade: 'Grade',
    ClassGrade: 'ClassGrade',
    SubjectGrade: 'SubjectGrade',
    StudentGrade: 'StudentGrade',
    EffectiveDomain: 'EffectiveDomain',
    PsychomotiveDomain: 'PsychomotiveDomain',
    Attendance: 'Attendance',
    Event: 'Event',
    Announcement: 'Announcement'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "administration" | "school" | "student" | "teacher" | "parent" | "subject" | "class" | "paymentSetup" | "term" | "payment" | "assignment" | "test" | "question" | "answer" | "submission" | "grade" | "classGrade" | "subjectGrade" | "studentGrade" | "effectiveDomain" | "psychomotiveDomain" | "attendance" | "event" | "announcement"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Administration: {
        payload: Prisma.$AdministrationPayload<ExtArgs>
        fields: Prisma.AdministrationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdministrationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdministrationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdministrationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdministrationPayload>
          }
          findFirst: {
            args: Prisma.AdministrationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdministrationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdministrationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdministrationPayload>
          }
          findMany: {
            args: Prisma.AdministrationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdministrationPayload>[]
          }
          create: {
            args: Prisma.AdministrationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdministrationPayload>
          }
          createMany: {
            args: Prisma.AdministrationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdministrationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdministrationPayload>[]
          }
          delete: {
            args: Prisma.AdministrationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdministrationPayload>
          }
          update: {
            args: Prisma.AdministrationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdministrationPayload>
          }
          deleteMany: {
            args: Prisma.AdministrationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdministrationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AdministrationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdministrationPayload>[]
          }
          upsert: {
            args: Prisma.AdministrationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdministrationPayload>
          }
          aggregate: {
            args: Prisma.AdministrationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdministration>
          }
          groupBy: {
            args: Prisma.AdministrationGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdministrationGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdministrationCountArgs<ExtArgs>
            result: $Utils.Optional<AdministrationCountAggregateOutputType> | number
          }
        }
      }
      School: {
        payload: Prisma.$SchoolPayload<ExtArgs>
        fields: Prisma.SchoolFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SchoolFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SchoolFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          findFirst: {
            args: Prisma.SchoolFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SchoolFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          findMany: {
            args: Prisma.SchoolFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>[]
          }
          create: {
            args: Prisma.SchoolCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          createMany: {
            args: Prisma.SchoolCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SchoolCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>[]
          }
          delete: {
            args: Prisma.SchoolDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          update: {
            args: Prisma.SchoolUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          deleteMany: {
            args: Prisma.SchoolDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SchoolUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SchoolUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>[]
          }
          upsert: {
            args: Prisma.SchoolUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          aggregate: {
            args: Prisma.SchoolAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSchool>
          }
          groupBy: {
            args: Prisma.SchoolGroupByArgs<ExtArgs>
            result: $Utils.Optional<SchoolGroupByOutputType>[]
          }
          count: {
            args: Prisma.SchoolCountArgs<ExtArgs>
            result: $Utils.Optional<SchoolCountAggregateOutputType> | number
          }
        }
      }
      Student: {
        payload: Prisma.$StudentPayload<ExtArgs>
        fields: Prisma.StudentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findFirst: {
            args: Prisma.StudentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findMany: {
            args: Prisma.StudentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          create: {
            args: Prisma.StudentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          createMany: {
            args: Prisma.StudentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          delete: {
            args: Prisma.StudentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          update: {
            args: Prisma.StudentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          deleteMany: {
            args: Prisma.StudentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          upsert: {
            args: Prisma.StudentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          aggregate: {
            args: Prisma.StudentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudent>
          }
          groupBy: {
            args: Prisma.StudentGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentCountArgs<ExtArgs>
            result: $Utils.Optional<StudentCountAggregateOutputType> | number
          }
        }
      }
      Teacher: {
        payload: Prisma.$TeacherPayload<ExtArgs>
        fields: Prisma.TeacherFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeacherFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeacherFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          findFirst: {
            args: Prisma.TeacherFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeacherFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          findMany: {
            args: Prisma.TeacherFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>[]
          }
          create: {
            args: Prisma.TeacherCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          createMany: {
            args: Prisma.TeacherCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeacherCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>[]
          }
          delete: {
            args: Prisma.TeacherDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          update: {
            args: Prisma.TeacherUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          deleteMany: {
            args: Prisma.TeacherDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeacherUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TeacherUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>[]
          }
          upsert: {
            args: Prisma.TeacherUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          aggregate: {
            args: Prisma.TeacherAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeacher>
          }
          groupBy: {
            args: Prisma.TeacherGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeacherGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeacherCountArgs<ExtArgs>
            result: $Utils.Optional<TeacherCountAggregateOutputType> | number
          }
        }
      }
      Parent: {
        payload: Prisma.$ParentPayload<ExtArgs>
        fields: Prisma.ParentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ParentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ParentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentPayload>
          }
          findFirst: {
            args: Prisma.ParentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ParentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentPayload>
          }
          findMany: {
            args: Prisma.ParentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentPayload>[]
          }
          create: {
            args: Prisma.ParentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentPayload>
          }
          createMany: {
            args: Prisma.ParentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ParentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentPayload>[]
          }
          delete: {
            args: Prisma.ParentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentPayload>
          }
          update: {
            args: Prisma.ParentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentPayload>
          }
          deleteMany: {
            args: Prisma.ParentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ParentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ParentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentPayload>[]
          }
          upsert: {
            args: Prisma.ParentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentPayload>
          }
          aggregate: {
            args: Prisma.ParentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateParent>
          }
          groupBy: {
            args: Prisma.ParentGroupByArgs<ExtArgs>
            result: $Utils.Optional<ParentGroupByOutputType>[]
          }
          count: {
            args: Prisma.ParentCountArgs<ExtArgs>
            result: $Utils.Optional<ParentCountAggregateOutputType> | number
          }
        }
      }
      Subject: {
        payload: Prisma.$SubjectPayload<ExtArgs>
        fields: Prisma.SubjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          findFirst: {
            args: Prisma.SubjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          findMany: {
            args: Prisma.SubjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>[]
          }
          create: {
            args: Prisma.SubjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          createMany: {
            args: Prisma.SubjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>[]
          }
          delete: {
            args: Prisma.SubjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          update: {
            args: Prisma.SubjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          deleteMany: {
            args: Prisma.SubjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubjectUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>[]
          }
          upsert: {
            args: Prisma.SubjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectPayload>
          }
          aggregate: {
            args: Prisma.SubjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubject>
          }
          groupBy: {
            args: Prisma.SubjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubjectCountArgs<ExtArgs>
            result: $Utils.Optional<SubjectCountAggregateOutputType> | number
          }
        }
      }
      Class: {
        payload: Prisma.$ClassPayload<ExtArgs>
        fields: Prisma.ClassFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClassFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClassFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          findFirst: {
            args: Prisma.ClassFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClassFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          findMany: {
            args: Prisma.ClassFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>[]
          }
          create: {
            args: Prisma.ClassCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          createMany: {
            args: Prisma.ClassCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClassCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>[]
          }
          delete: {
            args: Prisma.ClassDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          update: {
            args: Prisma.ClassUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          deleteMany: {
            args: Prisma.ClassDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClassUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClassUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>[]
          }
          upsert: {
            args: Prisma.ClassUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          aggregate: {
            args: Prisma.ClassAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClass>
          }
          groupBy: {
            args: Prisma.ClassGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClassGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClassCountArgs<ExtArgs>
            result: $Utils.Optional<ClassCountAggregateOutputType> | number
          }
        }
      }
      PaymentSetup: {
        payload: Prisma.$PaymentSetupPayload<ExtArgs>
        fields: Prisma.PaymentSetupFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentSetupFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentSetupPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentSetupFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentSetupPayload>
          }
          findFirst: {
            args: Prisma.PaymentSetupFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentSetupPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentSetupFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentSetupPayload>
          }
          findMany: {
            args: Prisma.PaymentSetupFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentSetupPayload>[]
          }
          create: {
            args: Prisma.PaymentSetupCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentSetupPayload>
          }
          createMany: {
            args: Prisma.PaymentSetupCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentSetupCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentSetupPayload>[]
          }
          delete: {
            args: Prisma.PaymentSetupDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentSetupPayload>
          }
          update: {
            args: Prisma.PaymentSetupUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentSetupPayload>
          }
          deleteMany: {
            args: Prisma.PaymentSetupDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentSetupUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PaymentSetupUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentSetupPayload>[]
          }
          upsert: {
            args: Prisma.PaymentSetupUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentSetupPayload>
          }
          aggregate: {
            args: Prisma.PaymentSetupAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePaymentSetup>
          }
          groupBy: {
            args: Prisma.PaymentSetupGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentSetupGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentSetupCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentSetupCountAggregateOutputType> | number
          }
        }
      }
      Term: {
        payload: Prisma.$TermPayload<ExtArgs>
        fields: Prisma.TermFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TermFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TermFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermPayload>
          }
          findFirst: {
            args: Prisma.TermFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TermFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermPayload>
          }
          findMany: {
            args: Prisma.TermFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermPayload>[]
          }
          create: {
            args: Prisma.TermCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermPayload>
          }
          createMany: {
            args: Prisma.TermCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TermCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermPayload>[]
          }
          delete: {
            args: Prisma.TermDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermPayload>
          }
          update: {
            args: Prisma.TermUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermPayload>
          }
          deleteMany: {
            args: Prisma.TermDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TermUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TermUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermPayload>[]
          }
          upsert: {
            args: Prisma.TermUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermPayload>
          }
          aggregate: {
            args: Prisma.TermAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTerm>
          }
          groupBy: {
            args: Prisma.TermGroupByArgs<ExtArgs>
            result: $Utils.Optional<TermGroupByOutputType>[]
          }
          count: {
            args: Prisma.TermCountArgs<ExtArgs>
            result: $Utils.Optional<TermCountAggregateOutputType> | number
          }
        }
      }
      Payment: {
        payload: Prisma.$PaymentPayload<ExtArgs>
        fields: Prisma.PaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findFirst: {
            args: Prisma.PaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findMany: {
            args: Prisma.PaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          create: {
            args: Prisma.PaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          createMany: {
            args: Prisma.PaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          delete: {
            args: Prisma.PaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          update: {
            args: Prisma.PaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          deleteMany: {
            args: Prisma.PaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PaymentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          upsert: {
            args: Prisma.PaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          aggregate: {
            args: Prisma.PaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayment>
          }
          groupBy: {
            args: Prisma.PaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentCountAggregateOutputType> | number
          }
        }
      }
      Assignment: {
        payload: Prisma.$AssignmentPayload<ExtArgs>
        fields: Prisma.AssignmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssignmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssignmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          findFirst: {
            args: Prisma.AssignmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssignmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          findMany: {
            args: Prisma.AssignmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>[]
          }
          create: {
            args: Prisma.AssignmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          createMany: {
            args: Prisma.AssignmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AssignmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>[]
          }
          delete: {
            args: Prisma.AssignmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          update: {
            args: Prisma.AssignmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          deleteMany: {
            args: Prisma.AssignmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AssignmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AssignmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>[]
          }
          upsert: {
            args: Prisma.AssignmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          aggregate: {
            args: Prisma.AssignmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAssignment>
          }
          groupBy: {
            args: Prisma.AssignmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssignmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssignmentCountArgs<ExtArgs>
            result: $Utils.Optional<AssignmentCountAggregateOutputType> | number
          }
        }
      }
      Test: {
        payload: Prisma.$TestPayload<ExtArgs>
        fields: Prisma.TestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestPayload>
          }
          findFirst: {
            args: Prisma.TestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestPayload>
          }
          findMany: {
            args: Prisma.TestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestPayload>[]
          }
          create: {
            args: Prisma.TestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestPayload>
          }
          createMany: {
            args: Prisma.TestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestPayload>[]
          }
          delete: {
            args: Prisma.TestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestPayload>
          }
          update: {
            args: Prisma.TestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestPayload>
          }
          deleteMany: {
            args: Prisma.TestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TestUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestPayload>[]
          }
          upsert: {
            args: Prisma.TestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestPayload>
          }
          aggregate: {
            args: Prisma.TestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTest>
          }
          groupBy: {
            args: Prisma.TestGroupByArgs<ExtArgs>
            result: $Utils.Optional<TestGroupByOutputType>[]
          }
          count: {
            args: Prisma.TestCountArgs<ExtArgs>
            result: $Utils.Optional<TestCountAggregateOutputType> | number
          }
        }
      }
      Question: {
        payload: Prisma.$QuestionPayload<ExtArgs>
        fields: Prisma.QuestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findFirst: {
            args: Prisma.QuestionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findMany: {
            args: Prisma.QuestionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          create: {
            args: Prisma.QuestionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          createMany: {
            args: Prisma.QuestionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          delete: {
            args: Prisma.QuestionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          update: {
            args: Prisma.QuestionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          deleteMany: {
            args: Prisma.QuestionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuestionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          upsert: {
            args: Prisma.QuestionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          aggregate: {
            args: Prisma.QuestionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestion>
          }
          groupBy: {
            args: Prisma.QuestionGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionCountAggregateOutputType> | number
          }
        }
      }
      Answer: {
        payload: Prisma.$AnswerPayload<ExtArgs>
        fields: Prisma.AnswerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AnswerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnswerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerPayload>
          }
          findFirst: {
            args: Prisma.AnswerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnswerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerPayload>
          }
          findMany: {
            args: Prisma.AnswerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerPayload>[]
          }
          create: {
            args: Prisma.AnswerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerPayload>
          }
          createMany: {
            args: Prisma.AnswerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AnswerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerPayload>[]
          }
          delete: {
            args: Prisma.AnswerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerPayload>
          }
          update: {
            args: Prisma.AnswerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerPayload>
          }
          deleteMany: {
            args: Prisma.AnswerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AnswerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AnswerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerPayload>[]
          }
          upsert: {
            args: Prisma.AnswerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnswerPayload>
          }
          aggregate: {
            args: Prisma.AnswerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAnswer>
          }
          groupBy: {
            args: Prisma.AnswerGroupByArgs<ExtArgs>
            result: $Utils.Optional<AnswerGroupByOutputType>[]
          }
          count: {
            args: Prisma.AnswerCountArgs<ExtArgs>
            result: $Utils.Optional<AnswerCountAggregateOutputType> | number
          }
        }
      }
      Submission: {
        payload: Prisma.$SubmissionPayload<ExtArgs>
        fields: Prisma.SubmissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubmissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubmissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          findFirst: {
            args: Prisma.SubmissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubmissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          findMany: {
            args: Prisma.SubmissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>[]
          }
          create: {
            args: Prisma.SubmissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          createMany: {
            args: Prisma.SubmissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubmissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>[]
          }
          delete: {
            args: Prisma.SubmissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          update: {
            args: Prisma.SubmissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          deleteMany: {
            args: Prisma.SubmissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubmissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubmissionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>[]
          }
          upsert: {
            args: Prisma.SubmissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          aggregate: {
            args: Prisma.SubmissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubmission>
          }
          groupBy: {
            args: Prisma.SubmissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubmissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubmissionCountArgs<ExtArgs>
            result: $Utils.Optional<SubmissionCountAggregateOutputType> | number
          }
        }
      }
      Grade: {
        payload: Prisma.$GradePayload<ExtArgs>
        fields: Prisma.GradeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GradeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GradeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          findFirst: {
            args: Prisma.GradeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GradeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          findMany: {
            args: Prisma.GradeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>[]
          }
          create: {
            args: Prisma.GradeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          createMany: {
            args: Prisma.GradeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GradeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>[]
          }
          delete: {
            args: Prisma.GradeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          update: {
            args: Prisma.GradeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          deleteMany: {
            args: Prisma.GradeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GradeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GradeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>[]
          }
          upsert: {
            args: Prisma.GradeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          aggregate: {
            args: Prisma.GradeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGrade>
          }
          groupBy: {
            args: Prisma.GradeGroupByArgs<ExtArgs>
            result: $Utils.Optional<GradeGroupByOutputType>[]
          }
          count: {
            args: Prisma.GradeCountArgs<ExtArgs>
            result: $Utils.Optional<GradeCountAggregateOutputType> | number
          }
        }
      }
      ClassGrade: {
        payload: Prisma.$ClassGradePayload<ExtArgs>
        fields: Prisma.ClassGradeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClassGradeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassGradePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClassGradeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassGradePayload>
          }
          findFirst: {
            args: Prisma.ClassGradeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassGradePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClassGradeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassGradePayload>
          }
          findMany: {
            args: Prisma.ClassGradeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassGradePayload>[]
          }
          create: {
            args: Prisma.ClassGradeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassGradePayload>
          }
          createMany: {
            args: Prisma.ClassGradeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClassGradeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassGradePayload>[]
          }
          delete: {
            args: Prisma.ClassGradeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassGradePayload>
          }
          update: {
            args: Prisma.ClassGradeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassGradePayload>
          }
          deleteMany: {
            args: Prisma.ClassGradeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClassGradeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClassGradeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassGradePayload>[]
          }
          upsert: {
            args: Prisma.ClassGradeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassGradePayload>
          }
          aggregate: {
            args: Prisma.ClassGradeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClassGrade>
          }
          groupBy: {
            args: Prisma.ClassGradeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClassGradeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClassGradeCountArgs<ExtArgs>
            result: $Utils.Optional<ClassGradeCountAggregateOutputType> | number
          }
        }
      }
      SubjectGrade: {
        payload: Prisma.$SubjectGradePayload<ExtArgs>
        fields: Prisma.SubjectGradeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubjectGradeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectGradePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubjectGradeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectGradePayload>
          }
          findFirst: {
            args: Prisma.SubjectGradeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectGradePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubjectGradeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectGradePayload>
          }
          findMany: {
            args: Prisma.SubjectGradeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectGradePayload>[]
          }
          create: {
            args: Prisma.SubjectGradeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectGradePayload>
          }
          createMany: {
            args: Prisma.SubjectGradeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubjectGradeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectGradePayload>[]
          }
          delete: {
            args: Prisma.SubjectGradeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectGradePayload>
          }
          update: {
            args: Prisma.SubjectGradeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectGradePayload>
          }
          deleteMany: {
            args: Prisma.SubjectGradeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubjectGradeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubjectGradeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectGradePayload>[]
          }
          upsert: {
            args: Prisma.SubjectGradeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubjectGradePayload>
          }
          aggregate: {
            args: Prisma.SubjectGradeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubjectGrade>
          }
          groupBy: {
            args: Prisma.SubjectGradeGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubjectGradeGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubjectGradeCountArgs<ExtArgs>
            result: $Utils.Optional<SubjectGradeCountAggregateOutputType> | number
          }
        }
      }
      StudentGrade: {
        payload: Prisma.$StudentGradePayload<ExtArgs>
        fields: Prisma.StudentGradeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentGradeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentGradePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentGradeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentGradePayload>
          }
          findFirst: {
            args: Prisma.StudentGradeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentGradePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentGradeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentGradePayload>
          }
          findMany: {
            args: Prisma.StudentGradeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentGradePayload>[]
          }
          create: {
            args: Prisma.StudentGradeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentGradePayload>
          }
          createMany: {
            args: Prisma.StudentGradeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentGradeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentGradePayload>[]
          }
          delete: {
            args: Prisma.StudentGradeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentGradePayload>
          }
          update: {
            args: Prisma.StudentGradeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentGradePayload>
          }
          deleteMany: {
            args: Prisma.StudentGradeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentGradeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudentGradeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentGradePayload>[]
          }
          upsert: {
            args: Prisma.StudentGradeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentGradePayload>
          }
          aggregate: {
            args: Prisma.StudentGradeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudentGrade>
          }
          groupBy: {
            args: Prisma.StudentGradeGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentGradeGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentGradeCountArgs<ExtArgs>
            result: $Utils.Optional<StudentGradeCountAggregateOutputType> | number
          }
        }
      }
      EffectiveDomain: {
        payload: Prisma.$EffectiveDomainPayload<ExtArgs>
        fields: Prisma.EffectiveDomainFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EffectiveDomainFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EffectiveDomainPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EffectiveDomainFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EffectiveDomainPayload>
          }
          findFirst: {
            args: Prisma.EffectiveDomainFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EffectiveDomainPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EffectiveDomainFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EffectiveDomainPayload>
          }
          findMany: {
            args: Prisma.EffectiveDomainFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EffectiveDomainPayload>[]
          }
          create: {
            args: Prisma.EffectiveDomainCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EffectiveDomainPayload>
          }
          createMany: {
            args: Prisma.EffectiveDomainCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EffectiveDomainCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EffectiveDomainPayload>[]
          }
          delete: {
            args: Prisma.EffectiveDomainDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EffectiveDomainPayload>
          }
          update: {
            args: Prisma.EffectiveDomainUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EffectiveDomainPayload>
          }
          deleteMany: {
            args: Prisma.EffectiveDomainDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EffectiveDomainUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EffectiveDomainUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EffectiveDomainPayload>[]
          }
          upsert: {
            args: Prisma.EffectiveDomainUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EffectiveDomainPayload>
          }
          aggregate: {
            args: Prisma.EffectiveDomainAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEffectiveDomain>
          }
          groupBy: {
            args: Prisma.EffectiveDomainGroupByArgs<ExtArgs>
            result: $Utils.Optional<EffectiveDomainGroupByOutputType>[]
          }
          count: {
            args: Prisma.EffectiveDomainCountArgs<ExtArgs>
            result: $Utils.Optional<EffectiveDomainCountAggregateOutputType> | number
          }
        }
      }
      PsychomotiveDomain: {
        payload: Prisma.$PsychomotiveDomainPayload<ExtArgs>
        fields: Prisma.PsychomotiveDomainFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PsychomotiveDomainFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PsychomotiveDomainPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PsychomotiveDomainFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PsychomotiveDomainPayload>
          }
          findFirst: {
            args: Prisma.PsychomotiveDomainFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PsychomotiveDomainPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PsychomotiveDomainFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PsychomotiveDomainPayload>
          }
          findMany: {
            args: Prisma.PsychomotiveDomainFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PsychomotiveDomainPayload>[]
          }
          create: {
            args: Prisma.PsychomotiveDomainCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PsychomotiveDomainPayload>
          }
          createMany: {
            args: Prisma.PsychomotiveDomainCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PsychomotiveDomainCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PsychomotiveDomainPayload>[]
          }
          delete: {
            args: Prisma.PsychomotiveDomainDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PsychomotiveDomainPayload>
          }
          update: {
            args: Prisma.PsychomotiveDomainUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PsychomotiveDomainPayload>
          }
          deleteMany: {
            args: Prisma.PsychomotiveDomainDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PsychomotiveDomainUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PsychomotiveDomainUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PsychomotiveDomainPayload>[]
          }
          upsert: {
            args: Prisma.PsychomotiveDomainUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PsychomotiveDomainPayload>
          }
          aggregate: {
            args: Prisma.PsychomotiveDomainAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePsychomotiveDomain>
          }
          groupBy: {
            args: Prisma.PsychomotiveDomainGroupByArgs<ExtArgs>
            result: $Utils.Optional<PsychomotiveDomainGroupByOutputType>[]
          }
          count: {
            args: Prisma.PsychomotiveDomainCountArgs<ExtArgs>
            result: $Utils.Optional<PsychomotiveDomainCountAggregateOutputType> | number
          }
        }
      }
      Attendance: {
        payload: Prisma.$AttendancePayload<ExtArgs>
        fields: Prisma.AttendanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AttendanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AttendanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          findFirst: {
            args: Prisma.AttendanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AttendanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          findMany: {
            args: Prisma.AttendanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>[]
          }
          create: {
            args: Prisma.AttendanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          createMany: {
            args: Prisma.AttendanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AttendanceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>[]
          }
          delete: {
            args: Prisma.AttendanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          update: {
            args: Prisma.AttendanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          deleteMany: {
            args: Prisma.AttendanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AttendanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AttendanceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>[]
          }
          upsert: {
            args: Prisma.AttendanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttendancePayload>
          }
          aggregate: {
            args: Prisma.AttendanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAttendance>
          }
          groupBy: {
            args: Prisma.AttendanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<AttendanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.AttendanceCountArgs<ExtArgs>
            result: $Utils.Optional<AttendanceCountAggregateOutputType> | number
          }
        }
      }
      Event: {
        payload: Prisma.$EventPayload<ExtArgs>
        fields: Prisma.EventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findFirst: {
            args: Prisma.EventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findMany: {
            args: Prisma.EventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          create: {
            args: Prisma.EventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          createMany: {
            args: Prisma.EventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          delete: {
            args: Prisma.EventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          update: {
            args: Prisma.EventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          deleteMany: {
            args: Prisma.EventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EventUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          upsert: {
            args: Prisma.EventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          aggregate: {
            args: Prisma.EventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvent>
          }
          groupBy: {
            args: Prisma.EventGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventCountArgs<ExtArgs>
            result: $Utils.Optional<EventCountAggregateOutputType> | number
          }
        }
      }
      Announcement: {
        payload: Prisma.$AnnouncementPayload<ExtArgs>
        fields: Prisma.AnnouncementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AnnouncementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnnouncementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnnouncementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnnouncementPayload>
          }
          findFirst: {
            args: Prisma.AnnouncementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnnouncementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnnouncementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnnouncementPayload>
          }
          findMany: {
            args: Prisma.AnnouncementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnnouncementPayload>[]
          }
          create: {
            args: Prisma.AnnouncementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnnouncementPayload>
          }
          createMany: {
            args: Prisma.AnnouncementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AnnouncementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnnouncementPayload>[]
          }
          delete: {
            args: Prisma.AnnouncementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnnouncementPayload>
          }
          update: {
            args: Prisma.AnnouncementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnnouncementPayload>
          }
          deleteMany: {
            args: Prisma.AnnouncementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AnnouncementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AnnouncementUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnnouncementPayload>[]
          }
          upsert: {
            args: Prisma.AnnouncementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnnouncementPayload>
          }
          aggregate: {
            args: Prisma.AnnouncementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAnnouncement>
          }
          groupBy: {
            args: Prisma.AnnouncementGroupByArgs<ExtArgs>
            result: $Utils.Optional<AnnouncementGroupByOutputType>[]
          }
          count: {
            args: Prisma.AnnouncementCountArgs<ExtArgs>
            result: $Utils.Optional<AnnouncementCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    administration?: AdministrationOmit
    school?: SchoolOmit
    student?: StudentOmit
    teacher?: TeacherOmit
    parent?: ParentOmit
    subject?: SubjectOmit
    class?: ClassOmit
    paymentSetup?: PaymentSetupOmit
    term?: TermOmit
    payment?: PaymentOmit
    assignment?: AssignmentOmit
    test?: TestOmit
    question?: QuestionOmit
    answer?: AnswerOmit
    submission?: SubmissionOmit
    grade?: GradeOmit
    classGrade?: ClassGradeOmit
    subjectGrade?: SubjectGradeOmit
    studentGrade?: StudentGradeOmit
    effectiveDomain?: EffectiveDomainOmit
    psychomotiveDomain?: PsychomotiveDomainOmit
    attendance?: AttendanceOmit
    event?: EventOmit
    announcement?: AnnouncementOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type SchoolCountOutputType
   */

  export type SchoolCountOutputType = {
    students: number
    teachers: number
    subjects: number
    paymentsetups: number
    payments: number
  }

  export type SchoolCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    students?: boolean | SchoolCountOutputTypeCountStudentsArgs
    teachers?: boolean | SchoolCountOutputTypeCountTeachersArgs
    subjects?: boolean | SchoolCountOutputTypeCountSubjectsArgs
    paymentsetups?: boolean | SchoolCountOutputTypeCountPaymentsetupsArgs
    payments?: boolean | SchoolCountOutputTypeCountPaymentsArgs
  }

  // Custom InputTypes
  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolCountOutputType
     */
    select?: SchoolCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
  }

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountTeachersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherWhereInput
  }

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountSubjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubjectWhereInput
  }

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountPaymentsetupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentSetupWhereInput
  }

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }


  /**
   * Count Type StudentCountOutputType
   */

  export type StudentCountOutputType = {
    attendances: number
    assignments: number
    submissions: number
    answers: number
    grades: number
    effective: number
    psychomotive: number
    payments: number
  }

  export type StudentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attendances?: boolean | StudentCountOutputTypeCountAttendancesArgs
    assignments?: boolean | StudentCountOutputTypeCountAssignmentsArgs
    submissions?: boolean | StudentCountOutputTypeCountSubmissionsArgs
    answers?: boolean | StudentCountOutputTypeCountAnswersArgs
    grades?: boolean | StudentCountOutputTypeCountGradesArgs
    effective?: boolean | StudentCountOutputTypeCountEffectiveArgs
    psychomotive?: boolean | StudentCountOutputTypeCountPsychomotiveArgs
    payments?: boolean | StudentCountOutputTypeCountPaymentsArgs
  }

  // Custom InputTypes
  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentCountOutputType
     */
    select?: StudentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountAttendancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceWhereInput
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssignmentWhereInput
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionWhereInput
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnswerWhereInput
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountGradesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentGradeWhereInput
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountEffectiveArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EffectiveDomainWhereInput
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountPsychomotiveArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PsychomotiveDomainWhereInput
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }


  /**
   * Count Type TeacherCountOutputType
   */

  export type TeacherCountOutputType = {
    subjects: number
    classes: number
    assignments: number
    tests: number
  }

  export type TeacherCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subjects?: boolean | TeacherCountOutputTypeCountSubjectsArgs
    classes?: boolean | TeacherCountOutputTypeCountClassesArgs
    assignments?: boolean | TeacherCountOutputTypeCountAssignmentsArgs
    tests?: boolean | TeacherCountOutputTypeCountTestsArgs
  }

  // Custom InputTypes
  /**
   * TeacherCountOutputType without action
   */
  export type TeacherCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCountOutputType
     */
    select?: TeacherCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeacherCountOutputType without action
   */
  export type TeacherCountOutputTypeCountSubjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubjectWhereInput
  }

  /**
   * TeacherCountOutputType without action
   */
  export type TeacherCountOutputTypeCountClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassWhereInput
  }

  /**
   * TeacherCountOutputType without action
   */
  export type TeacherCountOutputTypeCountAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssignmentWhereInput
  }

  /**
   * TeacherCountOutputType without action
   */
  export type TeacherCountOutputTypeCountTestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestWhereInput
  }


  /**
   * Count Type ParentCountOutputType
   */

  export type ParentCountOutputType = {
    students: number
  }

  export type ParentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    students?: boolean | ParentCountOutputTypeCountStudentsArgs
  }

  // Custom InputTypes
  /**
   * ParentCountOutputType without action
   */
  export type ParentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentCountOutputType
     */
    select?: ParentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ParentCountOutputType without action
   */
  export type ParentCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
  }


  /**
   * Count Type SubjectCountOutputType
   */

  export type SubjectCountOutputType = {
    teachers: number
    assignments: number
    grades: number
    tests: number
  }

  export type SubjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teachers?: boolean | SubjectCountOutputTypeCountTeachersArgs
    assignments?: boolean | SubjectCountOutputTypeCountAssignmentsArgs
    grades?: boolean | SubjectCountOutputTypeCountGradesArgs
    tests?: boolean | SubjectCountOutputTypeCountTestsArgs
  }

  // Custom InputTypes
  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectCountOutputType
     */
    select?: SubjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeCountTeachersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherWhereInput
  }

  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeCountAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssignmentWhereInput
  }

  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeCountGradesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubjectGradeWhereInput
  }

  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeCountTestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestWhereInput
  }


  /**
   * Count Type ClassCountOutputType
   */

  export type ClassCountOutputType = {
    students: number
    gradings: number
    events: number
    announcements: number
  }

  export type ClassCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    students?: boolean | ClassCountOutputTypeCountStudentsArgs
    gradings?: boolean | ClassCountOutputTypeCountGradingsArgs
    events?: boolean | ClassCountOutputTypeCountEventsArgs
    announcements?: boolean | ClassCountOutputTypeCountAnnouncementsArgs
  }

  // Custom InputTypes
  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassCountOutputType
     */
    select?: ClassCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountGradingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassGradeWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountAnnouncementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnnouncementWhereInput
  }


  /**
   * Count Type AssignmentCountOutputType
   */

  export type AssignmentCountOutputType = {
    submissions: number
    students: number
  }

  export type AssignmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submissions?: boolean | AssignmentCountOutputTypeCountSubmissionsArgs
    students?: boolean | AssignmentCountOutputTypeCountStudentsArgs
  }

  // Custom InputTypes
  /**
   * AssignmentCountOutputType without action
   */
  export type AssignmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentCountOutputType
     */
    select?: AssignmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AssignmentCountOutputType without action
   */
  export type AssignmentCountOutputTypeCountSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionWhereInput
  }

  /**
   * AssignmentCountOutputType without action
   */
  export type AssignmentCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
  }


  /**
   * Count Type TestCountOutputType
   */

  export type TestCountOutputType = {
    questions: number
    answers: number
  }

  export type TestCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | TestCountOutputTypeCountQuestionsArgs
    answers?: boolean | TestCountOutputTypeCountAnswersArgs
  }

  // Custom InputTypes
  /**
   * TestCountOutputType without action
   */
  export type TestCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestCountOutputType
     */
    select?: TestCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TestCountOutputType without action
   */
  export type TestCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
  }

  /**
   * TestCountOutputType without action
   */
  export type TestCountOutputTypeCountAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnswerWhereInput
  }


  /**
   * Count Type GradeCountOutputType
   */

  export type GradeCountOutputType = {
    gradings: number
    effective: number
    psychomotive: number
  }

  export type GradeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gradings?: boolean | GradeCountOutputTypeCountGradingsArgs
    effective?: boolean | GradeCountOutputTypeCountEffectiveArgs
    psychomotive?: boolean | GradeCountOutputTypeCountPsychomotiveArgs
  }

  // Custom InputTypes
  /**
   * GradeCountOutputType without action
   */
  export type GradeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GradeCountOutputType
     */
    select?: GradeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GradeCountOutputType without action
   */
  export type GradeCountOutputTypeCountGradingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassGradeWhereInput
  }

  /**
   * GradeCountOutputType without action
   */
  export type GradeCountOutputTypeCountEffectiveArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EffectiveDomainWhereInput
  }

  /**
   * GradeCountOutputType without action
   */
  export type GradeCountOutputTypeCountPsychomotiveArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PsychomotiveDomainWhereInput
  }


  /**
   * Count Type ClassGradeCountOutputType
   */

  export type ClassGradeCountOutputType = {
    subjects: number
  }

  export type ClassGradeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subjects?: boolean | ClassGradeCountOutputTypeCountSubjectsArgs
  }

  // Custom InputTypes
  /**
   * ClassGradeCountOutputType without action
   */
  export type ClassGradeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassGradeCountOutputType
     */
    select?: ClassGradeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClassGradeCountOutputType without action
   */
  export type ClassGradeCountOutputTypeCountSubjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubjectGradeWhereInput
  }


  /**
   * Count Type SubjectGradeCountOutputType
   */

  export type SubjectGradeCountOutputType = {
    students: number
  }

  export type SubjectGradeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    students?: boolean | SubjectGradeCountOutputTypeCountStudentsArgs
  }

  // Custom InputTypes
  /**
   * SubjectGradeCountOutputType without action
   */
  export type SubjectGradeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectGradeCountOutputType
     */
    select?: SubjectGradeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubjectGradeCountOutputType without action
   */
  export type SubjectGradeCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentGradeWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Administration
   */

  export type AggregateAdministration = {
    _count: AdministrationCountAggregateOutputType | null
    _min: AdministrationMinAggregateOutputType | null
    _max: AdministrationMaxAggregateOutputType | null
  }

  export type AdministrationMinAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    role: $Enums.Roles | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type AdministrationMaxAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    role: $Enums.Roles | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type AdministrationCountAggregateOutputType = {
    id: number
    username: number
    email: number
    role: number
    createdAt: number
    updateAt: number
    _all: number
  }


  export type AdministrationMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    role?: true
    createdAt?: true
    updateAt?: true
  }

  export type AdministrationMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    role?: true
    createdAt?: true
    updateAt?: true
  }

  export type AdministrationCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    role?: true
    createdAt?: true
    updateAt?: true
    _all?: true
  }

  export type AdministrationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Administration to aggregate.
     */
    where?: AdministrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Administrations to fetch.
     */
    orderBy?: AdministrationOrderByWithRelationInput | AdministrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdministrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Administrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Administrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Administrations
    **/
    _count?: true | AdministrationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdministrationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdministrationMaxAggregateInputType
  }

  export type GetAdministrationAggregateType<T extends AdministrationAggregateArgs> = {
        [P in keyof T & keyof AggregateAdministration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdministration[P]>
      : GetScalarType<T[P], AggregateAdministration[P]>
  }




  export type AdministrationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdministrationWhereInput
    orderBy?: AdministrationOrderByWithAggregationInput | AdministrationOrderByWithAggregationInput[]
    by: AdministrationScalarFieldEnum[] | AdministrationScalarFieldEnum
    having?: AdministrationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdministrationCountAggregateInputType | true
    _min?: AdministrationMinAggregateInputType
    _max?: AdministrationMaxAggregateInputType
  }

  export type AdministrationGroupByOutputType = {
    id: string
    username: string
    email: string
    role: $Enums.Roles
    createdAt: Date
    updateAt: Date
    _count: AdministrationCountAggregateOutputType | null
    _min: AdministrationMinAggregateOutputType | null
    _max: AdministrationMaxAggregateOutputType | null
  }

  type GetAdministrationGroupByPayload<T extends AdministrationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdministrationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdministrationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdministrationGroupByOutputType[P]>
            : GetScalarType<T[P], AdministrationGroupByOutputType[P]>
        }
      >
    >


  export type AdministrationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    role?: boolean
    createdAt?: boolean
    updateAt?: boolean
  }, ExtArgs["result"]["administration"]>

  export type AdministrationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    role?: boolean
    createdAt?: boolean
    updateAt?: boolean
  }, ExtArgs["result"]["administration"]>

  export type AdministrationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    role?: boolean
    createdAt?: boolean
    updateAt?: boolean
  }, ExtArgs["result"]["administration"]>

  export type AdministrationSelectScalar = {
    id?: boolean
    username?: boolean
    email?: boolean
    role?: boolean
    createdAt?: boolean
    updateAt?: boolean
  }

  export type AdministrationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "email" | "role" | "createdAt" | "updateAt", ExtArgs["result"]["administration"]>

  export type $AdministrationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Administration"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      email: string
      role: $Enums.Roles
      createdAt: Date
      updateAt: Date
    }, ExtArgs["result"]["administration"]>
    composites: {}
  }

  type AdministrationGetPayload<S extends boolean | null | undefined | AdministrationDefaultArgs> = $Result.GetResult<Prisma.$AdministrationPayload, S>

  type AdministrationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdministrationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdministrationCountAggregateInputType | true
    }

  export interface AdministrationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Administration'], meta: { name: 'Administration' } }
    /**
     * Find zero or one Administration that matches the filter.
     * @param {AdministrationFindUniqueArgs} args - Arguments to find a Administration
     * @example
     * // Get one Administration
     * const administration = await prisma.administration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdministrationFindUniqueArgs>(args: SelectSubset<T, AdministrationFindUniqueArgs<ExtArgs>>): Prisma__AdministrationClient<$Result.GetResult<Prisma.$AdministrationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Administration that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdministrationFindUniqueOrThrowArgs} args - Arguments to find a Administration
     * @example
     * // Get one Administration
     * const administration = await prisma.administration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdministrationFindUniqueOrThrowArgs>(args: SelectSubset<T, AdministrationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdministrationClient<$Result.GetResult<Prisma.$AdministrationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Administration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdministrationFindFirstArgs} args - Arguments to find a Administration
     * @example
     * // Get one Administration
     * const administration = await prisma.administration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdministrationFindFirstArgs>(args?: SelectSubset<T, AdministrationFindFirstArgs<ExtArgs>>): Prisma__AdministrationClient<$Result.GetResult<Prisma.$AdministrationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Administration that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdministrationFindFirstOrThrowArgs} args - Arguments to find a Administration
     * @example
     * // Get one Administration
     * const administration = await prisma.administration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdministrationFindFirstOrThrowArgs>(args?: SelectSubset<T, AdministrationFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdministrationClient<$Result.GetResult<Prisma.$AdministrationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Administrations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdministrationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Administrations
     * const administrations = await prisma.administration.findMany()
     * 
     * // Get first 10 Administrations
     * const administrations = await prisma.administration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const administrationWithIdOnly = await prisma.administration.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdministrationFindManyArgs>(args?: SelectSubset<T, AdministrationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdministrationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Administration.
     * @param {AdministrationCreateArgs} args - Arguments to create a Administration.
     * @example
     * // Create one Administration
     * const Administration = await prisma.administration.create({
     *   data: {
     *     // ... data to create a Administration
     *   }
     * })
     * 
     */
    create<T extends AdministrationCreateArgs>(args: SelectSubset<T, AdministrationCreateArgs<ExtArgs>>): Prisma__AdministrationClient<$Result.GetResult<Prisma.$AdministrationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Administrations.
     * @param {AdministrationCreateManyArgs} args - Arguments to create many Administrations.
     * @example
     * // Create many Administrations
     * const administration = await prisma.administration.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdministrationCreateManyArgs>(args?: SelectSubset<T, AdministrationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Administrations and returns the data saved in the database.
     * @param {AdministrationCreateManyAndReturnArgs} args - Arguments to create many Administrations.
     * @example
     * // Create many Administrations
     * const administration = await prisma.administration.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Administrations and only return the `id`
     * const administrationWithIdOnly = await prisma.administration.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdministrationCreateManyAndReturnArgs>(args?: SelectSubset<T, AdministrationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdministrationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Administration.
     * @param {AdministrationDeleteArgs} args - Arguments to delete one Administration.
     * @example
     * // Delete one Administration
     * const Administration = await prisma.administration.delete({
     *   where: {
     *     // ... filter to delete one Administration
     *   }
     * })
     * 
     */
    delete<T extends AdministrationDeleteArgs>(args: SelectSubset<T, AdministrationDeleteArgs<ExtArgs>>): Prisma__AdministrationClient<$Result.GetResult<Prisma.$AdministrationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Administration.
     * @param {AdministrationUpdateArgs} args - Arguments to update one Administration.
     * @example
     * // Update one Administration
     * const administration = await prisma.administration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdministrationUpdateArgs>(args: SelectSubset<T, AdministrationUpdateArgs<ExtArgs>>): Prisma__AdministrationClient<$Result.GetResult<Prisma.$AdministrationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Administrations.
     * @param {AdministrationDeleteManyArgs} args - Arguments to filter Administrations to delete.
     * @example
     * // Delete a few Administrations
     * const { count } = await prisma.administration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdministrationDeleteManyArgs>(args?: SelectSubset<T, AdministrationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Administrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdministrationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Administrations
     * const administration = await prisma.administration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdministrationUpdateManyArgs>(args: SelectSubset<T, AdministrationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Administrations and returns the data updated in the database.
     * @param {AdministrationUpdateManyAndReturnArgs} args - Arguments to update many Administrations.
     * @example
     * // Update many Administrations
     * const administration = await prisma.administration.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Administrations and only return the `id`
     * const administrationWithIdOnly = await prisma.administration.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AdministrationUpdateManyAndReturnArgs>(args: SelectSubset<T, AdministrationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdministrationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Administration.
     * @param {AdministrationUpsertArgs} args - Arguments to update or create a Administration.
     * @example
     * // Update or create a Administration
     * const administration = await prisma.administration.upsert({
     *   create: {
     *     // ... data to create a Administration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Administration we want to update
     *   }
     * })
     */
    upsert<T extends AdministrationUpsertArgs>(args: SelectSubset<T, AdministrationUpsertArgs<ExtArgs>>): Prisma__AdministrationClient<$Result.GetResult<Prisma.$AdministrationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Administrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdministrationCountArgs} args - Arguments to filter Administrations to count.
     * @example
     * // Count the number of Administrations
     * const count = await prisma.administration.count({
     *   where: {
     *     // ... the filter for the Administrations we want to count
     *   }
     * })
    **/
    count<T extends AdministrationCountArgs>(
      args?: Subset<T, AdministrationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdministrationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Administration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdministrationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdministrationAggregateArgs>(args: Subset<T, AdministrationAggregateArgs>): Prisma.PrismaPromise<GetAdministrationAggregateType<T>>

    /**
     * Group by Administration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdministrationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdministrationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdministrationGroupByArgs['orderBy'] }
        : { orderBy?: AdministrationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdministrationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdministrationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Administration model
   */
  readonly fields: AdministrationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Administration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdministrationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Administration model
   */
  interface AdministrationFieldRefs {
    readonly id: FieldRef<"Administration", 'String'>
    readonly username: FieldRef<"Administration", 'String'>
    readonly email: FieldRef<"Administration", 'String'>
    readonly role: FieldRef<"Administration", 'Roles'>
    readonly createdAt: FieldRef<"Administration", 'DateTime'>
    readonly updateAt: FieldRef<"Administration", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Administration findUnique
   */
  export type AdministrationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administration
     */
    select?: AdministrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Administration
     */
    omit?: AdministrationOmit<ExtArgs> | null
    /**
     * Filter, which Administration to fetch.
     */
    where: AdministrationWhereUniqueInput
  }

  /**
   * Administration findUniqueOrThrow
   */
  export type AdministrationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administration
     */
    select?: AdministrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Administration
     */
    omit?: AdministrationOmit<ExtArgs> | null
    /**
     * Filter, which Administration to fetch.
     */
    where: AdministrationWhereUniqueInput
  }

  /**
   * Administration findFirst
   */
  export type AdministrationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administration
     */
    select?: AdministrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Administration
     */
    omit?: AdministrationOmit<ExtArgs> | null
    /**
     * Filter, which Administration to fetch.
     */
    where?: AdministrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Administrations to fetch.
     */
    orderBy?: AdministrationOrderByWithRelationInput | AdministrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Administrations.
     */
    cursor?: AdministrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Administrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Administrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Administrations.
     */
    distinct?: AdministrationScalarFieldEnum | AdministrationScalarFieldEnum[]
  }

  /**
   * Administration findFirstOrThrow
   */
  export type AdministrationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administration
     */
    select?: AdministrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Administration
     */
    omit?: AdministrationOmit<ExtArgs> | null
    /**
     * Filter, which Administration to fetch.
     */
    where?: AdministrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Administrations to fetch.
     */
    orderBy?: AdministrationOrderByWithRelationInput | AdministrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Administrations.
     */
    cursor?: AdministrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Administrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Administrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Administrations.
     */
    distinct?: AdministrationScalarFieldEnum | AdministrationScalarFieldEnum[]
  }

  /**
   * Administration findMany
   */
  export type AdministrationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administration
     */
    select?: AdministrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Administration
     */
    omit?: AdministrationOmit<ExtArgs> | null
    /**
     * Filter, which Administrations to fetch.
     */
    where?: AdministrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Administrations to fetch.
     */
    orderBy?: AdministrationOrderByWithRelationInput | AdministrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Administrations.
     */
    cursor?: AdministrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Administrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Administrations.
     */
    skip?: number
    distinct?: AdministrationScalarFieldEnum | AdministrationScalarFieldEnum[]
  }

  /**
   * Administration create
   */
  export type AdministrationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administration
     */
    select?: AdministrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Administration
     */
    omit?: AdministrationOmit<ExtArgs> | null
    /**
     * The data needed to create a Administration.
     */
    data: XOR<AdministrationCreateInput, AdministrationUncheckedCreateInput>
  }

  /**
   * Administration createMany
   */
  export type AdministrationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Administrations.
     */
    data: AdministrationCreateManyInput | AdministrationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Administration createManyAndReturn
   */
  export type AdministrationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administration
     */
    select?: AdministrationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Administration
     */
    omit?: AdministrationOmit<ExtArgs> | null
    /**
     * The data used to create many Administrations.
     */
    data: AdministrationCreateManyInput | AdministrationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Administration update
   */
  export type AdministrationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administration
     */
    select?: AdministrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Administration
     */
    omit?: AdministrationOmit<ExtArgs> | null
    /**
     * The data needed to update a Administration.
     */
    data: XOR<AdministrationUpdateInput, AdministrationUncheckedUpdateInput>
    /**
     * Choose, which Administration to update.
     */
    where: AdministrationWhereUniqueInput
  }

  /**
   * Administration updateMany
   */
  export type AdministrationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Administrations.
     */
    data: XOR<AdministrationUpdateManyMutationInput, AdministrationUncheckedUpdateManyInput>
    /**
     * Filter which Administrations to update
     */
    where?: AdministrationWhereInput
    /**
     * Limit how many Administrations to update.
     */
    limit?: number
  }

  /**
   * Administration updateManyAndReturn
   */
  export type AdministrationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administration
     */
    select?: AdministrationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Administration
     */
    omit?: AdministrationOmit<ExtArgs> | null
    /**
     * The data used to update Administrations.
     */
    data: XOR<AdministrationUpdateManyMutationInput, AdministrationUncheckedUpdateManyInput>
    /**
     * Filter which Administrations to update
     */
    where?: AdministrationWhereInput
    /**
     * Limit how many Administrations to update.
     */
    limit?: number
  }

  /**
   * Administration upsert
   */
  export type AdministrationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administration
     */
    select?: AdministrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Administration
     */
    omit?: AdministrationOmit<ExtArgs> | null
    /**
     * The filter to search for the Administration to update in case it exists.
     */
    where: AdministrationWhereUniqueInput
    /**
     * In case the Administration found by the `where` argument doesn't exist, create a new Administration with this data.
     */
    create: XOR<AdministrationCreateInput, AdministrationUncheckedCreateInput>
    /**
     * In case the Administration was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdministrationUpdateInput, AdministrationUncheckedUpdateInput>
  }

  /**
   * Administration delete
   */
  export type AdministrationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administration
     */
    select?: AdministrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Administration
     */
    omit?: AdministrationOmit<ExtArgs> | null
    /**
     * Filter which Administration to delete.
     */
    where: AdministrationWhereUniqueInput
  }

  /**
   * Administration deleteMany
   */
  export type AdministrationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Administrations to delete
     */
    where?: AdministrationWhereInput
    /**
     * Limit how many Administrations to delete.
     */
    limit?: number
  }

  /**
   * Administration without action
   */
  export type AdministrationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administration
     */
    select?: AdministrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Administration
     */
    omit?: AdministrationOmit<ExtArgs> | null
  }


  /**
   * Model School
   */

  export type AggregateSchool = {
    _count: SchoolCountAggregateOutputType | null
    _min: SchoolMinAggregateOutputType | null
    _max: SchoolMaxAggregateOutputType | null
  }

  export type SchoolMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    phone: string | null
    address: string | null
    logo: string | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type SchoolMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    phone: string | null
    address: string | null
    logo: string | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type SchoolCountAggregateOutputType = {
    id: number
    name: number
    email: number
    phone: number
    address: number
    logo: number
    createdAt: number
    updateAt: number
    _all: number
  }


  export type SchoolMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    address?: true
    logo?: true
    createdAt?: true
    updateAt?: true
  }

  export type SchoolMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    address?: true
    logo?: true
    createdAt?: true
    updateAt?: true
  }

  export type SchoolCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    address?: true
    logo?: true
    createdAt?: true
    updateAt?: true
    _all?: true
  }

  export type SchoolAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which School to aggregate.
     */
    where?: SchoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     */
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SchoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Schools
    **/
    _count?: true | SchoolCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SchoolMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SchoolMaxAggregateInputType
  }

  export type GetSchoolAggregateType<T extends SchoolAggregateArgs> = {
        [P in keyof T & keyof AggregateSchool]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchool[P]>
      : GetScalarType<T[P], AggregateSchool[P]>
  }




  export type SchoolGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchoolWhereInput
    orderBy?: SchoolOrderByWithAggregationInput | SchoolOrderByWithAggregationInput[]
    by: SchoolScalarFieldEnum[] | SchoolScalarFieldEnum
    having?: SchoolScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SchoolCountAggregateInputType | true
    _min?: SchoolMinAggregateInputType
    _max?: SchoolMaxAggregateInputType
  }

  export type SchoolGroupByOutputType = {
    id: string
    name: string
    email: string
    phone: string | null
    address: string
    logo: string | null
    createdAt: Date
    updateAt: Date
    _count: SchoolCountAggregateOutputType | null
    _min: SchoolMinAggregateOutputType | null
    _max: SchoolMaxAggregateOutputType | null
  }

  type GetSchoolGroupByPayload<T extends SchoolGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SchoolGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SchoolGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SchoolGroupByOutputType[P]>
            : GetScalarType<T[P], SchoolGroupByOutputType[P]>
        }
      >
    >


  export type SchoolSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    logo?: boolean
    createdAt?: boolean
    updateAt?: boolean
    students?: boolean | School$studentsArgs<ExtArgs>
    teachers?: boolean | School$teachersArgs<ExtArgs>
    subjects?: boolean | School$subjectsArgs<ExtArgs>
    paymentsetups?: boolean | School$paymentsetupsArgs<ExtArgs>
    payments?: boolean | School$paymentsArgs<ExtArgs>
    _count?: boolean | SchoolCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["school"]>

  export type SchoolSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    logo?: boolean
    createdAt?: boolean
    updateAt?: boolean
  }, ExtArgs["result"]["school"]>

  export type SchoolSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    logo?: boolean
    createdAt?: boolean
    updateAt?: boolean
  }, ExtArgs["result"]["school"]>

  export type SchoolSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    logo?: boolean
    createdAt?: boolean
    updateAt?: boolean
  }

  export type SchoolOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "phone" | "address" | "logo" | "createdAt" | "updateAt", ExtArgs["result"]["school"]>
  export type SchoolInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    students?: boolean | School$studentsArgs<ExtArgs>
    teachers?: boolean | School$teachersArgs<ExtArgs>
    subjects?: boolean | School$subjectsArgs<ExtArgs>
    paymentsetups?: boolean | School$paymentsetupsArgs<ExtArgs>
    payments?: boolean | School$paymentsArgs<ExtArgs>
    _count?: boolean | SchoolCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SchoolIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type SchoolIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SchoolPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "School"
    objects: {
      students: Prisma.$StudentPayload<ExtArgs>[]
      teachers: Prisma.$TeacherPayload<ExtArgs>[]
      subjects: Prisma.$SubjectPayload<ExtArgs>[]
      paymentsetups: Prisma.$PaymentSetupPayload<ExtArgs>[]
      payments: Prisma.$PaymentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      phone: string | null
      address: string
      logo: string | null
      createdAt: Date
      updateAt: Date
    }, ExtArgs["result"]["school"]>
    composites: {}
  }

  type SchoolGetPayload<S extends boolean | null | undefined | SchoolDefaultArgs> = $Result.GetResult<Prisma.$SchoolPayload, S>

  type SchoolCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SchoolFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SchoolCountAggregateInputType | true
    }

  export interface SchoolDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['School'], meta: { name: 'School' } }
    /**
     * Find zero or one School that matches the filter.
     * @param {SchoolFindUniqueArgs} args - Arguments to find a School
     * @example
     * // Get one School
     * const school = await prisma.school.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SchoolFindUniqueArgs>(args: SelectSubset<T, SchoolFindUniqueArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one School that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SchoolFindUniqueOrThrowArgs} args - Arguments to find a School
     * @example
     * // Get one School
     * const school = await prisma.school.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SchoolFindUniqueOrThrowArgs>(args: SelectSubset<T, SchoolFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first School that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolFindFirstArgs} args - Arguments to find a School
     * @example
     * // Get one School
     * const school = await prisma.school.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SchoolFindFirstArgs>(args?: SelectSubset<T, SchoolFindFirstArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first School that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolFindFirstOrThrowArgs} args - Arguments to find a School
     * @example
     * // Get one School
     * const school = await prisma.school.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SchoolFindFirstOrThrowArgs>(args?: SelectSubset<T, SchoolFindFirstOrThrowArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Schools that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Schools
     * const schools = await prisma.school.findMany()
     * 
     * // Get first 10 Schools
     * const schools = await prisma.school.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const schoolWithIdOnly = await prisma.school.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SchoolFindManyArgs>(args?: SelectSubset<T, SchoolFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a School.
     * @param {SchoolCreateArgs} args - Arguments to create a School.
     * @example
     * // Create one School
     * const School = await prisma.school.create({
     *   data: {
     *     // ... data to create a School
     *   }
     * })
     * 
     */
    create<T extends SchoolCreateArgs>(args: SelectSubset<T, SchoolCreateArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Schools.
     * @param {SchoolCreateManyArgs} args - Arguments to create many Schools.
     * @example
     * // Create many Schools
     * const school = await prisma.school.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SchoolCreateManyArgs>(args?: SelectSubset<T, SchoolCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Schools and returns the data saved in the database.
     * @param {SchoolCreateManyAndReturnArgs} args - Arguments to create many Schools.
     * @example
     * // Create many Schools
     * const school = await prisma.school.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Schools and only return the `id`
     * const schoolWithIdOnly = await prisma.school.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SchoolCreateManyAndReturnArgs>(args?: SelectSubset<T, SchoolCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a School.
     * @param {SchoolDeleteArgs} args - Arguments to delete one School.
     * @example
     * // Delete one School
     * const School = await prisma.school.delete({
     *   where: {
     *     // ... filter to delete one School
     *   }
     * })
     * 
     */
    delete<T extends SchoolDeleteArgs>(args: SelectSubset<T, SchoolDeleteArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one School.
     * @param {SchoolUpdateArgs} args - Arguments to update one School.
     * @example
     * // Update one School
     * const school = await prisma.school.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SchoolUpdateArgs>(args: SelectSubset<T, SchoolUpdateArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Schools.
     * @param {SchoolDeleteManyArgs} args - Arguments to filter Schools to delete.
     * @example
     * // Delete a few Schools
     * const { count } = await prisma.school.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SchoolDeleteManyArgs>(args?: SelectSubset<T, SchoolDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Schools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Schools
     * const school = await prisma.school.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SchoolUpdateManyArgs>(args: SelectSubset<T, SchoolUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Schools and returns the data updated in the database.
     * @param {SchoolUpdateManyAndReturnArgs} args - Arguments to update many Schools.
     * @example
     * // Update many Schools
     * const school = await prisma.school.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Schools and only return the `id`
     * const schoolWithIdOnly = await prisma.school.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SchoolUpdateManyAndReturnArgs>(args: SelectSubset<T, SchoolUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one School.
     * @param {SchoolUpsertArgs} args - Arguments to update or create a School.
     * @example
     * // Update or create a School
     * const school = await prisma.school.upsert({
     *   create: {
     *     // ... data to create a School
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the School we want to update
     *   }
     * })
     */
    upsert<T extends SchoolUpsertArgs>(args: SelectSubset<T, SchoolUpsertArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Schools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolCountArgs} args - Arguments to filter Schools to count.
     * @example
     * // Count the number of Schools
     * const count = await prisma.school.count({
     *   where: {
     *     // ... the filter for the Schools we want to count
     *   }
     * })
    **/
    count<T extends SchoolCountArgs>(
      args?: Subset<T, SchoolCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SchoolCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a School.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SchoolAggregateArgs>(args: Subset<T, SchoolAggregateArgs>): Prisma.PrismaPromise<GetSchoolAggregateType<T>>

    /**
     * Group by School.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SchoolGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SchoolGroupByArgs['orderBy'] }
        : { orderBy?: SchoolGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SchoolGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSchoolGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the School model
   */
  readonly fields: SchoolFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for School.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SchoolClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    students<T extends School$studentsArgs<ExtArgs> = {}>(args?: Subset<T, School$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    teachers<T extends School$teachersArgs<ExtArgs> = {}>(args?: Subset<T, School$teachersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    subjects<T extends School$subjectsArgs<ExtArgs> = {}>(args?: Subset<T, School$subjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    paymentsetups<T extends School$paymentsetupsArgs<ExtArgs> = {}>(args?: Subset<T, School$paymentsetupsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentSetupPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    payments<T extends School$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, School$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the School model
   */
  interface SchoolFieldRefs {
    readonly id: FieldRef<"School", 'String'>
    readonly name: FieldRef<"School", 'String'>
    readonly email: FieldRef<"School", 'String'>
    readonly phone: FieldRef<"School", 'String'>
    readonly address: FieldRef<"School", 'String'>
    readonly logo: FieldRef<"School", 'String'>
    readonly createdAt: FieldRef<"School", 'DateTime'>
    readonly updateAt: FieldRef<"School", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * School findUnique
   */
  export type SchoolFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the School
     */
    omit?: SchoolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which School to fetch.
     */
    where: SchoolWhereUniqueInput
  }

  /**
   * School findUniqueOrThrow
   */
  export type SchoolFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the School
     */
    omit?: SchoolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which School to fetch.
     */
    where: SchoolWhereUniqueInput
  }

  /**
   * School findFirst
   */
  export type SchoolFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the School
     */
    omit?: SchoolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which School to fetch.
     */
    where?: SchoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     */
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schools.
     */
    cursor?: SchoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schools.
     */
    distinct?: SchoolScalarFieldEnum | SchoolScalarFieldEnum[]
  }

  /**
   * School findFirstOrThrow
   */
  export type SchoolFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the School
     */
    omit?: SchoolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which School to fetch.
     */
    where?: SchoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     */
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schools.
     */
    cursor?: SchoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schools.
     */
    distinct?: SchoolScalarFieldEnum | SchoolScalarFieldEnum[]
  }

  /**
   * School findMany
   */
  export type SchoolFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the School
     */
    omit?: SchoolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which Schools to fetch.
     */
    where?: SchoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     */
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Schools.
     */
    cursor?: SchoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     */
    skip?: number
    distinct?: SchoolScalarFieldEnum | SchoolScalarFieldEnum[]
  }

  /**
   * School create
   */
  export type SchoolCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the School
     */
    omit?: SchoolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * The data needed to create a School.
     */
    data: XOR<SchoolCreateInput, SchoolUncheckedCreateInput>
  }

  /**
   * School createMany
   */
  export type SchoolCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Schools.
     */
    data: SchoolCreateManyInput | SchoolCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * School createManyAndReturn
   */
  export type SchoolCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the School
     */
    omit?: SchoolOmit<ExtArgs> | null
    /**
     * The data used to create many Schools.
     */
    data: SchoolCreateManyInput | SchoolCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * School update
   */
  export type SchoolUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the School
     */
    omit?: SchoolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * The data needed to update a School.
     */
    data: XOR<SchoolUpdateInput, SchoolUncheckedUpdateInput>
    /**
     * Choose, which School to update.
     */
    where: SchoolWhereUniqueInput
  }

  /**
   * School updateMany
   */
  export type SchoolUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Schools.
     */
    data: XOR<SchoolUpdateManyMutationInput, SchoolUncheckedUpdateManyInput>
    /**
     * Filter which Schools to update
     */
    where?: SchoolWhereInput
    /**
     * Limit how many Schools to update.
     */
    limit?: number
  }

  /**
   * School updateManyAndReturn
   */
  export type SchoolUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the School
     */
    omit?: SchoolOmit<ExtArgs> | null
    /**
     * The data used to update Schools.
     */
    data: XOR<SchoolUpdateManyMutationInput, SchoolUncheckedUpdateManyInput>
    /**
     * Filter which Schools to update
     */
    where?: SchoolWhereInput
    /**
     * Limit how many Schools to update.
     */
    limit?: number
  }

  /**
   * School upsert
   */
  export type SchoolUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the School
     */
    omit?: SchoolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * The filter to search for the School to update in case it exists.
     */
    where: SchoolWhereUniqueInput
    /**
     * In case the School found by the `where` argument doesn't exist, create a new School with this data.
     */
    create: XOR<SchoolCreateInput, SchoolUncheckedCreateInput>
    /**
     * In case the School was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SchoolUpdateInput, SchoolUncheckedUpdateInput>
  }

  /**
   * School delete
   */
  export type SchoolDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the School
     */
    omit?: SchoolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter which School to delete.
     */
    where: SchoolWhereUniqueInput
  }

  /**
   * School deleteMany
   */
  export type SchoolDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Schools to delete
     */
    where?: SchoolWhereInput
    /**
     * Limit how many Schools to delete.
     */
    limit?: number
  }

  /**
   * School.students
   */
  export type School$studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    cursor?: StudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * School.teachers
   */
  export type School$teachersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    where?: TeacherWhereInput
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    cursor?: TeacherWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * School.subjects
   */
  export type School$subjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    where?: SubjectWhereInput
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    cursor?: SubjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * School.paymentsetups
   */
  export type School$paymentsetupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentSetup
     */
    select?: PaymentSetupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentSetup
     */
    omit?: PaymentSetupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentSetupInclude<ExtArgs> | null
    where?: PaymentSetupWhereInput
    orderBy?: PaymentSetupOrderByWithRelationInput | PaymentSetupOrderByWithRelationInput[]
    cursor?: PaymentSetupWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentSetupScalarFieldEnum | PaymentSetupScalarFieldEnum[]
  }

  /**
   * School.payments
   */
  export type School$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * School without action
   */
  export type SchoolDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the School
     */
    omit?: SchoolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
  }


  /**
   * Model Student
   */

  export type AggregateStudent = {
    _count: StudentCountAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  export type StudentMinAggregateOutputType = {
    id: string | null
    username: string | null
    admissionnumber: string | null
    firstname: string | null
    surname: string | null
    othername: string | null
    birthday: Date | null
    gender: $Enums.UserSex | null
    religion: string | null
    studenttype: string | null
    house: string | null
    bloodgroup: string | null
    admissiondate: Date | null
    email: string | null
    phone: string | null
    address: string | null
    state: string | null
    lga: string | null
    avarta: string | null
    parentid: string | null
    schoolid: string | null
    classid: string | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type StudentMaxAggregateOutputType = {
    id: string | null
    username: string | null
    admissionnumber: string | null
    firstname: string | null
    surname: string | null
    othername: string | null
    birthday: Date | null
    gender: $Enums.UserSex | null
    religion: string | null
    studenttype: string | null
    house: string | null
    bloodgroup: string | null
    admissiondate: Date | null
    email: string | null
    phone: string | null
    address: string | null
    state: string | null
    lga: string | null
    avarta: string | null
    parentid: string | null
    schoolid: string | null
    classid: string | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type StudentCountAggregateOutputType = {
    id: number
    username: number
    admissionnumber: number
    firstname: number
    surname: number
    othername: number
    birthday: number
    gender: number
    religion: number
    studenttype: number
    house: number
    bloodgroup: number
    admissiondate: number
    email: number
    phone: number
    address: number
    state: number
    lga: number
    avarta: number
    parentid: number
    schoolid: number
    classid: number
    createdAt: number
    updateAt: number
    _all: number
  }


  export type StudentMinAggregateInputType = {
    id?: true
    username?: true
    admissionnumber?: true
    firstname?: true
    surname?: true
    othername?: true
    birthday?: true
    gender?: true
    religion?: true
    studenttype?: true
    house?: true
    bloodgroup?: true
    admissiondate?: true
    email?: true
    phone?: true
    address?: true
    state?: true
    lga?: true
    avarta?: true
    parentid?: true
    schoolid?: true
    classid?: true
    createdAt?: true
    updateAt?: true
  }

  export type StudentMaxAggregateInputType = {
    id?: true
    username?: true
    admissionnumber?: true
    firstname?: true
    surname?: true
    othername?: true
    birthday?: true
    gender?: true
    religion?: true
    studenttype?: true
    house?: true
    bloodgroup?: true
    admissiondate?: true
    email?: true
    phone?: true
    address?: true
    state?: true
    lga?: true
    avarta?: true
    parentid?: true
    schoolid?: true
    classid?: true
    createdAt?: true
    updateAt?: true
  }

  export type StudentCountAggregateInputType = {
    id?: true
    username?: true
    admissionnumber?: true
    firstname?: true
    surname?: true
    othername?: true
    birthday?: true
    gender?: true
    religion?: true
    studenttype?: true
    house?: true
    bloodgroup?: true
    admissiondate?: true
    email?: true
    phone?: true
    address?: true
    state?: true
    lga?: true
    avarta?: true
    parentid?: true
    schoolid?: true
    classid?: true
    createdAt?: true
    updateAt?: true
    _all?: true
  }

  export type StudentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Student to aggregate.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Students
    **/
    _count?: true | StudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentMaxAggregateInputType
  }

  export type GetStudentAggregateType<T extends StudentAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent[P]>
      : GetScalarType<T[P], AggregateStudent[P]>
  }




  export type StudentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithAggregationInput | StudentOrderByWithAggregationInput[]
    by: StudentScalarFieldEnum[] | StudentScalarFieldEnum
    having?: StudentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentCountAggregateInputType | true
    _min?: StudentMinAggregateInputType
    _max?: StudentMaxAggregateInputType
  }

  export type StudentGroupByOutputType = {
    id: string
    username: string
    admissionnumber: string
    firstname: string
    surname: string
    othername: string | null
    birthday: Date
    gender: $Enums.UserSex
    religion: string | null
    studenttype: string
    house: string
    bloodgroup: string
    admissiondate: Date
    email: string
    phone: string | null
    address: string
    state: string
    lga: string
    avarta: string | null
    parentid: string
    schoolid: string
    classid: string
    createdAt: Date
    updateAt: Date
    _count: StudentCountAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  type GetStudentGroupByPayload<T extends StudentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentGroupByOutputType[P]>
            : GetScalarType<T[P], StudentGroupByOutputType[P]>
        }
      >
    >


  export type StudentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    admissionnumber?: boolean
    firstname?: boolean
    surname?: boolean
    othername?: boolean
    birthday?: boolean
    gender?: boolean
    religion?: boolean
    studenttype?: boolean
    house?: boolean
    bloodgroup?: boolean
    admissiondate?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    state?: boolean
    lga?: boolean
    avarta?: boolean
    parentid?: boolean
    schoolid?: boolean
    classid?: boolean
    createdAt?: boolean
    updateAt?: boolean
    parent?: boolean | ParentDefaultArgs<ExtArgs>
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
    attendances?: boolean | Student$attendancesArgs<ExtArgs>
    assignments?: boolean | Student$assignmentsArgs<ExtArgs>
    submissions?: boolean | Student$submissionsArgs<ExtArgs>
    answers?: boolean | Student$answersArgs<ExtArgs>
    grades?: boolean | Student$gradesArgs<ExtArgs>
    effective?: boolean | Student$effectiveArgs<ExtArgs>
    psychomotive?: boolean | Student$psychomotiveArgs<ExtArgs>
    payments?: boolean | Student$paymentsArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type StudentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    admissionnumber?: boolean
    firstname?: boolean
    surname?: boolean
    othername?: boolean
    birthday?: boolean
    gender?: boolean
    religion?: boolean
    studenttype?: boolean
    house?: boolean
    bloodgroup?: boolean
    admissiondate?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    state?: boolean
    lga?: boolean
    avarta?: boolean
    parentid?: boolean
    schoolid?: boolean
    classid?: boolean
    createdAt?: boolean
    updateAt?: boolean
    parent?: boolean | ParentDefaultArgs<ExtArgs>
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type StudentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    admissionnumber?: boolean
    firstname?: boolean
    surname?: boolean
    othername?: boolean
    birthday?: boolean
    gender?: boolean
    religion?: boolean
    studenttype?: boolean
    house?: boolean
    bloodgroup?: boolean
    admissiondate?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    state?: boolean
    lga?: boolean
    avarta?: boolean
    parentid?: boolean
    schoolid?: boolean
    classid?: boolean
    createdAt?: boolean
    updateAt?: boolean
    parent?: boolean | ParentDefaultArgs<ExtArgs>
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type StudentSelectScalar = {
    id?: boolean
    username?: boolean
    admissionnumber?: boolean
    firstname?: boolean
    surname?: boolean
    othername?: boolean
    birthday?: boolean
    gender?: boolean
    religion?: boolean
    studenttype?: boolean
    house?: boolean
    bloodgroup?: boolean
    admissiondate?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    state?: boolean
    lga?: boolean
    avarta?: boolean
    parentid?: boolean
    schoolid?: boolean
    classid?: boolean
    createdAt?: boolean
    updateAt?: boolean
  }

  export type StudentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "admissionnumber" | "firstname" | "surname" | "othername" | "birthday" | "gender" | "religion" | "studenttype" | "house" | "bloodgroup" | "admissiondate" | "email" | "phone" | "address" | "state" | "lga" | "avarta" | "parentid" | "schoolid" | "classid" | "createdAt" | "updateAt", ExtArgs["result"]["student"]>
  export type StudentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | ParentDefaultArgs<ExtArgs>
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
    attendances?: boolean | Student$attendancesArgs<ExtArgs>
    assignments?: boolean | Student$assignmentsArgs<ExtArgs>
    submissions?: boolean | Student$submissionsArgs<ExtArgs>
    answers?: boolean | Student$answersArgs<ExtArgs>
    grades?: boolean | Student$gradesArgs<ExtArgs>
    effective?: boolean | Student$effectiveArgs<ExtArgs>
    psychomotive?: boolean | Student$psychomotiveArgs<ExtArgs>
    payments?: boolean | Student$paymentsArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StudentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | ParentDefaultArgs<ExtArgs>
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }
  export type StudentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | ParentDefaultArgs<ExtArgs>
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }

  export type $StudentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Student"
    objects: {
      parent: Prisma.$ParentPayload<ExtArgs>
      school: Prisma.$SchoolPayload<ExtArgs>
      class: Prisma.$ClassPayload<ExtArgs>
      attendances: Prisma.$AttendancePayload<ExtArgs>[]
      assignments: Prisma.$AssignmentPayload<ExtArgs>[]
      submissions: Prisma.$SubmissionPayload<ExtArgs>[]
      answers: Prisma.$AnswerPayload<ExtArgs>[]
      grades: Prisma.$StudentGradePayload<ExtArgs>[]
      effective: Prisma.$EffectiveDomainPayload<ExtArgs>[]
      psychomotive: Prisma.$PsychomotiveDomainPayload<ExtArgs>[]
      payments: Prisma.$PaymentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      admissionnumber: string
      firstname: string
      surname: string
      othername: string | null
      birthday: Date
      gender: $Enums.UserSex
      religion: string | null
      studenttype: string
      house: string
      bloodgroup: string
      admissiondate: Date
      email: string
      phone: string | null
      address: string
      state: string
      lga: string
      avarta: string | null
      parentid: string
      schoolid: string
      classid: string
      createdAt: Date
      updateAt: Date
    }, ExtArgs["result"]["student"]>
    composites: {}
  }

  type StudentGetPayload<S extends boolean | null | undefined | StudentDefaultArgs> = $Result.GetResult<Prisma.$StudentPayload, S>

  type StudentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentCountAggregateInputType | true
    }

  export interface StudentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Student'], meta: { name: 'Student' } }
    /**
     * Find zero or one Student that matches the filter.
     * @param {StudentFindUniqueArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentFindUniqueArgs>(args: SelectSubset<T, StudentFindUniqueArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Student that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudentFindUniqueOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Student that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentFindFirstArgs>(args?: SelectSubset<T, StudentFindFirstArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Student that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.student.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.student.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentWithIdOnly = await prisma.student.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudentFindManyArgs>(args?: SelectSubset<T, StudentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Student.
     * @param {StudentCreateArgs} args - Arguments to create a Student.
     * @example
     * // Create one Student
     * const Student = await prisma.student.create({
     *   data: {
     *     // ... data to create a Student
     *   }
     * })
     * 
     */
    create<T extends StudentCreateArgs>(args: SelectSubset<T, StudentCreateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Students.
     * @param {StudentCreateManyArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const student = await prisma.student.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentCreateManyArgs>(args?: SelectSubset<T, StudentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Students and returns the data saved in the database.
     * @param {StudentCreateManyAndReturnArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const student = await prisma.student.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Students and only return the `id`
     * const studentWithIdOnly = await prisma.student.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudentCreateManyAndReturnArgs>(args?: SelectSubset<T, StudentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Student.
     * @param {StudentDeleteArgs} args - Arguments to delete one Student.
     * @example
     * // Delete one Student
     * const Student = await prisma.student.delete({
     *   where: {
     *     // ... filter to delete one Student
     *   }
     * })
     * 
     */
    delete<T extends StudentDeleteArgs>(args: SelectSubset<T, StudentDeleteArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Student.
     * @param {StudentUpdateArgs} args - Arguments to update one Student.
     * @example
     * // Update one Student
     * const student = await prisma.student.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentUpdateArgs>(args: SelectSubset<T, StudentUpdateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Students.
     * @param {StudentDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.student.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentDeleteManyArgs>(args?: SelectSubset<T, StudentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentUpdateManyArgs>(args: SelectSubset<T, StudentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students and returns the data updated in the database.
     * @param {StudentUpdateManyAndReturnArgs} args - Arguments to update many Students.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Students and only return the `id`
     * const studentWithIdOnly = await prisma.student.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudentUpdateManyAndReturnArgs>(args: SelectSubset<T, StudentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Student.
     * @param {StudentUpsertArgs} args - Arguments to update or create a Student.
     * @example
     * // Update or create a Student
     * const student = await prisma.student.upsert({
     *   create: {
     *     // ... data to create a Student
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student we want to update
     *   }
     * })
     */
    upsert<T extends StudentUpsertArgs>(args: SelectSubset<T, StudentUpsertArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.student.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends StudentCountArgs>(
      args?: Subset<T, StudentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAggregateArgs>(args: Subset<T, StudentAggregateArgs>): Prisma.PrismaPromise<GetStudentAggregateType<T>>

    /**
     * Group by Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentGroupByArgs['orderBy'] }
        : { orderBy?: StudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Student model
   */
  readonly fields: StudentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Student.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    parent<T extends ParentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ParentDefaultArgs<ExtArgs>>): Prisma__ParentClient<$Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    school<T extends SchoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDefaultArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    attendances<T extends Student$attendancesArgs<ExtArgs> = {}>(args?: Subset<T, Student$attendancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assignments<T extends Student$assignmentsArgs<ExtArgs> = {}>(args?: Subset<T, Student$assignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    submissions<T extends Student$submissionsArgs<ExtArgs> = {}>(args?: Subset<T, Student$submissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    answers<T extends Student$answersArgs<ExtArgs> = {}>(args?: Subset<T, Student$answersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnswerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    grades<T extends Student$gradesArgs<ExtArgs> = {}>(args?: Subset<T, Student$gradesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentGradePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    effective<T extends Student$effectiveArgs<ExtArgs> = {}>(args?: Subset<T, Student$effectiveArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EffectiveDomainPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    psychomotive<T extends Student$psychomotiveArgs<ExtArgs> = {}>(args?: Subset<T, Student$psychomotiveArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PsychomotiveDomainPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    payments<T extends Student$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, Student$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Student model
   */
  interface StudentFieldRefs {
    readonly id: FieldRef<"Student", 'String'>
    readonly username: FieldRef<"Student", 'String'>
    readonly admissionnumber: FieldRef<"Student", 'String'>
    readonly firstname: FieldRef<"Student", 'String'>
    readonly surname: FieldRef<"Student", 'String'>
    readonly othername: FieldRef<"Student", 'String'>
    readonly birthday: FieldRef<"Student", 'DateTime'>
    readonly gender: FieldRef<"Student", 'UserSex'>
    readonly religion: FieldRef<"Student", 'String'>
    readonly studenttype: FieldRef<"Student", 'String'>
    readonly house: FieldRef<"Student", 'String'>
    readonly bloodgroup: FieldRef<"Student", 'String'>
    readonly admissiondate: FieldRef<"Student", 'DateTime'>
    readonly email: FieldRef<"Student", 'String'>
    readonly phone: FieldRef<"Student", 'String'>
    readonly address: FieldRef<"Student", 'String'>
    readonly state: FieldRef<"Student", 'String'>
    readonly lga: FieldRef<"Student", 'String'>
    readonly avarta: FieldRef<"Student", 'String'>
    readonly parentid: FieldRef<"Student", 'String'>
    readonly schoolid: FieldRef<"Student", 'String'>
    readonly classid: FieldRef<"Student", 'String'>
    readonly createdAt: FieldRef<"Student", 'DateTime'>
    readonly updateAt: FieldRef<"Student", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Student findUnique
   */
  export type StudentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findUniqueOrThrow
   */
  export type StudentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findFirst
   */
  export type StudentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findFirstOrThrow
   */
  export type StudentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findMany
   */
  export type StudentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Students to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student create
   */
  export type StudentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to create a Student.
     */
    data: XOR<StudentCreateInput, StudentUncheckedCreateInput>
  }

  /**
   * Student createMany
   */
  export type StudentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Student createManyAndReturn
   */
  export type StudentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Student update
   */
  export type StudentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to update a Student.
     */
    data: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
    /**
     * Choose, which Student to update.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student updateMany
   */
  export type StudentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Students.
     */
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to update.
     */
    limit?: number
  }

  /**
   * Student updateManyAndReturn
   */
  export type StudentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * The data used to update Students.
     */
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Student upsert
   */
  export type StudentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The filter to search for the Student to update in case it exists.
     */
    where: StudentWhereUniqueInput
    /**
     * In case the Student found by the `where` argument doesn't exist, create a new Student with this data.
     */
    create: XOR<StudentCreateInput, StudentUncheckedCreateInput>
    /**
     * In case the Student was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
  }

  /**
   * Student delete
   */
  export type StudentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter which Student to delete.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student deleteMany
   */
  export type StudentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Students to delete
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to delete.
     */
    limit?: number
  }

  /**
   * Student.attendances
   */
  export type Student$attendancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    where?: AttendanceWhereInput
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    cursor?: AttendanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * Student.assignments
   */
  export type Student$assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    where?: AssignmentWhereInput
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    cursor?: AssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }

  /**
   * Student.submissions
   */
  export type Student$submissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    where?: SubmissionWhereInput
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    cursor?: SubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Student.answers
   */
  export type Student$answersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Answer
     */
    omit?: AnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerInclude<ExtArgs> | null
    where?: AnswerWhereInput
    orderBy?: AnswerOrderByWithRelationInput | AnswerOrderByWithRelationInput[]
    cursor?: AnswerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnswerScalarFieldEnum | AnswerScalarFieldEnum[]
  }

  /**
   * Student.grades
   */
  export type Student$gradesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentGrade
     */
    select?: StudentGradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentGrade
     */
    omit?: StudentGradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentGradeInclude<ExtArgs> | null
    where?: StudentGradeWhereInput
    orderBy?: StudentGradeOrderByWithRelationInput | StudentGradeOrderByWithRelationInput[]
    cursor?: StudentGradeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentGradeScalarFieldEnum | StudentGradeScalarFieldEnum[]
  }

  /**
   * Student.effective
   */
  export type Student$effectiveArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EffectiveDomain
     */
    select?: EffectiveDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EffectiveDomain
     */
    omit?: EffectiveDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EffectiveDomainInclude<ExtArgs> | null
    where?: EffectiveDomainWhereInput
    orderBy?: EffectiveDomainOrderByWithRelationInput | EffectiveDomainOrderByWithRelationInput[]
    cursor?: EffectiveDomainWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EffectiveDomainScalarFieldEnum | EffectiveDomainScalarFieldEnum[]
  }

  /**
   * Student.psychomotive
   */
  export type Student$psychomotiveArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsychomotiveDomain
     */
    select?: PsychomotiveDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PsychomotiveDomain
     */
    omit?: PsychomotiveDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsychomotiveDomainInclude<ExtArgs> | null
    where?: PsychomotiveDomainWhereInput
    orderBy?: PsychomotiveDomainOrderByWithRelationInput | PsychomotiveDomainOrderByWithRelationInput[]
    cursor?: PsychomotiveDomainWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PsychomotiveDomainScalarFieldEnum | PsychomotiveDomainScalarFieldEnum[]
  }

  /**
   * Student.payments
   */
  export type Student$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Student without action
   */
  export type StudentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
  }


  /**
   * Model Teacher
   */

  export type AggregateTeacher = {
    _count: TeacherCountAggregateOutputType | null
    _min: TeacherMinAggregateOutputType | null
    _max: TeacherMaxAggregateOutputType | null
  }

  export type TeacherMinAggregateOutputType = {
    id: string | null
    username: string | null
    title: string | null
    firstname: string | null
    surname: string | null
    othername: string | null
    birthday: Date | null
    bloodgroup: string | null
    gender: $Enums.UserSex | null
    state: string | null
    lga: string | null
    email: string | null
    phone: string | null
    address: string | null
    avarta: string | null
    schoolid: string | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type TeacherMaxAggregateOutputType = {
    id: string | null
    username: string | null
    title: string | null
    firstname: string | null
    surname: string | null
    othername: string | null
    birthday: Date | null
    bloodgroup: string | null
    gender: $Enums.UserSex | null
    state: string | null
    lga: string | null
    email: string | null
    phone: string | null
    address: string | null
    avarta: string | null
    schoolid: string | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type TeacherCountAggregateOutputType = {
    id: number
    username: number
    title: number
    firstname: number
    surname: number
    othername: number
    birthday: number
    bloodgroup: number
    gender: number
    state: number
    lga: number
    email: number
    phone: number
    address: number
    avarta: number
    schoolid: number
    createdAt: number
    updateAt: number
    _all: number
  }


  export type TeacherMinAggregateInputType = {
    id?: true
    username?: true
    title?: true
    firstname?: true
    surname?: true
    othername?: true
    birthday?: true
    bloodgroup?: true
    gender?: true
    state?: true
    lga?: true
    email?: true
    phone?: true
    address?: true
    avarta?: true
    schoolid?: true
    createdAt?: true
    updateAt?: true
  }

  export type TeacherMaxAggregateInputType = {
    id?: true
    username?: true
    title?: true
    firstname?: true
    surname?: true
    othername?: true
    birthday?: true
    bloodgroup?: true
    gender?: true
    state?: true
    lga?: true
    email?: true
    phone?: true
    address?: true
    avarta?: true
    schoolid?: true
    createdAt?: true
    updateAt?: true
  }

  export type TeacherCountAggregateInputType = {
    id?: true
    username?: true
    title?: true
    firstname?: true
    surname?: true
    othername?: true
    birthday?: true
    bloodgroup?: true
    gender?: true
    state?: true
    lga?: true
    email?: true
    phone?: true
    address?: true
    avarta?: true
    schoolid?: true
    createdAt?: true
    updateAt?: true
    _all?: true
  }

  export type TeacherAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teacher to aggregate.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teachers
    **/
    _count?: true | TeacherCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeacherMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeacherMaxAggregateInputType
  }

  export type GetTeacherAggregateType<T extends TeacherAggregateArgs> = {
        [P in keyof T & keyof AggregateTeacher]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeacher[P]>
      : GetScalarType<T[P], AggregateTeacher[P]>
  }




  export type TeacherGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherWhereInput
    orderBy?: TeacherOrderByWithAggregationInput | TeacherOrderByWithAggregationInput[]
    by: TeacherScalarFieldEnum[] | TeacherScalarFieldEnum
    having?: TeacherScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeacherCountAggregateInputType | true
    _min?: TeacherMinAggregateInputType
    _max?: TeacherMaxAggregateInputType
  }

  export type TeacherGroupByOutputType = {
    id: string
    username: string
    title: string
    firstname: string
    surname: string
    othername: string | null
    birthday: Date | null
    bloodgroup: string | null
    gender: $Enums.UserSex
    state: string
    lga: string
    email: string
    phone: string | null
    address: string
    avarta: string | null
    schoolid: string
    createdAt: Date
    updateAt: Date
    _count: TeacherCountAggregateOutputType | null
    _min: TeacherMinAggregateOutputType | null
    _max: TeacherMaxAggregateOutputType | null
  }

  type GetTeacherGroupByPayload<T extends TeacherGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeacherGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeacherGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeacherGroupByOutputType[P]>
            : GetScalarType<T[P], TeacherGroupByOutputType[P]>
        }
      >
    >


  export type TeacherSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    title?: boolean
    firstname?: boolean
    surname?: boolean
    othername?: boolean
    birthday?: boolean
    bloodgroup?: boolean
    gender?: boolean
    state?: boolean
    lga?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    avarta?: boolean
    schoolid?: boolean
    createdAt?: boolean
    updateAt?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    subjects?: boolean | Teacher$subjectsArgs<ExtArgs>
    classes?: boolean | Teacher$classesArgs<ExtArgs>
    assignments?: boolean | Teacher$assignmentsArgs<ExtArgs>
    tests?: boolean | Teacher$testsArgs<ExtArgs>
    _count?: boolean | TeacherCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacher"]>

  export type TeacherSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    title?: boolean
    firstname?: boolean
    surname?: boolean
    othername?: boolean
    birthday?: boolean
    bloodgroup?: boolean
    gender?: boolean
    state?: boolean
    lga?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    avarta?: boolean
    schoolid?: boolean
    createdAt?: boolean
    updateAt?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacher"]>

  export type TeacherSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    title?: boolean
    firstname?: boolean
    surname?: boolean
    othername?: boolean
    birthday?: boolean
    bloodgroup?: boolean
    gender?: boolean
    state?: boolean
    lga?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    avarta?: boolean
    schoolid?: boolean
    createdAt?: boolean
    updateAt?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacher"]>

  export type TeacherSelectScalar = {
    id?: boolean
    username?: boolean
    title?: boolean
    firstname?: boolean
    surname?: boolean
    othername?: boolean
    birthday?: boolean
    bloodgroup?: boolean
    gender?: boolean
    state?: boolean
    lga?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    avarta?: boolean
    schoolid?: boolean
    createdAt?: boolean
    updateAt?: boolean
  }

  export type TeacherOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "title" | "firstname" | "surname" | "othername" | "birthday" | "bloodgroup" | "gender" | "state" | "lga" | "email" | "phone" | "address" | "avarta" | "schoolid" | "createdAt" | "updateAt", ExtArgs["result"]["teacher"]>
  export type TeacherInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    subjects?: boolean | Teacher$subjectsArgs<ExtArgs>
    classes?: boolean | Teacher$classesArgs<ExtArgs>
    assignments?: boolean | Teacher$assignmentsArgs<ExtArgs>
    tests?: boolean | Teacher$testsArgs<ExtArgs>
    _count?: boolean | TeacherCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TeacherIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }
  export type TeacherIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }

  export type $TeacherPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Teacher"
    objects: {
      school: Prisma.$SchoolPayload<ExtArgs>
      subjects: Prisma.$SubjectPayload<ExtArgs>[]
      classes: Prisma.$ClassPayload<ExtArgs>[]
      assignments: Prisma.$AssignmentPayload<ExtArgs>[]
      tests: Prisma.$TestPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      title: string
      firstname: string
      surname: string
      othername: string | null
      birthday: Date | null
      bloodgroup: string | null
      gender: $Enums.UserSex
      state: string
      lga: string
      email: string
      phone: string | null
      address: string
      avarta: string | null
      schoolid: string
      createdAt: Date
      updateAt: Date
    }, ExtArgs["result"]["teacher"]>
    composites: {}
  }

  type TeacherGetPayload<S extends boolean | null | undefined | TeacherDefaultArgs> = $Result.GetResult<Prisma.$TeacherPayload, S>

  type TeacherCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeacherFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeacherCountAggregateInputType | true
    }

  export interface TeacherDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Teacher'], meta: { name: 'Teacher' } }
    /**
     * Find zero or one Teacher that matches the filter.
     * @param {TeacherFindUniqueArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeacherFindUniqueArgs>(args: SelectSubset<T, TeacherFindUniqueArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Teacher that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeacherFindUniqueOrThrowArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeacherFindUniqueOrThrowArgs>(args: SelectSubset<T, TeacherFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Teacher that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindFirstArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeacherFindFirstArgs>(args?: SelectSubset<T, TeacherFindFirstArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Teacher that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindFirstOrThrowArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeacherFindFirstOrThrowArgs>(args?: SelectSubset<T, TeacherFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Teachers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teachers
     * const teachers = await prisma.teacher.findMany()
     * 
     * // Get first 10 Teachers
     * const teachers = await prisma.teacher.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teacherWithIdOnly = await prisma.teacher.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeacherFindManyArgs>(args?: SelectSubset<T, TeacherFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Teacher.
     * @param {TeacherCreateArgs} args - Arguments to create a Teacher.
     * @example
     * // Create one Teacher
     * const Teacher = await prisma.teacher.create({
     *   data: {
     *     // ... data to create a Teacher
     *   }
     * })
     * 
     */
    create<T extends TeacherCreateArgs>(args: SelectSubset<T, TeacherCreateArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Teachers.
     * @param {TeacherCreateManyArgs} args - Arguments to create many Teachers.
     * @example
     * // Create many Teachers
     * const teacher = await prisma.teacher.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeacherCreateManyArgs>(args?: SelectSubset<T, TeacherCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Teachers and returns the data saved in the database.
     * @param {TeacherCreateManyAndReturnArgs} args - Arguments to create many Teachers.
     * @example
     * // Create many Teachers
     * const teacher = await prisma.teacher.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Teachers and only return the `id`
     * const teacherWithIdOnly = await prisma.teacher.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeacherCreateManyAndReturnArgs>(args?: SelectSubset<T, TeacherCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Teacher.
     * @param {TeacherDeleteArgs} args - Arguments to delete one Teacher.
     * @example
     * // Delete one Teacher
     * const Teacher = await prisma.teacher.delete({
     *   where: {
     *     // ... filter to delete one Teacher
     *   }
     * })
     * 
     */
    delete<T extends TeacherDeleteArgs>(args: SelectSubset<T, TeacherDeleteArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Teacher.
     * @param {TeacherUpdateArgs} args - Arguments to update one Teacher.
     * @example
     * // Update one Teacher
     * const teacher = await prisma.teacher.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeacherUpdateArgs>(args: SelectSubset<T, TeacherUpdateArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Teachers.
     * @param {TeacherDeleteManyArgs} args - Arguments to filter Teachers to delete.
     * @example
     * // Delete a few Teachers
     * const { count } = await prisma.teacher.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeacherDeleteManyArgs>(args?: SelectSubset<T, TeacherDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teachers
     * const teacher = await prisma.teacher.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeacherUpdateManyArgs>(args: SelectSubset<T, TeacherUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teachers and returns the data updated in the database.
     * @param {TeacherUpdateManyAndReturnArgs} args - Arguments to update many Teachers.
     * @example
     * // Update many Teachers
     * const teacher = await prisma.teacher.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Teachers and only return the `id`
     * const teacherWithIdOnly = await prisma.teacher.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TeacherUpdateManyAndReturnArgs>(args: SelectSubset<T, TeacherUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Teacher.
     * @param {TeacherUpsertArgs} args - Arguments to update or create a Teacher.
     * @example
     * // Update or create a Teacher
     * const teacher = await prisma.teacher.upsert({
     *   create: {
     *     // ... data to create a Teacher
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Teacher we want to update
     *   }
     * })
     */
    upsert<T extends TeacherUpsertArgs>(args: SelectSubset<T, TeacherUpsertArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherCountArgs} args - Arguments to filter Teachers to count.
     * @example
     * // Count the number of Teachers
     * const count = await prisma.teacher.count({
     *   where: {
     *     // ... the filter for the Teachers we want to count
     *   }
     * })
    **/
    count<T extends TeacherCountArgs>(
      args?: Subset<T, TeacherCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeacherCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Teacher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeacherAggregateArgs>(args: Subset<T, TeacherAggregateArgs>): Prisma.PrismaPromise<GetTeacherAggregateType<T>>

    /**
     * Group by Teacher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeacherGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeacherGroupByArgs['orderBy'] }
        : { orderBy?: TeacherGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeacherGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeacherGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Teacher model
   */
  readonly fields: TeacherFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Teacher.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeacherClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    school<T extends SchoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDefaultArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    subjects<T extends Teacher$subjectsArgs<ExtArgs> = {}>(args?: Subset<T, Teacher$subjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    classes<T extends Teacher$classesArgs<ExtArgs> = {}>(args?: Subset<T, Teacher$classesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assignments<T extends Teacher$assignmentsArgs<ExtArgs> = {}>(args?: Subset<T, Teacher$assignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tests<T extends Teacher$testsArgs<ExtArgs> = {}>(args?: Subset<T, Teacher$testsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Teacher model
   */
  interface TeacherFieldRefs {
    readonly id: FieldRef<"Teacher", 'String'>
    readonly username: FieldRef<"Teacher", 'String'>
    readonly title: FieldRef<"Teacher", 'String'>
    readonly firstname: FieldRef<"Teacher", 'String'>
    readonly surname: FieldRef<"Teacher", 'String'>
    readonly othername: FieldRef<"Teacher", 'String'>
    readonly birthday: FieldRef<"Teacher", 'DateTime'>
    readonly bloodgroup: FieldRef<"Teacher", 'String'>
    readonly gender: FieldRef<"Teacher", 'UserSex'>
    readonly state: FieldRef<"Teacher", 'String'>
    readonly lga: FieldRef<"Teacher", 'String'>
    readonly email: FieldRef<"Teacher", 'String'>
    readonly phone: FieldRef<"Teacher", 'String'>
    readonly address: FieldRef<"Teacher", 'String'>
    readonly avarta: FieldRef<"Teacher", 'String'>
    readonly schoolid: FieldRef<"Teacher", 'String'>
    readonly createdAt: FieldRef<"Teacher", 'DateTime'>
    readonly updateAt: FieldRef<"Teacher", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Teacher findUnique
   */
  export type TeacherFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher findUniqueOrThrow
   */
  export type TeacherFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher findFirst
   */
  export type TeacherFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teachers.
     */
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Teacher findFirstOrThrow
   */
  export type TeacherFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teachers.
     */
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Teacher findMany
   */
  export type TeacherFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teachers to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Teacher create
   */
  export type TeacherCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The data needed to create a Teacher.
     */
    data: XOR<TeacherCreateInput, TeacherUncheckedCreateInput>
  }

  /**
   * Teacher createMany
   */
  export type TeacherCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teachers.
     */
    data: TeacherCreateManyInput | TeacherCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Teacher createManyAndReturn
   */
  export type TeacherCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * The data used to create many Teachers.
     */
    data: TeacherCreateManyInput | TeacherCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Teacher update
   */
  export type TeacherUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The data needed to update a Teacher.
     */
    data: XOR<TeacherUpdateInput, TeacherUncheckedUpdateInput>
    /**
     * Choose, which Teacher to update.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher updateMany
   */
  export type TeacherUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teachers.
     */
    data: XOR<TeacherUpdateManyMutationInput, TeacherUncheckedUpdateManyInput>
    /**
     * Filter which Teachers to update
     */
    where?: TeacherWhereInput
    /**
     * Limit how many Teachers to update.
     */
    limit?: number
  }

  /**
   * Teacher updateManyAndReturn
   */
  export type TeacherUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * The data used to update Teachers.
     */
    data: XOR<TeacherUpdateManyMutationInput, TeacherUncheckedUpdateManyInput>
    /**
     * Filter which Teachers to update
     */
    where?: TeacherWhereInput
    /**
     * Limit how many Teachers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Teacher upsert
   */
  export type TeacherUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The filter to search for the Teacher to update in case it exists.
     */
    where: TeacherWhereUniqueInput
    /**
     * In case the Teacher found by the `where` argument doesn't exist, create a new Teacher with this data.
     */
    create: XOR<TeacherCreateInput, TeacherUncheckedCreateInput>
    /**
     * In case the Teacher was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeacherUpdateInput, TeacherUncheckedUpdateInput>
  }

  /**
   * Teacher delete
   */
  export type TeacherDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter which Teacher to delete.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher deleteMany
   */
  export type TeacherDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teachers to delete
     */
    where?: TeacherWhereInput
    /**
     * Limit how many Teachers to delete.
     */
    limit?: number
  }

  /**
   * Teacher.subjects
   */
  export type Teacher$subjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    where?: SubjectWhereInput
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    cursor?: SubjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Teacher.classes
   */
  export type Teacher$classesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    where?: ClassWhereInput
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    cursor?: ClassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Teacher.assignments
   */
  export type Teacher$assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    where?: AssignmentWhereInput
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    cursor?: AssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }

  /**
   * Teacher.tests
   */
  export type Teacher$testsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestInclude<ExtArgs> | null
    where?: TestWhereInput
    orderBy?: TestOrderByWithRelationInput | TestOrderByWithRelationInput[]
    cursor?: TestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TestScalarFieldEnum | TestScalarFieldEnum[]
  }

  /**
   * Teacher without action
   */
  export type TeacherDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
  }


  /**
   * Model Parent
   */

  export type AggregateParent = {
    _count: ParentCountAggregateOutputType | null
    _min: ParentMinAggregateOutputType | null
    _max: ParentMaxAggregateOutputType | null
  }

  export type ParentMinAggregateOutputType = {
    id: string | null
    username: string | null
    title: string | null
    firstname: string | null
    surname: string | null
    othername: string | null
    birthday: Date | null
    bloodgroup: string | null
    gender: $Enums.UserSex | null
    occupation: string | null
    religion: string | null
    state: string | null
    lga: string | null
    email: string | null
    phone: string | null
    address: string | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type ParentMaxAggregateOutputType = {
    id: string | null
    username: string | null
    title: string | null
    firstname: string | null
    surname: string | null
    othername: string | null
    birthday: Date | null
    bloodgroup: string | null
    gender: $Enums.UserSex | null
    occupation: string | null
    religion: string | null
    state: string | null
    lga: string | null
    email: string | null
    phone: string | null
    address: string | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type ParentCountAggregateOutputType = {
    id: number
    username: number
    title: number
    firstname: number
    surname: number
    othername: number
    birthday: number
    bloodgroup: number
    gender: number
    occupation: number
    religion: number
    state: number
    lga: number
    email: number
    phone: number
    address: number
    createdAt: number
    updateAt: number
    _all: number
  }


  export type ParentMinAggregateInputType = {
    id?: true
    username?: true
    title?: true
    firstname?: true
    surname?: true
    othername?: true
    birthday?: true
    bloodgroup?: true
    gender?: true
    occupation?: true
    religion?: true
    state?: true
    lga?: true
    email?: true
    phone?: true
    address?: true
    createdAt?: true
    updateAt?: true
  }

  export type ParentMaxAggregateInputType = {
    id?: true
    username?: true
    title?: true
    firstname?: true
    surname?: true
    othername?: true
    birthday?: true
    bloodgroup?: true
    gender?: true
    occupation?: true
    religion?: true
    state?: true
    lga?: true
    email?: true
    phone?: true
    address?: true
    createdAt?: true
    updateAt?: true
  }

  export type ParentCountAggregateInputType = {
    id?: true
    username?: true
    title?: true
    firstname?: true
    surname?: true
    othername?: true
    birthday?: true
    bloodgroup?: true
    gender?: true
    occupation?: true
    religion?: true
    state?: true
    lga?: true
    email?: true
    phone?: true
    address?: true
    createdAt?: true
    updateAt?: true
    _all?: true
  }

  export type ParentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Parent to aggregate.
     */
    where?: ParentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parents to fetch.
     */
    orderBy?: ParentOrderByWithRelationInput | ParentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ParentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Parents
    **/
    _count?: true | ParentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParentMaxAggregateInputType
  }

  export type GetParentAggregateType<T extends ParentAggregateArgs> = {
        [P in keyof T & keyof AggregateParent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParent[P]>
      : GetScalarType<T[P], AggregateParent[P]>
  }




  export type ParentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParentWhereInput
    orderBy?: ParentOrderByWithAggregationInput | ParentOrderByWithAggregationInput[]
    by: ParentScalarFieldEnum[] | ParentScalarFieldEnum
    having?: ParentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParentCountAggregateInputType | true
    _min?: ParentMinAggregateInputType
    _max?: ParentMaxAggregateInputType
  }

  export type ParentGroupByOutputType = {
    id: string
    username: string
    title: string
    firstname: string
    surname: string
    othername: string | null
    birthday: Date | null
    bloodgroup: string | null
    gender: $Enums.UserSex
    occupation: string
    religion: string
    state: string
    lga: string
    email: string
    phone: string
    address: string
    createdAt: Date
    updateAt: Date
    _count: ParentCountAggregateOutputType | null
    _min: ParentMinAggregateOutputType | null
    _max: ParentMaxAggregateOutputType | null
  }

  type GetParentGroupByPayload<T extends ParentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ParentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParentGroupByOutputType[P]>
            : GetScalarType<T[P], ParentGroupByOutputType[P]>
        }
      >
    >


  export type ParentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    title?: boolean
    firstname?: boolean
    surname?: boolean
    othername?: boolean
    birthday?: boolean
    bloodgroup?: boolean
    gender?: boolean
    occupation?: boolean
    religion?: boolean
    state?: boolean
    lga?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    createdAt?: boolean
    updateAt?: boolean
    students?: boolean | Parent$studentsArgs<ExtArgs>
    _count?: boolean | ParentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["parent"]>

  export type ParentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    title?: boolean
    firstname?: boolean
    surname?: boolean
    othername?: boolean
    birthday?: boolean
    bloodgroup?: boolean
    gender?: boolean
    occupation?: boolean
    religion?: boolean
    state?: boolean
    lga?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    createdAt?: boolean
    updateAt?: boolean
  }, ExtArgs["result"]["parent"]>

  export type ParentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    title?: boolean
    firstname?: boolean
    surname?: boolean
    othername?: boolean
    birthday?: boolean
    bloodgroup?: boolean
    gender?: boolean
    occupation?: boolean
    religion?: boolean
    state?: boolean
    lga?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    createdAt?: boolean
    updateAt?: boolean
  }, ExtArgs["result"]["parent"]>

  export type ParentSelectScalar = {
    id?: boolean
    username?: boolean
    title?: boolean
    firstname?: boolean
    surname?: boolean
    othername?: boolean
    birthday?: boolean
    bloodgroup?: boolean
    gender?: boolean
    occupation?: boolean
    religion?: boolean
    state?: boolean
    lga?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    createdAt?: boolean
    updateAt?: boolean
  }

  export type ParentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "title" | "firstname" | "surname" | "othername" | "birthday" | "bloodgroup" | "gender" | "occupation" | "religion" | "state" | "lga" | "email" | "phone" | "address" | "createdAt" | "updateAt", ExtArgs["result"]["parent"]>
  export type ParentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    students?: boolean | Parent$studentsArgs<ExtArgs>
    _count?: boolean | ParentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ParentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ParentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ParentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Parent"
    objects: {
      students: Prisma.$StudentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      title: string
      firstname: string
      surname: string
      othername: string | null
      birthday: Date | null
      bloodgroup: string | null
      gender: $Enums.UserSex
      occupation: string
      religion: string
      state: string
      lga: string
      email: string
      phone: string
      address: string
      createdAt: Date
      updateAt: Date
    }, ExtArgs["result"]["parent"]>
    composites: {}
  }

  type ParentGetPayload<S extends boolean | null | undefined | ParentDefaultArgs> = $Result.GetResult<Prisma.$ParentPayload, S>

  type ParentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ParentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ParentCountAggregateInputType | true
    }

  export interface ParentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Parent'], meta: { name: 'Parent' } }
    /**
     * Find zero or one Parent that matches the filter.
     * @param {ParentFindUniqueArgs} args - Arguments to find a Parent
     * @example
     * // Get one Parent
     * const parent = await prisma.parent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ParentFindUniqueArgs>(args: SelectSubset<T, ParentFindUniqueArgs<ExtArgs>>): Prisma__ParentClient<$Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Parent that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ParentFindUniqueOrThrowArgs} args - Arguments to find a Parent
     * @example
     * // Get one Parent
     * const parent = await prisma.parent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ParentFindUniqueOrThrowArgs>(args: SelectSubset<T, ParentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ParentClient<$Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Parent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentFindFirstArgs} args - Arguments to find a Parent
     * @example
     * // Get one Parent
     * const parent = await prisma.parent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ParentFindFirstArgs>(args?: SelectSubset<T, ParentFindFirstArgs<ExtArgs>>): Prisma__ParentClient<$Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Parent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentFindFirstOrThrowArgs} args - Arguments to find a Parent
     * @example
     * // Get one Parent
     * const parent = await prisma.parent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ParentFindFirstOrThrowArgs>(args?: SelectSubset<T, ParentFindFirstOrThrowArgs<ExtArgs>>): Prisma__ParentClient<$Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Parents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Parents
     * const parents = await prisma.parent.findMany()
     * 
     * // Get first 10 Parents
     * const parents = await prisma.parent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const parentWithIdOnly = await prisma.parent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ParentFindManyArgs>(args?: SelectSubset<T, ParentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Parent.
     * @param {ParentCreateArgs} args - Arguments to create a Parent.
     * @example
     * // Create one Parent
     * const Parent = await prisma.parent.create({
     *   data: {
     *     // ... data to create a Parent
     *   }
     * })
     * 
     */
    create<T extends ParentCreateArgs>(args: SelectSubset<T, ParentCreateArgs<ExtArgs>>): Prisma__ParentClient<$Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Parents.
     * @param {ParentCreateManyArgs} args - Arguments to create many Parents.
     * @example
     * // Create many Parents
     * const parent = await prisma.parent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ParentCreateManyArgs>(args?: SelectSubset<T, ParentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Parents and returns the data saved in the database.
     * @param {ParentCreateManyAndReturnArgs} args - Arguments to create many Parents.
     * @example
     * // Create many Parents
     * const parent = await prisma.parent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Parents and only return the `id`
     * const parentWithIdOnly = await prisma.parent.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ParentCreateManyAndReturnArgs>(args?: SelectSubset<T, ParentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Parent.
     * @param {ParentDeleteArgs} args - Arguments to delete one Parent.
     * @example
     * // Delete one Parent
     * const Parent = await prisma.parent.delete({
     *   where: {
     *     // ... filter to delete one Parent
     *   }
     * })
     * 
     */
    delete<T extends ParentDeleteArgs>(args: SelectSubset<T, ParentDeleteArgs<ExtArgs>>): Prisma__ParentClient<$Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Parent.
     * @param {ParentUpdateArgs} args - Arguments to update one Parent.
     * @example
     * // Update one Parent
     * const parent = await prisma.parent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ParentUpdateArgs>(args: SelectSubset<T, ParentUpdateArgs<ExtArgs>>): Prisma__ParentClient<$Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Parents.
     * @param {ParentDeleteManyArgs} args - Arguments to filter Parents to delete.
     * @example
     * // Delete a few Parents
     * const { count } = await prisma.parent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ParentDeleteManyArgs>(args?: SelectSubset<T, ParentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Parents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Parents
     * const parent = await prisma.parent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ParentUpdateManyArgs>(args: SelectSubset<T, ParentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Parents and returns the data updated in the database.
     * @param {ParentUpdateManyAndReturnArgs} args - Arguments to update many Parents.
     * @example
     * // Update many Parents
     * const parent = await prisma.parent.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Parents and only return the `id`
     * const parentWithIdOnly = await prisma.parent.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ParentUpdateManyAndReturnArgs>(args: SelectSubset<T, ParentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Parent.
     * @param {ParentUpsertArgs} args - Arguments to update or create a Parent.
     * @example
     * // Update or create a Parent
     * const parent = await prisma.parent.upsert({
     *   create: {
     *     // ... data to create a Parent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Parent we want to update
     *   }
     * })
     */
    upsert<T extends ParentUpsertArgs>(args: SelectSubset<T, ParentUpsertArgs<ExtArgs>>): Prisma__ParentClient<$Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Parents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentCountArgs} args - Arguments to filter Parents to count.
     * @example
     * // Count the number of Parents
     * const count = await prisma.parent.count({
     *   where: {
     *     // ... the filter for the Parents we want to count
     *   }
     * })
    **/
    count<T extends ParentCountArgs>(
      args?: Subset<T, ParentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Parent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParentAggregateArgs>(args: Subset<T, ParentAggregateArgs>): Prisma.PrismaPromise<GetParentAggregateType<T>>

    /**
     * Group by Parent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ParentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ParentGroupByArgs['orderBy'] }
        : { orderBy?: ParentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ParentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Parent model
   */
  readonly fields: ParentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Parent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ParentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    students<T extends Parent$studentsArgs<ExtArgs> = {}>(args?: Subset<T, Parent$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Parent model
   */
  interface ParentFieldRefs {
    readonly id: FieldRef<"Parent", 'String'>
    readonly username: FieldRef<"Parent", 'String'>
    readonly title: FieldRef<"Parent", 'String'>
    readonly firstname: FieldRef<"Parent", 'String'>
    readonly surname: FieldRef<"Parent", 'String'>
    readonly othername: FieldRef<"Parent", 'String'>
    readonly birthday: FieldRef<"Parent", 'DateTime'>
    readonly bloodgroup: FieldRef<"Parent", 'String'>
    readonly gender: FieldRef<"Parent", 'UserSex'>
    readonly occupation: FieldRef<"Parent", 'String'>
    readonly religion: FieldRef<"Parent", 'String'>
    readonly state: FieldRef<"Parent", 'String'>
    readonly lga: FieldRef<"Parent", 'String'>
    readonly email: FieldRef<"Parent", 'String'>
    readonly phone: FieldRef<"Parent", 'String'>
    readonly address: FieldRef<"Parent", 'String'>
    readonly createdAt: FieldRef<"Parent", 'DateTime'>
    readonly updateAt: FieldRef<"Parent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Parent findUnique
   */
  export type ParentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parent
     */
    select?: ParentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Parent
     */
    omit?: ParentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentInclude<ExtArgs> | null
    /**
     * Filter, which Parent to fetch.
     */
    where: ParentWhereUniqueInput
  }

  /**
   * Parent findUniqueOrThrow
   */
  export type ParentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parent
     */
    select?: ParentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Parent
     */
    omit?: ParentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentInclude<ExtArgs> | null
    /**
     * Filter, which Parent to fetch.
     */
    where: ParentWhereUniqueInput
  }

  /**
   * Parent findFirst
   */
  export type ParentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parent
     */
    select?: ParentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Parent
     */
    omit?: ParentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentInclude<ExtArgs> | null
    /**
     * Filter, which Parent to fetch.
     */
    where?: ParentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parents to fetch.
     */
    orderBy?: ParentOrderByWithRelationInput | ParentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Parents.
     */
    cursor?: ParentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Parents.
     */
    distinct?: ParentScalarFieldEnum | ParentScalarFieldEnum[]
  }

  /**
   * Parent findFirstOrThrow
   */
  export type ParentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parent
     */
    select?: ParentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Parent
     */
    omit?: ParentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentInclude<ExtArgs> | null
    /**
     * Filter, which Parent to fetch.
     */
    where?: ParentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parents to fetch.
     */
    orderBy?: ParentOrderByWithRelationInput | ParentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Parents.
     */
    cursor?: ParentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Parents.
     */
    distinct?: ParentScalarFieldEnum | ParentScalarFieldEnum[]
  }

  /**
   * Parent findMany
   */
  export type ParentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parent
     */
    select?: ParentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Parent
     */
    omit?: ParentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentInclude<ExtArgs> | null
    /**
     * Filter, which Parents to fetch.
     */
    where?: ParentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parents to fetch.
     */
    orderBy?: ParentOrderByWithRelationInput | ParentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Parents.
     */
    cursor?: ParentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parents.
     */
    skip?: number
    distinct?: ParentScalarFieldEnum | ParentScalarFieldEnum[]
  }

  /**
   * Parent create
   */
  export type ParentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parent
     */
    select?: ParentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Parent
     */
    omit?: ParentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentInclude<ExtArgs> | null
    /**
     * The data needed to create a Parent.
     */
    data: XOR<ParentCreateInput, ParentUncheckedCreateInput>
  }

  /**
   * Parent createMany
   */
  export type ParentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Parents.
     */
    data: ParentCreateManyInput | ParentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Parent createManyAndReturn
   */
  export type ParentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parent
     */
    select?: ParentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Parent
     */
    omit?: ParentOmit<ExtArgs> | null
    /**
     * The data used to create many Parents.
     */
    data: ParentCreateManyInput | ParentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Parent update
   */
  export type ParentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parent
     */
    select?: ParentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Parent
     */
    omit?: ParentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentInclude<ExtArgs> | null
    /**
     * The data needed to update a Parent.
     */
    data: XOR<ParentUpdateInput, ParentUncheckedUpdateInput>
    /**
     * Choose, which Parent to update.
     */
    where: ParentWhereUniqueInput
  }

  /**
   * Parent updateMany
   */
  export type ParentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Parents.
     */
    data: XOR<ParentUpdateManyMutationInput, ParentUncheckedUpdateManyInput>
    /**
     * Filter which Parents to update
     */
    where?: ParentWhereInput
    /**
     * Limit how many Parents to update.
     */
    limit?: number
  }

  /**
   * Parent updateManyAndReturn
   */
  export type ParentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parent
     */
    select?: ParentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Parent
     */
    omit?: ParentOmit<ExtArgs> | null
    /**
     * The data used to update Parents.
     */
    data: XOR<ParentUpdateManyMutationInput, ParentUncheckedUpdateManyInput>
    /**
     * Filter which Parents to update
     */
    where?: ParentWhereInput
    /**
     * Limit how many Parents to update.
     */
    limit?: number
  }

  /**
   * Parent upsert
   */
  export type ParentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parent
     */
    select?: ParentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Parent
     */
    omit?: ParentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentInclude<ExtArgs> | null
    /**
     * The filter to search for the Parent to update in case it exists.
     */
    where: ParentWhereUniqueInput
    /**
     * In case the Parent found by the `where` argument doesn't exist, create a new Parent with this data.
     */
    create: XOR<ParentCreateInput, ParentUncheckedCreateInput>
    /**
     * In case the Parent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ParentUpdateInput, ParentUncheckedUpdateInput>
  }

  /**
   * Parent delete
   */
  export type ParentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parent
     */
    select?: ParentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Parent
     */
    omit?: ParentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentInclude<ExtArgs> | null
    /**
     * Filter which Parent to delete.
     */
    where: ParentWhereUniqueInput
  }

  /**
   * Parent deleteMany
   */
  export type ParentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Parents to delete
     */
    where?: ParentWhereInput
    /**
     * Limit how many Parents to delete.
     */
    limit?: number
  }

  /**
   * Parent.students
   */
  export type Parent$studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    cursor?: StudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Parent without action
   */
  export type ParentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parent
     */
    select?: ParentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Parent
     */
    omit?: ParentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentInclude<ExtArgs> | null
  }


  /**
   * Model Subject
   */

  export type AggregateSubject = {
    _count: SubjectCountAggregateOutputType | null
    _min: SubjectMinAggregateOutputType | null
    _max: SubjectMaxAggregateOutputType | null
  }

  export type SubjectMinAggregateOutputType = {
    id: string | null
    name: string | null
    category: string | null
    schoolid: string | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type SubjectMaxAggregateOutputType = {
    id: string | null
    name: string | null
    category: string | null
    schoolid: string | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type SubjectCountAggregateOutputType = {
    id: number
    name: number
    category: number
    schoolid: number
    createdAt: number
    updateAt: number
    _all: number
  }


  export type SubjectMinAggregateInputType = {
    id?: true
    name?: true
    category?: true
    schoolid?: true
    createdAt?: true
    updateAt?: true
  }

  export type SubjectMaxAggregateInputType = {
    id?: true
    name?: true
    category?: true
    schoolid?: true
    createdAt?: true
    updateAt?: true
  }

  export type SubjectCountAggregateInputType = {
    id?: true
    name?: true
    category?: true
    schoolid?: true
    createdAt?: true
    updateAt?: true
    _all?: true
  }

  export type SubjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subject to aggregate.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subjects
    **/
    _count?: true | SubjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubjectMaxAggregateInputType
  }

  export type GetSubjectAggregateType<T extends SubjectAggregateArgs> = {
        [P in keyof T & keyof AggregateSubject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubject[P]>
      : GetScalarType<T[P], AggregateSubject[P]>
  }




  export type SubjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubjectWhereInput
    orderBy?: SubjectOrderByWithAggregationInput | SubjectOrderByWithAggregationInput[]
    by: SubjectScalarFieldEnum[] | SubjectScalarFieldEnum
    having?: SubjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubjectCountAggregateInputType | true
    _min?: SubjectMinAggregateInputType
    _max?: SubjectMaxAggregateInputType
  }

  export type SubjectGroupByOutputType = {
    id: string
    name: string
    category: string
    schoolid: string
    createdAt: Date
    updateAt: Date
    _count: SubjectCountAggregateOutputType | null
    _min: SubjectMinAggregateOutputType | null
    _max: SubjectMaxAggregateOutputType | null
  }

  type GetSubjectGroupByPayload<T extends SubjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubjectGroupByOutputType[P]>
            : GetScalarType<T[P], SubjectGroupByOutputType[P]>
        }
      >
    >


  export type SubjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category?: boolean
    schoolid?: boolean
    createdAt?: boolean
    updateAt?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    teachers?: boolean | Subject$teachersArgs<ExtArgs>
    assignments?: boolean | Subject$assignmentsArgs<ExtArgs>
    grades?: boolean | Subject$gradesArgs<ExtArgs>
    tests?: boolean | Subject$testsArgs<ExtArgs>
    _count?: boolean | SubjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subject"]>

  export type SubjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category?: boolean
    schoolid?: boolean
    createdAt?: boolean
    updateAt?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subject"]>

  export type SubjectSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category?: boolean
    schoolid?: boolean
    createdAt?: boolean
    updateAt?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subject"]>

  export type SubjectSelectScalar = {
    id?: boolean
    name?: boolean
    category?: boolean
    schoolid?: boolean
    createdAt?: boolean
    updateAt?: boolean
  }

  export type SubjectOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "category" | "schoolid" | "createdAt" | "updateAt", ExtArgs["result"]["subject"]>
  export type SubjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    teachers?: boolean | Subject$teachersArgs<ExtArgs>
    assignments?: boolean | Subject$assignmentsArgs<ExtArgs>
    grades?: boolean | Subject$gradesArgs<ExtArgs>
    tests?: boolean | Subject$testsArgs<ExtArgs>
    _count?: boolean | SubjectCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SubjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }
  export type SubjectIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }

  export type $SubjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subject"
    objects: {
      school: Prisma.$SchoolPayload<ExtArgs>
      teachers: Prisma.$TeacherPayload<ExtArgs>[]
      assignments: Prisma.$AssignmentPayload<ExtArgs>[]
      grades: Prisma.$SubjectGradePayload<ExtArgs>[]
      tests: Prisma.$TestPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      category: string
      schoolid: string
      createdAt: Date
      updateAt: Date
    }, ExtArgs["result"]["subject"]>
    composites: {}
  }

  type SubjectGetPayload<S extends boolean | null | undefined | SubjectDefaultArgs> = $Result.GetResult<Prisma.$SubjectPayload, S>

  type SubjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubjectFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubjectCountAggregateInputType | true
    }

  export interface SubjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subject'], meta: { name: 'Subject' } }
    /**
     * Find zero or one Subject that matches the filter.
     * @param {SubjectFindUniqueArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubjectFindUniqueArgs>(args: SelectSubset<T, SubjectFindUniqueArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Subject that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubjectFindUniqueOrThrowArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubjectFindUniqueOrThrowArgs>(args: SelectSubset<T, SubjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subject that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindFirstArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubjectFindFirstArgs>(args?: SelectSubset<T, SubjectFindFirstArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subject that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindFirstOrThrowArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubjectFindFirstOrThrowArgs>(args?: SelectSubset<T, SubjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Subjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subjects
     * const subjects = await prisma.subject.findMany()
     * 
     * // Get first 10 Subjects
     * const subjects = await prisma.subject.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subjectWithIdOnly = await prisma.subject.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubjectFindManyArgs>(args?: SelectSubset<T, SubjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Subject.
     * @param {SubjectCreateArgs} args - Arguments to create a Subject.
     * @example
     * // Create one Subject
     * const Subject = await prisma.subject.create({
     *   data: {
     *     // ... data to create a Subject
     *   }
     * })
     * 
     */
    create<T extends SubjectCreateArgs>(args: SelectSubset<T, SubjectCreateArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Subjects.
     * @param {SubjectCreateManyArgs} args - Arguments to create many Subjects.
     * @example
     * // Create many Subjects
     * const subject = await prisma.subject.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubjectCreateManyArgs>(args?: SelectSubset<T, SubjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Subjects and returns the data saved in the database.
     * @param {SubjectCreateManyAndReturnArgs} args - Arguments to create many Subjects.
     * @example
     * // Create many Subjects
     * const subject = await prisma.subject.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Subjects and only return the `id`
     * const subjectWithIdOnly = await prisma.subject.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubjectCreateManyAndReturnArgs>(args?: SelectSubset<T, SubjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Subject.
     * @param {SubjectDeleteArgs} args - Arguments to delete one Subject.
     * @example
     * // Delete one Subject
     * const Subject = await prisma.subject.delete({
     *   where: {
     *     // ... filter to delete one Subject
     *   }
     * })
     * 
     */
    delete<T extends SubjectDeleteArgs>(args: SelectSubset<T, SubjectDeleteArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Subject.
     * @param {SubjectUpdateArgs} args - Arguments to update one Subject.
     * @example
     * // Update one Subject
     * const subject = await prisma.subject.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubjectUpdateArgs>(args: SelectSubset<T, SubjectUpdateArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Subjects.
     * @param {SubjectDeleteManyArgs} args - Arguments to filter Subjects to delete.
     * @example
     * // Delete a few Subjects
     * const { count } = await prisma.subject.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubjectDeleteManyArgs>(args?: SelectSubset<T, SubjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subjects
     * const subject = await prisma.subject.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubjectUpdateManyArgs>(args: SelectSubset<T, SubjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subjects and returns the data updated in the database.
     * @param {SubjectUpdateManyAndReturnArgs} args - Arguments to update many Subjects.
     * @example
     * // Update many Subjects
     * const subject = await prisma.subject.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Subjects and only return the `id`
     * const subjectWithIdOnly = await prisma.subject.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubjectUpdateManyAndReturnArgs>(args: SelectSubset<T, SubjectUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Subject.
     * @param {SubjectUpsertArgs} args - Arguments to update or create a Subject.
     * @example
     * // Update or create a Subject
     * const subject = await prisma.subject.upsert({
     *   create: {
     *     // ... data to create a Subject
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subject we want to update
     *   }
     * })
     */
    upsert<T extends SubjectUpsertArgs>(args: SelectSubset<T, SubjectUpsertArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectCountArgs} args - Arguments to filter Subjects to count.
     * @example
     * // Count the number of Subjects
     * const count = await prisma.subject.count({
     *   where: {
     *     // ... the filter for the Subjects we want to count
     *   }
     * })
    **/
    count<T extends SubjectCountArgs>(
      args?: Subset<T, SubjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubjectAggregateArgs>(args: Subset<T, SubjectAggregateArgs>): Prisma.PrismaPromise<GetSubjectAggregateType<T>>

    /**
     * Group by Subject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubjectGroupByArgs['orderBy'] }
        : { orderBy?: SubjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subject model
   */
  readonly fields: SubjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subject.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    school<T extends SchoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDefaultArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    teachers<T extends Subject$teachersArgs<ExtArgs> = {}>(args?: Subset<T, Subject$teachersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assignments<T extends Subject$assignmentsArgs<ExtArgs> = {}>(args?: Subset<T, Subject$assignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    grades<T extends Subject$gradesArgs<ExtArgs> = {}>(args?: Subset<T, Subject$gradesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectGradePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tests<T extends Subject$testsArgs<ExtArgs> = {}>(args?: Subset<T, Subject$testsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Subject model
   */
  interface SubjectFieldRefs {
    readonly id: FieldRef<"Subject", 'String'>
    readonly name: FieldRef<"Subject", 'String'>
    readonly category: FieldRef<"Subject", 'String'>
    readonly schoolid: FieldRef<"Subject", 'String'>
    readonly createdAt: FieldRef<"Subject", 'DateTime'>
    readonly updateAt: FieldRef<"Subject", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Subject findUnique
   */
  export type SubjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject findUniqueOrThrow
   */
  export type SubjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject findFirst
   */
  export type SubjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subjects.
     */
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Subject findFirstOrThrow
   */
  export type SubjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subject to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subjects.
     */
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Subject findMany
   */
  export type SubjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter, which Subjects to fetch.
     */
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     */
    orderBy?: SubjectOrderByWithRelationInput | SubjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subjects.
     */
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     */
    skip?: number
    distinct?: SubjectScalarFieldEnum | SubjectScalarFieldEnum[]
  }

  /**
   * Subject create
   */
  export type SubjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Subject.
     */
    data: XOR<SubjectCreateInput, SubjectUncheckedCreateInput>
  }

  /**
   * Subject createMany
   */
  export type SubjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subjects.
     */
    data: SubjectCreateManyInput | SubjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subject createManyAndReturn
   */
  export type SubjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * The data used to create many Subjects.
     */
    data: SubjectCreateManyInput | SubjectCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Subject update
   */
  export type SubjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Subject.
     */
    data: XOR<SubjectUpdateInput, SubjectUncheckedUpdateInput>
    /**
     * Choose, which Subject to update.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject updateMany
   */
  export type SubjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subjects.
     */
    data: XOR<SubjectUpdateManyMutationInput, SubjectUncheckedUpdateManyInput>
    /**
     * Filter which Subjects to update
     */
    where?: SubjectWhereInput
    /**
     * Limit how many Subjects to update.
     */
    limit?: number
  }

  /**
   * Subject updateManyAndReturn
   */
  export type SubjectUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * The data used to update Subjects.
     */
    data: XOR<SubjectUpdateManyMutationInput, SubjectUncheckedUpdateManyInput>
    /**
     * Filter which Subjects to update
     */
    where?: SubjectWhereInput
    /**
     * Limit how many Subjects to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Subject upsert
   */
  export type SubjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Subject to update in case it exists.
     */
    where: SubjectWhereUniqueInput
    /**
     * In case the Subject found by the `where` argument doesn't exist, create a new Subject with this data.
     */
    create: XOR<SubjectCreateInput, SubjectUncheckedCreateInput>
    /**
     * In case the Subject was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubjectUpdateInput, SubjectUncheckedUpdateInput>
  }

  /**
   * Subject delete
   */
  export type SubjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
    /**
     * Filter which Subject to delete.
     */
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject deleteMany
   */
  export type SubjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subjects to delete
     */
    where?: SubjectWhereInput
    /**
     * Limit how many Subjects to delete.
     */
    limit?: number
  }

  /**
   * Subject.teachers
   */
  export type Subject$teachersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    where?: TeacherWhereInput
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    cursor?: TeacherWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Subject.assignments
   */
  export type Subject$assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    where?: AssignmentWhereInput
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    cursor?: AssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }

  /**
   * Subject.grades
   */
  export type Subject$gradesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectGrade
     */
    select?: SubjectGradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubjectGrade
     */
    omit?: SubjectGradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectGradeInclude<ExtArgs> | null
    where?: SubjectGradeWhereInput
    orderBy?: SubjectGradeOrderByWithRelationInput | SubjectGradeOrderByWithRelationInput[]
    cursor?: SubjectGradeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubjectGradeScalarFieldEnum | SubjectGradeScalarFieldEnum[]
  }

  /**
   * Subject.tests
   */
  export type Subject$testsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestInclude<ExtArgs> | null
    where?: TestWhereInput
    orderBy?: TestOrderByWithRelationInput | TestOrderByWithRelationInput[]
    cursor?: TestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TestScalarFieldEnum | TestScalarFieldEnum[]
  }

  /**
   * Subject without action
   */
  export type SubjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subject
     */
    select?: SubjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subject
     */
    omit?: SubjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectInclude<ExtArgs> | null
  }


  /**
   * Model Class
   */

  export type AggregateClass = {
    _count: ClassCountAggregateOutputType | null
    _avg: ClassAvgAggregateOutputType | null
    _sum: ClassSumAggregateOutputType | null
    _min: ClassMinAggregateOutputType | null
    _max: ClassMaxAggregateOutputType | null
  }

  export type ClassAvgAggregateOutputType = {
    capacity: number | null
  }

  export type ClassSumAggregateOutputType = {
    capacity: number | null
  }

  export type ClassMinAggregateOutputType = {
    id: string | null
    name: string | null
    category: string | null
    level: string | null
    capacity: number | null
    formmasterid: string | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type ClassMaxAggregateOutputType = {
    id: string | null
    name: string | null
    category: string | null
    level: string | null
    capacity: number | null
    formmasterid: string | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type ClassCountAggregateOutputType = {
    id: number
    name: number
    category: number
    level: number
    capacity: number
    formmasterid: number
    createdAt: number
    updateAt: number
    _all: number
  }


  export type ClassAvgAggregateInputType = {
    capacity?: true
  }

  export type ClassSumAggregateInputType = {
    capacity?: true
  }

  export type ClassMinAggregateInputType = {
    id?: true
    name?: true
    category?: true
    level?: true
    capacity?: true
    formmasterid?: true
    createdAt?: true
    updateAt?: true
  }

  export type ClassMaxAggregateInputType = {
    id?: true
    name?: true
    category?: true
    level?: true
    capacity?: true
    formmasterid?: true
    createdAt?: true
    updateAt?: true
  }

  export type ClassCountAggregateInputType = {
    id?: true
    name?: true
    category?: true
    level?: true
    capacity?: true
    formmasterid?: true
    createdAt?: true
    updateAt?: true
    _all?: true
  }

  export type ClassAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Class to aggregate.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Classes
    **/
    _count?: true | ClassCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClassAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClassSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClassMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClassMaxAggregateInputType
  }

  export type GetClassAggregateType<T extends ClassAggregateArgs> = {
        [P in keyof T & keyof AggregateClass]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClass[P]>
      : GetScalarType<T[P], AggregateClass[P]>
  }




  export type ClassGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassWhereInput
    orderBy?: ClassOrderByWithAggregationInput | ClassOrderByWithAggregationInput[]
    by: ClassScalarFieldEnum[] | ClassScalarFieldEnum
    having?: ClassScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClassCountAggregateInputType | true
    _avg?: ClassAvgAggregateInputType
    _sum?: ClassSumAggregateInputType
    _min?: ClassMinAggregateInputType
    _max?: ClassMaxAggregateInputType
  }

  export type ClassGroupByOutputType = {
    id: string
    name: string
    category: string
    level: string
    capacity: number | null
    formmasterid: string | null
    createdAt: Date
    updateAt: Date
    _count: ClassCountAggregateOutputType | null
    _avg: ClassAvgAggregateOutputType | null
    _sum: ClassSumAggregateOutputType | null
    _min: ClassMinAggregateOutputType | null
    _max: ClassMaxAggregateOutputType | null
  }

  type GetClassGroupByPayload<T extends ClassGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClassGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClassGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClassGroupByOutputType[P]>
            : GetScalarType<T[P], ClassGroupByOutputType[P]>
        }
      >
    >


  export type ClassSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category?: boolean
    level?: boolean
    capacity?: boolean
    formmasterid?: boolean
    createdAt?: boolean
    updateAt?: boolean
    formmaster?: boolean | Class$formmasterArgs<ExtArgs>
    students?: boolean | Class$studentsArgs<ExtArgs>
    gradings?: boolean | Class$gradingsArgs<ExtArgs>
    events?: boolean | Class$eventsArgs<ExtArgs>
    announcements?: boolean | Class$announcementsArgs<ExtArgs>
    _count?: boolean | ClassCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["class"]>

  export type ClassSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category?: boolean
    level?: boolean
    capacity?: boolean
    formmasterid?: boolean
    createdAt?: boolean
    updateAt?: boolean
    formmaster?: boolean | Class$formmasterArgs<ExtArgs>
  }, ExtArgs["result"]["class"]>

  export type ClassSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category?: boolean
    level?: boolean
    capacity?: boolean
    formmasterid?: boolean
    createdAt?: boolean
    updateAt?: boolean
    formmaster?: boolean | Class$formmasterArgs<ExtArgs>
  }, ExtArgs["result"]["class"]>

  export type ClassSelectScalar = {
    id?: boolean
    name?: boolean
    category?: boolean
    level?: boolean
    capacity?: boolean
    formmasterid?: boolean
    createdAt?: boolean
    updateAt?: boolean
  }

  export type ClassOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "category" | "level" | "capacity" | "formmasterid" | "createdAt" | "updateAt", ExtArgs["result"]["class"]>
  export type ClassInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    formmaster?: boolean | Class$formmasterArgs<ExtArgs>
    students?: boolean | Class$studentsArgs<ExtArgs>
    gradings?: boolean | Class$gradingsArgs<ExtArgs>
    events?: boolean | Class$eventsArgs<ExtArgs>
    announcements?: boolean | Class$announcementsArgs<ExtArgs>
    _count?: boolean | ClassCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClassIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    formmaster?: boolean | Class$formmasterArgs<ExtArgs>
  }
  export type ClassIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    formmaster?: boolean | Class$formmasterArgs<ExtArgs>
  }

  export type $ClassPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Class"
    objects: {
      formmaster: Prisma.$TeacherPayload<ExtArgs> | null
      students: Prisma.$StudentPayload<ExtArgs>[]
      gradings: Prisma.$ClassGradePayload<ExtArgs>[]
      events: Prisma.$EventPayload<ExtArgs>[]
      announcements: Prisma.$AnnouncementPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      category: string
      level: string
      capacity: number | null
      formmasterid: string | null
      createdAt: Date
      updateAt: Date
    }, ExtArgs["result"]["class"]>
    composites: {}
  }

  type ClassGetPayload<S extends boolean | null | undefined | ClassDefaultArgs> = $Result.GetResult<Prisma.$ClassPayload, S>

  type ClassCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClassFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClassCountAggregateInputType | true
    }

  export interface ClassDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Class'], meta: { name: 'Class' } }
    /**
     * Find zero or one Class that matches the filter.
     * @param {ClassFindUniqueArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClassFindUniqueArgs>(args: SelectSubset<T, ClassFindUniqueArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Class that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClassFindUniqueOrThrowArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClassFindUniqueOrThrowArgs>(args: SelectSubset<T, ClassFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Class that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindFirstArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClassFindFirstArgs>(args?: SelectSubset<T, ClassFindFirstArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Class that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindFirstOrThrowArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClassFindFirstOrThrowArgs>(args?: SelectSubset<T, ClassFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Classes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Classes
     * const classes = await prisma.class.findMany()
     * 
     * // Get first 10 Classes
     * const classes = await prisma.class.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const classWithIdOnly = await prisma.class.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClassFindManyArgs>(args?: SelectSubset<T, ClassFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Class.
     * @param {ClassCreateArgs} args - Arguments to create a Class.
     * @example
     * // Create one Class
     * const Class = await prisma.class.create({
     *   data: {
     *     // ... data to create a Class
     *   }
     * })
     * 
     */
    create<T extends ClassCreateArgs>(args: SelectSubset<T, ClassCreateArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Classes.
     * @param {ClassCreateManyArgs} args - Arguments to create many Classes.
     * @example
     * // Create many Classes
     * const class = await prisma.class.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClassCreateManyArgs>(args?: SelectSubset<T, ClassCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Classes and returns the data saved in the database.
     * @param {ClassCreateManyAndReturnArgs} args - Arguments to create many Classes.
     * @example
     * // Create many Classes
     * const class = await prisma.class.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Classes and only return the `id`
     * const classWithIdOnly = await prisma.class.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClassCreateManyAndReturnArgs>(args?: SelectSubset<T, ClassCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Class.
     * @param {ClassDeleteArgs} args - Arguments to delete one Class.
     * @example
     * // Delete one Class
     * const Class = await prisma.class.delete({
     *   where: {
     *     // ... filter to delete one Class
     *   }
     * })
     * 
     */
    delete<T extends ClassDeleteArgs>(args: SelectSubset<T, ClassDeleteArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Class.
     * @param {ClassUpdateArgs} args - Arguments to update one Class.
     * @example
     * // Update one Class
     * const class = await prisma.class.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClassUpdateArgs>(args: SelectSubset<T, ClassUpdateArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Classes.
     * @param {ClassDeleteManyArgs} args - Arguments to filter Classes to delete.
     * @example
     * // Delete a few Classes
     * const { count } = await prisma.class.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClassDeleteManyArgs>(args?: SelectSubset<T, ClassDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Classes
     * const class = await prisma.class.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClassUpdateManyArgs>(args: SelectSubset<T, ClassUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classes and returns the data updated in the database.
     * @param {ClassUpdateManyAndReturnArgs} args - Arguments to update many Classes.
     * @example
     * // Update many Classes
     * const class = await prisma.class.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Classes and only return the `id`
     * const classWithIdOnly = await prisma.class.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClassUpdateManyAndReturnArgs>(args: SelectSubset<T, ClassUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Class.
     * @param {ClassUpsertArgs} args - Arguments to update or create a Class.
     * @example
     * // Update or create a Class
     * const class = await prisma.class.upsert({
     *   create: {
     *     // ... data to create a Class
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Class we want to update
     *   }
     * })
     */
    upsert<T extends ClassUpsertArgs>(args: SelectSubset<T, ClassUpsertArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassCountArgs} args - Arguments to filter Classes to count.
     * @example
     * // Count the number of Classes
     * const count = await prisma.class.count({
     *   where: {
     *     // ... the filter for the Classes we want to count
     *   }
     * })
    **/
    count<T extends ClassCountArgs>(
      args?: Subset<T, ClassCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassAggregateArgs>(args: Subset<T, ClassAggregateArgs>): Prisma.PrismaPromise<GetClassAggregateType<T>>

    /**
     * Group by Class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClassGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClassGroupByArgs['orderBy'] }
        : { orderBy?: ClassGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClassGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Class model
   */
  readonly fields: ClassFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Class.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClassClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    formmaster<T extends Class$formmasterArgs<ExtArgs> = {}>(args?: Subset<T, Class$formmasterArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    students<T extends Class$studentsArgs<ExtArgs> = {}>(args?: Subset<T, Class$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    gradings<T extends Class$gradingsArgs<ExtArgs> = {}>(args?: Subset<T, Class$gradingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassGradePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    events<T extends Class$eventsArgs<ExtArgs> = {}>(args?: Subset<T, Class$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    announcements<T extends Class$announcementsArgs<ExtArgs> = {}>(args?: Subset<T, Class$announcementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Class model
   */
  interface ClassFieldRefs {
    readonly id: FieldRef<"Class", 'String'>
    readonly name: FieldRef<"Class", 'String'>
    readonly category: FieldRef<"Class", 'String'>
    readonly level: FieldRef<"Class", 'String'>
    readonly capacity: FieldRef<"Class", 'Int'>
    readonly formmasterid: FieldRef<"Class", 'String'>
    readonly createdAt: FieldRef<"Class", 'DateTime'>
    readonly updateAt: FieldRef<"Class", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Class findUnique
   */
  export type ClassFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class findUniqueOrThrow
   */
  export type ClassFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class findFirst
   */
  export type ClassFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
     */
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class findFirstOrThrow
   */
  export type ClassFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
     */
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class findMany
   */
  export type ClassFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Classes to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class create
   */
  export type ClassCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The data needed to create a Class.
     */
    data: XOR<ClassCreateInput, ClassUncheckedCreateInput>
  }

  /**
   * Class createMany
   */
  export type ClassCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Classes.
     */
    data: ClassCreateManyInput | ClassCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Class createManyAndReturn
   */
  export type ClassCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * The data used to create many Classes.
     */
    data: ClassCreateManyInput | ClassCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Class update
   */
  export type ClassUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The data needed to update a Class.
     */
    data: XOR<ClassUpdateInput, ClassUncheckedUpdateInput>
    /**
     * Choose, which Class to update.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class updateMany
   */
  export type ClassUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Classes.
     */
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyInput>
    /**
     * Filter which Classes to update
     */
    where?: ClassWhereInput
    /**
     * Limit how many Classes to update.
     */
    limit?: number
  }

  /**
   * Class updateManyAndReturn
   */
  export type ClassUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * The data used to update Classes.
     */
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyInput>
    /**
     * Filter which Classes to update
     */
    where?: ClassWhereInput
    /**
     * Limit how many Classes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Class upsert
   */
  export type ClassUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The filter to search for the Class to update in case it exists.
     */
    where: ClassWhereUniqueInput
    /**
     * In case the Class found by the `where` argument doesn't exist, create a new Class with this data.
     */
    create: XOR<ClassCreateInput, ClassUncheckedCreateInput>
    /**
     * In case the Class was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClassUpdateInput, ClassUncheckedUpdateInput>
  }

  /**
   * Class delete
   */
  export type ClassDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter which Class to delete.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class deleteMany
   */
  export type ClassDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Classes to delete
     */
    where?: ClassWhereInput
    /**
     * Limit how many Classes to delete.
     */
    limit?: number
  }

  /**
   * Class.formmaster
   */
  export type Class$formmasterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    where?: TeacherWhereInput
  }

  /**
   * Class.students
   */
  export type Class$studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    cursor?: StudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Class.gradings
   */
  export type Class$gradingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassGrade
     */
    select?: ClassGradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassGrade
     */
    omit?: ClassGradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassGradeInclude<ExtArgs> | null
    where?: ClassGradeWhereInput
    orderBy?: ClassGradeOrderByWithRelationInput | ClassGradeOrderByWithRelationInput[]
    cursor?: ClassGradeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassGradeScalarFieldEnum | ClassGradeScalarFieldEnum[]
  }

  /**
   * Class.events
   */
  export type Class$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Class.announcements
   */
  export type Class$announcementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementInclude<ExtArgs> | null
    where?: AnnouncementWhereInput
    orderBy?: AnnouncementOrderByWithRelationInput | AnnouncementOrderByWithRelationInput[]
    cursor?: AnnouncementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnnouncementScalarFieldEnum | AnnouncementScalarFieldEnum[]
  }

  /**
   * Class without action
   */
  export type ClassDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
  }


  /**
   * Model PaymentSetup
   */

  export type AggregatePaymentSetup = {
    _count: PaymentSetupCountAggregateOutputType | null
    _avg: PaymentSetupAvgAggregateOutputType | null
    _sum: PaymentSetupSumAggregateOutputType | null
    _min: PaymentSetupMinAggregateOutputType | null
    _max: PaymentSetupMaxAggregateOutputType | null
  }

  export type PaymentSetupAvgAggregateOutputType = {
    amount: number | null
    fees: number | null
  }

  export type PaymentSetupSumAggregateOutputType = {
    amount: number | null
    fees: number | null
  }

  export type PaymentSetupMinAggregateOutputType = {
    id: string | null
    amount: number | null
    fees: number | null
    partpayment: boolean | null
    session: string | null
    term: string | null
    schoolid: string | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type PaymentSetupMaxAggregateOutputType = {
    id: string | null
    amount: number | null
    fees: number | null
    partpayment: boolean | null
    session: string | null
    term: string | null
    schoolid: string | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type PaymentSetupCountAggregateOutputType = {
    id: number
    amount: number
    fees: number
    partpayment: number
    session: number
    term: number
    schoolid: number
    createdAt: number
    updateAt: number
    _all: number
  }


  export type PaymentSetupAvgAggregateInputType = {
    amount?: true
    fees?: true
  }

  export type PaymentSetupSumAggregateInputType = {
    amount?: true
    fees?: true
  }

  export type PaymentSetupMinAggregateInputType = {
    id?: true
    amount?: true
    fees?: true
    partpayment?: true
    session?: true
    term?: true
    schoolid?: true
    createdAt?: true
    updateAt?: true
  }

  export type PaymentSetupMaxAggregateInputType = {
    id?: true
    amount?: true
    fees?: true
    partpayment?: true
    session?: true
    term?: true
    schoolid?: true
    createdAt?: true
    updateAt?: true
  }

  export type PaymentSetupCountAggregateInputType = {
    id?: true
    amount?: true
    fees?: true
    partpayment?: true
    session?: true
    term?: true
    schoolid?: true
    createdAt?: true
    updateAt?: true
    _all?: true
  }

  export type PaymentSetupAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentSetup to aggregate.
     */
    where?: PaymentSetupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentSetups to fetch.
     */
    orderBy?: PaymentSetupOrderByWithRelationInput | PaymentSetupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentSetupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentSetups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentSetups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PaymentSetups
    **/
    _count?: true | PaymentSetupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentSetupAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentSetupSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentSetupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentSetupMaxAggregateInputType
  }

  export type GetPaymentSetupAggregateType<T extends PaymentSetupAggregateArgs> = {
        [P in keyof T & keyof AggregatePaymentSetup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaymentSetup[P]>
      : GetScalarType<T[P], AggregatePaymentSetup[P]>
  }




  export type PaymentSetupGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentSetupWhereInput
    orderBy?: PaymentSetupOrderByWithAggregationInput | PaymentSetupOrderByWithAggregationInput[]
    by: PaymentSetupScalarFieldEnum[] | PaymentSetupScalarFieldEnum
    having?: PaymentSetupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentSetupCountAggregateInputType | true
    _avg?: PaymentSetupAvgAggregateInputType
    _sum?: PaymentSetupSumAggregateInputType
    _min?: PaymentSetupMinAggregateInputType
    _max?: PaymentSetupMaxAggregateInputType
  }

  export type PaymentSetupGroupByOutputType = {
    id: string
    amount: number
    fees: number
    partpayment: boolean
    session: string
    term: string
    schoolid: string
    createdAt: Date
    updateAt: Date
    _count: PaymentSetupCountAggregateOutputType | null
    _avg: PaymentSetupAvgAggregateOutputType | null
    _sum: PaymentSetupSumAggregateOutputType | null
    _min: PaymentSetupMinAggregateOutputType | null
    _max: PaymentSetupMaxAggregateOutputType | null
  }

  type GetPaymentSetupGroupByPayload<T extends PaymentSetupGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentSetupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentSetupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentSetupGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentSetupGroupByOutputType[P]>
        }
      >
    >


  export type PaymentSetupSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    amount?: boolean
    fees?: boolean
    partpayment?: boolean
    session?: boolean
    term?: boolean
    schoolid?: boolean
    createdAt?: boolean
    updateAt?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentSetup"]>

  export type PaymentSetupSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    amount?: boolean
    fees?: boolean
    partpayment?: boolean
    session?: boolean
    term?: boolean
    schoolid?: boolean
    createdAt?: boolean
    updateAt?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentSetup"]>

  export type PaymentSetupSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    amount?: boolean
    fees?: boolean
    partpayment?: boolean
    session?: boolean
    term?: boolean
    schoolid?: boolean
    createdAt?: boolean
    updateAt?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentSetup"]>

  export type PaymentSetupSelectScalar = {
    id?: boolean
    amount?: boolean
    fees?: boolean
    partpayment?: boolean
    session?: boolean
    term?: boolean
    schoolid?: boolean
    createdAt?: boolean
    updateAt?: boolean
  }

  export type PaymentSetupOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "amount" | "fees" | "partpayment" | "session" | "term" | "schoolid" | "createdAt" | "updateAt", ExtArgs["result"]["paymentSetup"]>
  export type PaymentSetupInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }
  export type PaymentSetupIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }
  export type PaymentSetupIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }

  export type $PaymentSetupPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PaymentSetup"
    objects: {
      school: Prisma.$SchoolPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      amount: number
      fees: number
      partpayment: boolean
      session: string
      term: string
      schoolid: string
      createdAt: Date
      updateAt: Date
    }, ExtArgs["result"]["paymentSetup"]>
    composites: {}
  }

  type PaymentSetupGetPayload<S extends boolean | null | undefined | PaymentSetupDefaultArgs> = $Result.GetResult<Prisma.$PaymentSetupPayload, S>

  type PaymentSetupCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PaymentSetupFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentSetupCountAggregateInputType | true
    }

  export interface PaymentSetupDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PaymentSetup'], meta: { name: 'PaymentSetup' } }
    /**
     * Find zero or one PaymentSetup that matches the filter.
     * @param {PaymentSetupFindUniqueArgs} args - Arguments to find a PaymentSetup
     * @example
     * // Get one PaymentSetup
     * const paymentSetup = await prisma.paymentSetup.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentSetupFindUniqueArgs>(args: SelectSubset<T, PaymentSetupFindUniqueArgs<ExtArgs>>): Prisma__PaymentSetupClient<$Result.GetResult<Prisma.$PaymentSetupPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PaymentSetup that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PaymentSetupFindUniqueOrThrowArgs} args - Arguments to find a PaymentSetup
     * @example
     * // Get one PaymentSetup
     * const paymentSetup = await prisma.paymentSetup.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentSetupFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentSetupFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentSetupClient<$Result.GetResult<Prisma.$PaymentSetupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PaymentSetup that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentSetupFindFirstArgs} args - Arguments to find a PaymentSetup
     * @example
     * // Get one PaymentSetup
     * const paymentSetup = await prisma.paymentSetup.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentSetupFindFirstArgs>(args?: SelectSubset<T, PaymentSetupFindFirstArgs<ExtArgs>>): Prisma__PaymentSetupClient<$Result.GetResult<Prisma.$PaymentSetupPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PaymentSetup that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentSetupFindFirstOrThrowArgs} args - Arguments to find a PaymentSetup
     * @example
     * // Get one PaymentSetup
     * const paymentSetup = await prisma.paymentSetup.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentSetupFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentSetupFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentSetupClient<$Result.GetResult<Prisma.$PaymentSetupPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PaymentSetups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentSetupFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PaymentSetups
     * const paymentSetups = await prisma.paymentSetup.findMany()
     * 
     * // Get first 10 PaymentSetups
     * const paymentSetups = await prisma.paymentSetup.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentSetupWithIdOnly = await prisma.paymentSetup.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentSetupFindManyArgs>(args?: SelectSubset<T, PaymentSetupFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentSetupPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PaymentSetup.
     * @param {PaymentSetupCreateArgs} args - Arguments to create a PaymentSetup.
     * @example
     * // Create one PaymentSetup
     * const PaymentSetup = await prisma.paymentSetup.create({
     *   data: {
     *     // ... data to create a PaymentSetup
     *   }
     * })
     * 
     */
    create<T extends PaymentSetupCreateArgs>(args: SelectSubset<T, PaymentSetupCreateArgs<ExtArgs>>): Prisma__PaymentSetupClient<$Result.GetResult<Prisma.$PaymentSetupPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PaymentSetups.
     * @param {PaymentSetupCreateManyArgs} args - Arguments to create many PaymentSetups.
     * @example
     * // Create many PaymentSetups
     * const paymentSetup = await prisma.paymentSetup.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentSetupCreateManyArgs>(args?: SelectSubset<T, PaymentSetupCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PaymentSetups and returns the data saved in the database.
     * @param {PaymentSetupCreateManyAndReturnArgs} args - Arguments to create many PaymentSetups.
     * @example
     * // Create many PaymentSetups
     * const paymentSetup = await prisma.paymentSetup.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PaymentSetups and only return the `id`
     * const paymentSetupWithIdOnly = await prisma.paymentSetup.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentSetupCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentSetupCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentSetupPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PaymentSetup.
     * @param {PaymentSetupDeleteArgs} args - Arguments to delete one PaymentSetup.
     * @example
     * // Delete one PaymentSetup
     * const PaymentSetup = await prisma.paymentSetup.delete({
     *   where: {
     *     // ... filter to delete one PaymentSetup
     *   }
     * })
     * 
     */
    delete<T extends PaymentSetupDeleteArgs>(args: SelectSubset<T, PaymentSetupDeleteArgs<ExtArgs>>): Prisma__PaymentSetupClient<$Result.GetResult<Prisma.$PaymentSetupPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PaymentSetup.
     * @param {PaymentSetupUpdateArgs} args - Arguments to update one PaymentSetup.
     * @example
     * // Update one PaymentSetup
     * const paymentSetup = await prisma.paymentSetup.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentSetupUpdateArgs>(args: SelectSubset<T, PaymentSetupUpdateArgs<ExtArgs>>): Prisma__PaymentSetupClient<$Result.GetResult<Prisma.$PaymentSetupPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PaymentSetups.
     * @param {PaymentSetupDeleteManyArgs} args - Arguments to filter PaymentSetups to delete.
     * @example
     * // Delete a few PaymentSetups
     * const { count } = await prisma.paymentSetup.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentSetupDeleteManyArgs>(args?: SelectSubset<T, PaymentSetupDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaymentSetups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentSetupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PaymentSetups
     * const paymentSetup = await prisma.paymentSetup.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentSetupUpdateManyArgs>(args: SelectSubset<T, PaymentSetupUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaymentSetups and returns the data updated in the database.
     * @param {PaymentSetupUpdateManyAndReturnArgs} args - Arguments to update many PaymentSetups.
     * @example
     * // Update many PaymentSetups
     * const paymentSetup = await prisma.paymentSetup.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PaymentSetups and only return the `id`
     * const paymentSetupWithIdOnly = await prisma.paymentSetup.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PaymentSetupUpdateManyAndReturnArgs>(args: SelectSubset<T, PaymentSetupUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentSetupPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PaymentSetup.
     * @param {PaymentSetupUpsertArgs} args - Arguments to update or create a PaymentSetup.
     * @example
     * // Update or create a PaymentSetup
     * const paymentSetup = await prisma.paymentSetup.upsert({
     *   create: {
     *     // ... data to create a PaymentSetup
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PaymentSetup we want to update
     *   }
     * })
     */
    upsert<T extends PaymentSetupUpsertArgs>(args: SelectSubset<T, PaymentSetupUpsertArgs<ExtArgs>>): Prisma__PaymentSetupClient<$Result.GetResult<Prisma.$PaymentSetupPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PaymentSetups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentSetupCountArgs} args - Arguments to filter PaymentSetups to count.
     * @example
     * // Count the number of PaymentSetups
     * const count = await prisma.paymentSetup.count({
     *   where: {
     *     // ... the filter for the PaymentSetups we want to count
     *   }
     * })
    **/
    count<T extends PaymentSetupCountArgs>(
      args?: Subset<T, PaymentSetupCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentSetupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PaymentSetup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentSetupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentSetupAggregateArgs>(args: Subset<T, PaymentSetupAggregateArgs>): Prisma.PrismaPromise<GetPaymentSetupAggregateType<T>>

    /**
     * Group by PaymentSetup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentSetupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentSetupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentSetupGroupByArgs['orderBy'] }
        : { orderBy?: PaymentSetupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentSetupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentSetupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PaymentSetup model
   */
  readonly fields: PaymentSetupFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PaymentSetup.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentSetupClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    school<T extends SchoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDefaultArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PaymentSetup model
   */
  interface PaymentSetupFieldRefs {
    readonly id: FieldRef<"PaymentSetup", 'String'>
    readonly amount: FieldRef<"PaymentSetup", 'Int'>
    readonly fees: FieldRef<"PaymentSetup", 'Int'>
    readonly partpayment: FieldRef<"PaymentSetup", 'Boolean'>
    readonly session: FieldRef<"PaymentSetup", 'String'>
    readonly term: FieldRef<"PaymentSetup", 'String'>
    readonly schoolid: FieldRef<"PaymentSetup", 'String'>
    readonly createdAt: FieldRef<"PaymentSetup", 'DateTime'>
    readonly updateAt: FieldRef<"PaymentSetup", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PaymentSetup findUnique
   */
  export type PaymentSetupFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentSetup
     */
    select?: PaymentSetupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentSetup
     */
    omit?: PaymentSetupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentSetupInclude<ExtArgs> | null
    /**
     * Filter, which PaymentSetup to fetch.
     */
    where: PaymentSetupWhereUniqueInput
  }

  /**
   * PaymentSetup findUniqueOrThrow
   */
  export type PaymentSetupFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentSetup
     */
    select?: PaymentSetupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentSetup
     */
    omit?: PaymentSetupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentSetupInclude<ExtArgs> | null
    /**
     * Filter, which PaymentSetup to fetch.
     */
    where: PaymentSetupWhereUniqueInput
  }

  /**
   * PaymentSetup findFirst
   */
  export type PaymentSetupFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentSetup
     */
    select?: PaymentSetupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentSetup
     */
    omit?: PaymentSetupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentSetupInclude<ExtArgs> | null
    /**
     * Filter, which PaymentSetup to fetch.
     */
    where?: PaymentSetupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentSetups to fetch.
     */
    orderBy?: PaymentSetupOrderByWithRelationInput | PaymentSetupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentSetups.
     */
    cursor?: PaymentSetupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentSetups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentSetups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentSetups.
     */
    distinct?: PaymentSetupScalarFieldEnum | PaymentSetupScalarFieldEnum[]
  }

  /**
   * PaymentSetup findFirstOrThrow
   */
  export type PaymentSetupFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentSetup
     */
    select?: PaymentSetupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentSetup
     */
    omit?: PaymentSetupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentSetupInclude<ExtArgs> | null
    /**
     * Filter, which PaymentSetup to fetch.
     */
    where?: PaymentSetupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentSetups to fetch.
     */
    orderBy?: PaymentSetupOrderByWithRelationInput | PaymentSetupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentSetups.
     */
    cursor?: PaymentSetupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentSetups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentSetups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentSetups.
     */
    distinct?: PaymentSetupScalarFieldEnum | PaymentSetupScalarFieldEnum[]
  }

  /**
   * PaymentSetup findMany
   */
  export type PaymentSetupFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentSetup
     */
    select?: PaymentSetupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentSetup
     */
    omit?: PaymentSetupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentSetupInclude<ExtArgs> | null
    /**
     * Filter, which PaymentSetups to fetch.
     */
    where?: PaymentSetupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentSetups to fetch.
     */
    orderBy?: PaymentSetupOrderByWithRelationInput | PaymentSetupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PaymentSetups.
     */
    cursor?: PaymentSetupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentSetups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentSetups.
     */
    skip?: number
    distinct?: PaymentSetupScalarFieldEnum | PaymentSetupScalarFieldEnum[]
  }

  /**
   * PaymentSetup create
   */
  export type PaymentSetupCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentSetup
     */
    select?: PaymentSetupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentSetup
     */
    omit?: PaymentSetupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentSetupInclude<ExtArgs> | null
    /**
     * The data needed to create a PaymentSetup.
     */
    data: XOR<PaymentSetupCreateInput, PaymentSetupUncheckedCreateInput>
  }

  /**
   * PaymentSetup createMany
   */
  export type PaymentSetupCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PaymentSetups.
     */
    data: PaymentSetupCreateManyInput | PaymentSetupCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PaymentSetup createManyAndReturn
   */
  export type PaymentSetupCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentSetup
     */
    select?: PaymentSetupSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentSetup
     */
    omit?: PaymentSetupOmit<ExtArgs> | null
    /**
     * The data used to create many PaymentSetups.
     */
    data: PaymentSetupCreateManyInput | PaymentSetupCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentSetupIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PaymentSetup update
   */
  export type PaymentSetupUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentSetup
     */
    select?: PaymentSetupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentSetup
     */
    omit?: PaymentSetupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentSetupInclude<ExtArgs> | null
    /**
     * The data needed to update a PaymentSetup.
     */
    data: XOR<PaymentSetupUpdateInput, PaymentSetupUncheckedUpdateInput>
    /**
     * Choose, which PaymentSetup to update.
     */
    where: PaymentSetupWhereUniqueInput
  }

  /**
   * PaymentSetup updateMany
   */
  export type PaymentSetupUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PaymentSetups.
     */
    data: XOR<PaymentSetupUpdateManyMutationInput, PaymentSetupUncheckedUpdateManyInput>
    /**
     * Filter which PaymentSetups to update
     */
    where?: PaymentSetupWhereInput
    /**
     * Limit how many PaymentSetups to update.
     */
    limit?: number
  }

  /**
   * PaymentSetup updateManyAndReturn
   */
  export type PaymentSetupUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentSetup
     */
    select?: PaymentSetupSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentSetup
     */
    omit?: PaymentSetupOmit<ExtArgs> | null
    /**
     * The data used to update PaymentSetups.
     */
    data: XOR<PaymentSetupUpdateManyMutationInput, PaymentSetupUncheckedUpdateManyInput>
    /**
     * Filter which PaymentSetups to update
     */
    where?: PaymentSetupWhereInput
    /**
     * Limit how many PaymentSetups to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentSetupIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PaymentSetup upsert
   */
  export type PaymentSetupUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentSetup
     */
    select?: PaymentSetupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentSetup
     */
    omit?: PaymentSetupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentSetupInclude<ExtArgs> | null
    /**
     * The filter to search for the PaymentSetup to update in case it exists.
     */
    where: PaymentSetupWhereUniqueInput
    /**
     * In case the PaymentSetup found by the `where` argument doesn't exist, create a new PaymentSetup with this data.
     */
    create: XOR<PaymentSetupCreateInput, PaymentSetupUncheckedCreateInput>
    /**
     * In case the PaymentSetup was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentSetupUpdateInput, PaymentSetupUncheckedUpdateInput>
  }

  /**
   * PaymentSetup delete
   */
  export type PaymentSetupDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentSetup
     */
    select?: PaymentSetupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentSetup
     */
    omit?: PaymentSetupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentSetupInclude<ExtArgs> | null
    /**
     * Filter which PaymentSetup to delete.
     */
    where: PaymentSetupWhereUniqueInput
  }

  /**
   * PaymentSetup deleteMany
   */
  export type PaymentSetupDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentSetups to delete
     */
    where?: PaymentSetupWhereInput
    /**
     * Limit how many PaymentSetups to delete.
     */
    limit?: number
  }

  /**
   * PaymentSetup without action
   */
  export type PaymentSetupDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentSetup
     */
    select?: PaymentSetupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentSetup
     */
    omit?: PaymentSetupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentSetupInclude<ExtArgs> | null
  }


  /**
   * Model Term
   */

  export type AggregateTerm = {
    _count: TermCountAggregateOutputType | null
    _avg: TermAvgAggregateOutputType | null
    _sum: TermSumAggregateOutputType | null
    _min: TermMinAggregateOutputType | null
    _max: TermMaxAggregateOutputType | null
  }

  export type TermAvgAggregateOutputType = {
    daysopen: number | null
  }

  export type TermSumAggregateOutputType = {
    daysopen: number | null
  }

  export type TermMinAggregateOutputType = {
    id: string | null
    start: Date | null
    end: Date | null
    nextterm: Date | null
    daysopen: number | null
    session: string | null
    term: $Enums.Terms | null
    status: $Enums.TermStatus | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type TermMaxAggregateOutputType = {
    id: string | null
    start: Date | null
    end: Date | null
    nextterm: Date | null
    daysopen: number | null
    session: string | null
    term: $Enums.Terms | null
    status: $Enums.TermStatus | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type TermCountAggregateOutputType = {
    id: number
    start: number
    end: number
    nextterm: number
    daysopen: number
    session: number
    term: number
    status: number
    createdAt: number
    updateAt: number
    _all: number
  }


  export type TermAvgAggregateInputType = {
    daysopen?: true
  }

  export type TermSumAggregateInputType = {
    daysopen?: true
  }

  export type TermMinAggregateInputType = {
    id?: true
    start?: true
    end?: true
    nextterm?: true
    daysopen?: true
    session?: true
    term?: true
    status?: true
    createdAt?: true
    updateAt?: true
  }

  export type TermMaxAggregateInputType = {
    id?: true
    start?: true
    end?: true
    nextterm?: true
    daysopen?: true
    session?: true
    term?: true
    status?: true
    createdAt?: true
    updateAt?: true
  }

  export type TermCountAggregateInputType = {
    id?: true
    start?: true
    end?: true
    nextterm?: true
    daysopen?: true
    session?: true
    term?: true
    status?: true
    createdAt?: true
    updateAt?: true
    _all?: true
  }

  export type TermAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Term to aggregate.
     */
    where?: TermWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Terms to fetch.
     */
    orderBy?: TermOrderByWithRelationInput | TermOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TermWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Terms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Terms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Terms
    **/
    _count?: true | TermCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TermAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TermSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TermMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TermMaxAggregateInputType
  }

  export type GetTermAggregateType<T extends TermAggregateArgs> = {
        [P in keyof T & keyof AggregateTerm]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTerm[P]>
      : GetScalarType<T[P], AggregateTerm[P]>
  }




  export type TermGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TermWhereInput
    orderBy?: TermOrderByWithAggregationInput | TermOrderByWithAggregationInput[]
    by: TermScalarFieldEnum[] | TermScalarFieldEnum
    having?: TermScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TermCountAggregateInputType | true
    _avg?: TermAvgAggregateInputType
    _sum?: TermSumAggregateInputType
    _min?: TermMinAggregateInputType
    _max?: TermMaxAggregateInputType
  }

  export type TermGroupByOutputType = {
    id: string
    start: Date
    end: Date
    nextterm: Date
    daysopen: number
    session: string
    term: $Enums.Terms
    status: $Enums.TermStatus
    createdAt: Date
    updateAt: Date
    _count: TermCountAggregateOutputType | null
    _avg: TermAvgAggregateOutputType | null
    _sum: TermSumAggregateOutputType | null
    _min: TermMinAggregateOutputType | null
    _max: TermMaxAggregateOutputType | null
  }

  type GetTermGroupByPayload<T extends TermGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TermGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TermGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TermGroupByOutputType[P]>
            : GetScalarType<T[P], TermGroupByOutputType[P]>
        }
      >
    >


  export type TermSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    start?: boolean
    end?: boolean
    nextterm?: boolean
    daysopen?: boolean
    session?: boolean
    term?: boolean
    status?: boolean
    createdAt?: boolean
    updateAt?: boolean
  }, ExtArgs["result"]["term"]>

  export type TermSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    start?: boolean
    end?: boolean
    nextterm?: boolean
    daysopen?: boolean
    session?: boolean
    term?: boolean
    status?: boolean
    createdAt?: boolean
    updateAt?: boolean
  }, ExtArgs["result"]["term"]>

  export type TermSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    start?: boolean
    end?: boolean
    nextterm?: boolean
    daysopen?: boolean
    session?: boolean
    term?: boolean
    status?: boolean
    createdAt?: boolean
    updateAt?: boolean
  }, ExtArgs["result"]["term"]>

  export type TermSelectScalar = {
    id?: boolean
    start?: boolean
    end?: boolean
    nextterm?: boolean
    daysopen?: boolean
    session?: boolean
    term?: boolean
    status?: boolean
    createdAt?: boolean
    updateAt?: boolean
  }

  export type TermOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "start" | "end" | "nextterm" | "daysopen" | "session" | "term" | "status" | "createdAt" | "updateAt", ExtArgs["result"]["term"]>

  export type $TermPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Term"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      start: Date
      end: Date
      nextterm: Date
      daysopen: number
      session: string
      term: $Enums.Terms
      status: $Enums.TermStatus
      createdAt: Date
      updateAt: Date
    }, ExtArgs["result"]["term"]>
    composites: {}
  }

  type TermGetPayload<S extends boolean | null | undefined | TermDefaultArgs> = $Result.GetResult<Prisma.$TermPayload, S>

  type TermCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TermFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TermCountAggregateInputType | true
    }

  export interface TermDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Term'], meta: { name: 'Term' } }
    /**
     * Find zero or one Term that matches the filter.
     * @param {TermFindUniqueArgs} args - Arguments to find a Term
     * @example
     * // Get one Term
     * const term = await prisma.term.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TermFindUniqueArgs>(args: SelectSubset<T, TermFindUniqueArgs<ExtArgs>>): Prisma__TermClient<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Term that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TermFindUniqueOrThrowArgs} args - Arguments to find a Term
     * @example
     * // Get one Term
     * const term = await prisma.term.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TermFindUniqueOrThrowArgs>(args: SelectSubset<T, TermFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TermClient<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Term that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermFindFirstArgs} args - Arguments to find a Term
     * @example
     * // Get one Term
     * const term = await prisma.term.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TermFindFirstArgs>(args?: SelectSubset<T, TermFindFirstArgs<ExtArgs>>): Prisma__TermClient<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Term that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermFindFirstOrThrowArgs} args - Arguments to find a Term
     * @example
     * // Get one Term
     * const term = await prisma.term.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TermFindFirstOrThrowArgs>(args?: SelectSubset<T, TermFindFirstOrThrowArgs<ExtArgs>>): Prisma__TermClient<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Terms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Terms
     * const terms = await prisma.term.findMany()
     * 
     * // Get first 10 Terms
     * const terms = await prisma.term.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const termWithIdOnly = await prisma.term.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TermFindManyArgs>(args?: SelectSubset<T, TermFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Term.
     * @param {TermCreateArgs} args - Arguments to create a Term.
     * @example
     * // Create one Term
     * const Term = await prisma.term.create({
     *   data: {
     *     // ... data to create a Term
     *   }
     * })
     * 
     */
    create<T extends TermCreateArgs>(args: SelectSubset<T, TermCreateArgs<ExtArgs>>): Prisma__TermClient<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Terms.
     * @param {TermCreateManyArgs} args - Arguments to create many Terms.
     * @example
     * // Create many Terms
     * const term = await prisma.term.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TermCreateManyArgs>(args?: SelectSubset<T, TermCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Terms and returns the data saved in the database.
     * @param {TermCreateManyAndReturnArgs} args - Arguments to create many Terms.
     * @example
     * // Create many Terms
     * const term = await prisma.term.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Terms and only return the `id`
     * const termWithIdOnly = await prisma.term.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TermCreateManyAndReturnArgs>(args?: SelectSubset<T, TermCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Term.
     * @param {TermDeleteArgs} args - Arguments to delete one Term.
     * @example
     * // Delete one Term
     * const Term = await prisma.term.delete({
     *   where: {
     *     // ... filter to delete one Term
     *   }
     * })
     * 
     */
    delete<T extends TermDeleteArgs>(args: SelectSubset<T, TermDeleteArgs<ExtArgs>>): Prisma__TermClient<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Term.
     * @param {TermUpdateArgs} args - Arguments to update one Term.
     * @example
     * // Update one Term
     * const term = await prisma.term.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TermUpdateArgs>(args: SelectSubset<T, TermUpdateArgs<ExtArgs>>): Prisma__TermClient<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Terms.
     * @param {TermDeleteManyArgs} args - Arguments to filter Terms to delete.
     * @example
     * // Delete a few Terms
     * const { count } = await prisma.term.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TermDeleteManyArgs>(args?: SelectSubset<T, TermDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Terms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Terms
     * const term = await prisma.term.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TermUpdateManyArgs>(args: SelectSubset<T, TermUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Terms and returns the data updated in the database.
     * @param {TermUpdateManyAndReturnArgs} args - Arguments to update many Terms.
     * @example
     * // Update many Terms
     * const term = await prisma.term.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Terms and only return the `id`
     * const termWithIdOnly = await prisma.term.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TermUpdateManyAndReturnArgs>(args: SelectSubset<T, TermUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Term.
     * @param {TermUpsertArgs} args - Arguments to update or create a Term.
     * @example
     * // Update or create a Term
     * const term = await prisma.term.upsert({
     *   create: {
     *     // ... data to create a Term
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Term we want to update
     *   }
     * })
     */
    upsert<T extends TermUpsertArgs>(args: SelectSubset<T, TermUpsertArgs<ExtArgs>>): Prisma__TermClient<$Result.GetResult<Prisma.$TermPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Terms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermCountArgs} args - Arguments to filter Terms to count.
     * @example
     * // Count the number of Terms
     * const count = await prisma.term.count({
     *   where: {
     *     // ... the filter for the Terms we want to count
     *   }
     * })
    **/
    count<T extends TermCountArgs>(
      args?: Subset<T, TermCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TermCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Term.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TermAggregateArgs>(args: Subset<T, TermAggregateArgs>): Prisma.PrismaPromise<GetTermAggregateType<T>>

    /**
     * Group by Term.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TermGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TermGroupByArgs['orderBy'] }
        : { orderBy?: TermGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TermGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTermGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Term model
   */
  readonly fields: TermFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Term.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TermClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Term model
   */
  interface TermFieldRefs {
    readonly id: FieldRef<"Term", 'String'>
    readonly start: FieldRef<"Term", 'DateTime'>
    readonly end: FieldRef<"Term", 'DateTime'>
    readonly nextterm: FieldRef<"Term", 'DateTime'>
    readonly daysopen: FieldRef<"Term", 'Int'>
    readonly session: FieldRef<"Term", 'String'>
    readonly term: FieldRef<"Term", 'Terms'>
    readonly status: FieldRef<"Term", 'TermStatus'>
    readonly createdAt: FieldRef<"Term", 'DateTime'>
    readonly updateAt: FieldRef<"Term", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Term findUnique
   */
  export type TermFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Term
     */
    omit?: TermOmit<ExtArgs> | null
    /**
     * Filter, which Term to fetch.
     */
    where: TermWhereUniqueInput
  }

  /**
   * Term findUniqueOrThrow
   */
  export type TermFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Term
     */
    omit?: TermOmit<ExtArgs> | null
    /**
     * Filter, which Term to fetch.
     */
    where: TermWhereUniqueInput
  }

  /**
   * Term findFirst
   */
  export type TermFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Term
     */
    omit?: TermOmit<ExtArgs> | null
    /**
     * Filter, which Term to fetch.
     */
    where?: TermWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Terms to fetch.
     */
    orderBy?: TermOrderByWithRelationInput | TermOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Terms.
     */
    cursor?: TermWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Terms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Terms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Terms.
     */
    distinct?: TermScalarFieldEnum | TermScalarFieldEnum[]
  }

  /**
   * Term findFirstOrThrow
   */
  export type TermFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Term
     */
    omit?: TermOmit<ExtArgs> | null
    /**
     * Filter, which Term to fetch.
     */
    where?: TermWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Terms to fetch.
     */
    orderBy?: TermOrderByWithRelationInput | TermOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Terms.
     */
    cursor?: TermWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Terms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Terms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Terms.
     */
    distinct?: TermScalarFieldEnum | TermScalarFieldEnum[]
  }

  /**
   * Term findMany
   */
  export type TermFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Term
     */
    omit?: TermOmit<ExtArgs> | null
    /**
     * Filter, which Terms to fetch.
     */
    where?: TermWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Terms to fetch.
     */
    orderBy?: TermOrderByWithRelationInput | TermOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Terms.
     */
    cursor?: TermWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Terms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Terms.
     */
    skip?: number
    distinct?: TermScalarFieldEnum | TermScalarFieldEnum[]
  }

  /**
   * Term create
   */
  export type TermCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Term
     */
    omit?: TermOmit<ExtArgs> | null
    /**
     * The data needed to create a Term.
     */
    data: XOR<TermCreateInput, TermUncheckedCreateInput>
  }

  /**
   * Term createMany
   */
  export type TermCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Terms.
     */
    data: TermCreateManyInput | TermCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Term createManyAndReturn
   */
  export type TermCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Term
     */
    omit?: TermOmit<ExtArgs> | null
    /**
     * The data used to create many Terms.
     */
    data: TermCreateManyInput | TermCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Term update
   */
  export type TermUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Term
     */
    omit?: TermOmit<ExtArgs> | null
    /**
     * The data needed to update a Term.
     */
    data: XOR<TermUpdateInput, TermUncheckedUpdateInput>
    /**
     * Choose, which Term to update.
     */
    where: TermWhereUniqueInput
  }

  /**
   * Term updateMany
   */
  export type TermUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Terms.
     */
    data: XOR<TermUpdateManyMutationInput, TermUncheckedUpdateManyInput>
    /**
     * Filter which Terms to update
     */
    where?: TermWhereInput
    /**
     * Limit how many Terms to update.
     */
    limit?: number
  }

  /**
   * Term updateManyAndReturn
   */
  export type TermUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Term
     */
    omit?: TermOmit<ExtArgs> | null
    /**
     * The data used to update Terms.
     */
    data: XOR<TermUpdateManyMutationInput, TermUncheckedUpdateManyInput>
    /**
     * Filter which Terms to update
     */
    where?: TermWhereInput
    /**
     * Limit how many Terms to update.
     */
    limit?: number
  }

  /**
   * Term upsert
   */
  export type TermUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Term
     */
    omit?: TermOmit<ExtArgs> | null
    /**
     * The filter to search for the Term to update in case it exists.
     */
    where: TermWhereUniqueInput
    /**
     * In case the Term found by the `where` argument doesn't exist, create a new Term with this data.
     */
    create: XOR<TermCreateInput, TermUncheckedCreateInput>
    /**
     * In case the Term was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TermUpdateInput, TermUncheckedUpdateInput>
  }

  /**
   * Term delete
   */
  export type TermDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Term
     */
    omit?: TermOmit<ExtArgs> | null
    /**
     * Filter which Term to delete.
     */
    where: TermWhereUniqueInput
  }

  /**
   * Term deleteMany
   */
  export type TermDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Terms to delete
     */
    where?: TermWhereInput
    /**
     * Limit how many Terms to delete.
     */
    limit?: number
  }

  /**
   * Term without action
   */
  export type TermDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Term
     */
    select?: TermSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Term
     */
    omit?: TermOmit<ExtArgs> | null
  }


  /**
   * Model Payment
   */

  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentAvgAggregateOutputType = {
    amount: number | null
  }

  export type PaymentSumAggregateOutputType = {
    amount: number | null
  }

  export type PaymentMinAggregateOutputType = {
    id: string | null
    session: string | null
    term: $Enums.Terms | null
    amount: number | null
    schoolid: string | null
    studentid: string | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type PaymentMaxAggregateOutputType = {
    id: string | null
    session: string | null
    term: $Enums.Terms | null
    amount: number | null
    schoolid: string | null
    studentid: string | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type PaymentCountAggregateOutputType = {
    id: number
    session: number
    term: number
    amount: number
    schoolid: number
    studentid: number
    createdAt: number
    updateAt: number
    _all: number
  }


  export type PaymentAvgAggregateInputType = {
    amount?: true
  }

  export type PaymentSumAggregateInputType = {
    amount?: true
  }

  export type PaymentMinAggregateInputType = {
    id?: true
    session?: true
    term?: true
    amount?: true
    schoolid?: true
    studentid?: true
    createdAt?: true
    updateAt?: true
  }

  export type PaymentMaxAggregateInputType = {
    id?: true
    session?: true
    term?: true
    amount?: true
    schoolid?: true
    studentid?: true
    createdAt?: true
    updateAt?: true
  }

  export type PaymentCountAggregateInputType = {
    id?: true
    session?: true
    term?: true
    amount?: true
    schoolid?: true
    studentid?: true
    createdAt?: true
    updateAt?: true
    _all?: true
  }

  export type PaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payment to aggregate.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type PaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithAggregationInput | PaymentOrderByWithAggregationInput[]
    by: PaymentScalarFieldEnum[] | PaymentScalarFieldEnum
    having?: PaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _avg?: PaymentAvgAggregateInputType
    _sum?: PaymentSumAggregateInputType
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }

  export type PaymentGroupByOutputType = {
    id: string
    session: string
    term: $Enums.Terms
    amount: number
    schoolid: string
    studentid: string
    createdAt: Date
    updateAt: Date
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends PaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type PaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    session?: boolean
    term?: boolean
    amount?: boolean
    schoolid?: boolean
    studentid?: boolean
    createdAt?: boolean
    updateAt?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    session?: boolean
    term?: boolean
    amount?: boolean
    schoolid?: boolean
    studentid?: boolean
    createdAt?: boolean
    updateAt?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    session?: boolean
    term?: boolean
    amount?: boolean
    schoolid?: boolean
    studentid?: boolean
    createdAt?: boolean
    updateAt?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectScalar = {
    id?: boolean
    session?: boolean
    term?: boolean
    amount?: boolean
    schoolid?: boolean
    studentid?: boolean
    createdAt?: boolean
    updateAt?: boolean
  }

  export type PaymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "session" | "term" | "amount" | "schoolid" | "studentid" | "createdAt" | "updateAt", ExtArgs["result"]["payment"]>
  export type PaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type PaymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type PaymentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }

  export type $PaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Payment"
    objects: {
      school: Prisma.$SchoolPayload<ExtArgs>
      student: Prisma.$StudentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      session: string
      term: $Enums.Terms
      amount: number
      schoolid: string
      studentid: string
      createdAt: Date
      updateAt: Date
    }, ExtArgs["result"]["payment"]>
    composites: {}
  }

  type PaymentGetPayload<S extends boolean | null | undefined | PaymentDefaultArgs> = $Result.GetResult<Prisma.$PaymentPayload, S>

  type PaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentCountAggregateInputType | true
    }

  export interface PaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Payment'], meta: { name: 'Payment' } }
    /**
     * Find zero or one Payment that matches the filter.
     * @param {PaymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentFindUniqueArgs>(args: SelectSubset<T, PaymentFindUniqueArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Payment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PaymentFindUniqueOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentFindFirstArgs>(args?: SelectSubset<T, PaymentFindFirstArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentWithIdOnly = await prisma.payment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentFindManyArgs>(args?: SelectSubset<T, PaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Payment.
     * @param {PaymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
     */
    create<T extends PaymentCreateArgs>(args: SelectSubset<T, PaymentCreateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Payments.
     * @param {PaymentCreateManyArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentCreateManyArgs>(args?: SelectSubset<T, PaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Payments and returns the data saved in the database.
     * @param {PaymentCreateManyAndReturnArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Payment.
     * @param {PaymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
     */
    delete<T extends PaymentDeleteArgs>(args: SelectSubset<T, PaymentDeleteArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Payment.
     * @param {PaymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentUpdateArgs>(args: SelectSubset<T, PaymentUpdateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Payments.
     * @param {PaymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentDeleteManyArgs>(args?: SelectSubset<T, PaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentUpdateManyArgs>(args: SelectSubset<T, PaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments and returns the data updated in the database.
     * @param {PaymentUpdateManyAndReturnArgs} args - Arguments to update many Payments.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PaymentUpdateManyAndReturnArgs>(args: SelectSubset<T, PaymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Payment.
     * @param {PaymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
     */
    upsert<T extends PaymentUpsertArgs>(args: SelectSubset<T, PaymentUpsertArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends PaymentCountArgs>(
      args?: Subset<T, PaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): Prisma.PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentGroupByArgs['orderBy'] }
        : { orderBy?: PaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Payment model
   */
  readonly fields: PaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    school<T extends SchoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDefaultArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Payment model
   */
  interface PaymentFieldRefs {
    readonly id: FieldRef<"Payment", 'String'>
    readonly session: FieldRef<"Payment", 'String'>
    readonly term: FieldRef<"Payment", 'Terms'>
    readonly amount: FieldRef<"Payment", 'Int'>
    readonly schoolid: FieldRef<"Payment", 'String'>
    readonly studentid: FieldRef<"Payment", 'String'>
    readonly createdAt: FieldRef<"Payment", 'DateTime'>
    readonly updateAt: FieldRef<"Payment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Payment findUnique
   */
  export type PaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findUniqueOrThrow
   */
  export type PaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findFirst
   */
  export type PaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findFirstOrThrow
   */
  export type PaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findMany
   */
  export type PaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payments to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment create
   */
  export type PaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a Payment.
     */
    data: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
  }

  /**
   * Payment createMany
   */
  export type PaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Payment createManyAndReturn
   */
  export type PaymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payment update
   */
  export type PaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a Payment.
     */
    data: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
    /**
     * Choose, which Payment to update.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment updateMany
   */
  export type PaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to update.
     */
    limit?: number
  }

  /**
   * Payment updateManyAndReturn
   */
  export type PaymentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payment upsert
   */
  export type PaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the Payment to update in case it exists.
     */
    where: PaymentWhereUniqueInput
    /**
     * In case the Payment found by the `where` argument doesn't exist, create a new Payment with this data.
     */
    create: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
    /**
     * In case the Payment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
  }

  /**
   * Payment delete
   */
  export type PaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter which Payment to delete.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment deleteMany
   */
  export type PaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payments to delete
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to delete.
     */
    limit?: number
  }

  /**
   * Payment without action
   */
  export type PaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
  }


  /**
   * Model Assignment
   */

  export type AggregateAssignment = {
    _count: AssignmentCountAggregateOutputType | null
    _min: AssignmentMinAggregateOutputType | null
    _max: AssignmentMaxAggregateOutputType | null
  }

  export type AssignmentMinAggregateOutputType = {
    id: string | null
    title: string | null
    text: string | null
    file: string | null
    duedate: Date | null
    graded: boolean | null
    subjectid: string | null
    teacherid: string | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type AssignmentMaxAggregateOutputType = {
    id: string | null
    title: string | null
    text: string | null
    file: string | null
    duedate: Date | null
    graded: boolean | null
    subjectid: string | null
    teacherid: string | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type AssignmentCountAggregateOutputType = {
    id: number
    title: number
    text: number
    file: number
    duedate: number
    graded: number
    subjectid: number
    teacherid: number
    createdAt: number
    updateAt: number
    _all: number
  }


  export type AssignmentMinAggregateInputType = {
    id?: true
    title?: true
    text?: true
    file?: true
    duedate?: true
    graded?: true
    subjectid?: true
    teacherid?: true
    createdAt?: true
    updateAt?: true
  }

  export type AssignmentMaxAggregateInputType = {
    id?: true
    title?: true
    text?: true
    file?: true
    duedate?: true
    graded?: true
    subjectid?: true
    teacherid?: true
    createdAt?: true
    updateAt?: true
  }

  export type AssignmentCountAggregateInputType = {
    id?: true
    title?: true
    text?: true
    file?: true
    duedate?: true
    graded?: true
    subjectid?: true
    teacherid?: true
    createdAt?: true
    updateAt?: true
    _all?: true
  }

  export type AssignmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Assignment to aggregate.
     */
    where?: AssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assignments to fetch.
     */
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Assignments
    **/
    _count?: true | AssignmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssignmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssignmentMaxAggregateInputType
  }

  export type GetAssignmentAggregateType<T extends AssignmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAssignment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssignment[P]>
      : GetScalarType<T[P], AggregateAssignment[P]>
  }




  export type AssignmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssignmentWhereInput
    orderBy?: AssignmentOrderByWithAggregationInput | AssignmentOrderByWithAggregationInput[]
    by: AssignmentScalarFieldEnum[] | AssignmentScalarFieldEnum
    having?: AssignmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssignmentCountAggregateInputType | true
    _min?: AssignmentMinAggregateInputType
    _max?: AssignmentMaxAggregateInputType
  }

  export type AssignmentGroupByOutputType = {
    id: string
    title: string
    text: string
    file: string
    duedate: Date
    graded: boolean
    subjectid: string
    teacherid: string
    createdAt: Date
    updateAt: Date
    _count: AssignmentCountAggregateOutputType | null
    _min: AssignmentMinAggregateOutputType | null
    _max: AssignmentMaxAggregateOutputType | null
  }

  type GetAssignmentGroupByPayload<T extends AssignmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssignmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssignmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssignmentGroupByOutputType[P]>
            : GetScalarType<T[P], AssignmentGroupByOutputType[P]>
        }
      >
    >


  export type AssignmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    text?: boolean
    file?: boolean
    duedate?: boolean
    graded?: boolean
    subjectid?: boolean
    teacherid?: boolean
    createdAt?: boolean
    updateAt?: boolean
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    submissions?: boolean | Assignment$submissionsArgs<ExtArgs>
    students?: boolean | Assignment$studentsArgs<ExtArgs>
    _count?: boolean | AssignmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assignment"]>

  export type AssignmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    text?: boolean
    file?: boolean
    duedate?: boolean
    graded?: boolean
    subjectid?: boolean
    teacherid?: boolean
    createdAt?: boolean
    updateAt?: boolean
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assignment"]>

  export type AssignmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    text?: boolean
    file?: boolean
    duedate?: boolean
    graded?: boolean
    subjectid?: boolean
    teacherid?: boolean
    createdAt?: boolean
    updateAt?: boolean
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assignment"]>

  export type AssignmentSelectScalar = {
    id?: boolean
    title?: boolean
    text?: boolean
    file?: boolean
    duedate?: boolean
    graded?: boolean
    subjectid?: boolean
    teacherid?: boolean
    createdAt?: boolean
    updateAt?: boolean
  }

  export type AssignmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "text" | "file" | "duedate" | "graded" | "subjectid" | "teacherid" | "createdAt" | "updateAt", ExtArgs["result"]["assignment"]>
  export type AssignmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    submissions?: boolean | Assignment$submissionsArgs<ExtArgs>
    students?: boolean | Assignment$studentsArgs<ExtArgs>
    _count?: boolean | AssignmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AssignmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
  }
  export type AssignmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
  }

  export type $AssignmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Assignment"
    objects: {
      subject: Prisma.$SubjectPayload<ExtArgs>
      teacher: Prisma.$TeacherPayload<ExtArgs>
      submissions: Prisma.$SubmissionPayload<ExtArgs>[]
      students: Prisma.$StudentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      text: string
      file: string
      duedate: Date
      graded: boolean
      subjectid: string
      teacherid: string
      createdAt: Date
      updateAt: Date
    }, ExtArgs["result"]["assignment"]>
    composites: {}
  }

  type AssignmentGetPayload<S extends boolean | null | undefined | AssignmentDefaultArgs> = $Result.GetResult<Prisma.$AssignmentPayload, S>

  type AssignmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AssignmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AssignmentCountAggregateInputType | true
    }

  export interface AssignmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Assignment'], meta: { name: 'Assignment' } }
    /**
     * Find zero or one Assignment that matches the filter.
     * @param {AssignmentFindUniqueArgs} args - Arguments to find a Assignment
     * @example
     * // Get one Assignment
     * const assignment = await prisma.assignment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AssignmentFindUniqueArgs>(args: SelectSubset<T, AssignmentFindUniqueArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Assignment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AssignmentFindUniqueOrThrowArgs} args - Arguments to find a Assignment
     * @example
     * // Get one Assignment
     * const assignment = await prisma.assignment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AssignmentFindUniqueOrThrowArgs>(args: SelectSubset<T, AssignmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Assignment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentFindFirstArgs} args - Arguments to find a Assignment
     * @example
     * // Get one Assignment
     * const assignment = await prisma.assignment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AssignmentFindFirstArgs>(args?: SelectSubset<T, AssignmentFindFirstArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Assignment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentFindFirstOrThrowArgs} args - Arguments to find a Assignment
     * @example
     * // Get one Assignment
     * const assignment = await prisma.assignment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AssignmentFindFirstOrThrowArgs>(args?: SelectSubset<T, AssignmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Assignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Assignments
     * const assignments = await prisma.assignment.findMany()
     * 
     * // Get first 10 Assignments
     * const assignments = await prisma.assignment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assignmentWithIdOnly = await prisma.assignment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AssignmentFindManyArgs>(args?: SelectSubset<T, AssignmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Assignment.
     * @param {AssignmentCreateArgs} args - Arguments to create a Assignment.
     * @example
     * // Create one Assignment
     * const Assignment = await prisma.assignment.create({
     *   data: {
     *     // ... data to create a Assignment
     *   }
     * })
     * 
     */
    create<T extends AssignmentCreateArgs>(args: SelectSubset<T, AssignmentCreateArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Assignments.
     * @param {AssignmentCreateManyArgs} args - Arguments to create many Assignments.
     * @example
     * // Create many Assignments
     * const assignment = await prisma.assignment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AssignmentCreateManyArgs>(args?: SelectSubset<T, AssignmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Assignments and returns the data saved in the database.
     * @param {AssignmentCreateManyAndReturnArgs} args - Arguments to create many Assignments.
     * @example
     * // Create many Assignments
     * const assignment = await prisma.assignment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Assignments and only return the `id`
     * const assignmentWithIdOnly = await prisma.assignment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AssignmentCreateManyAndReturnArgs>(args?: SelectSubset<T, AssignmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Assignment.
     * @param {AssignmentDeleteArgs} args - Arguments to delete one Assignment.
     * @example
     * // Delete one Assignment
     * const Assignment = await prisma.assignment.delete({
     *   where: {
     *     // ... filter to delete one Assignment
     *   }
     * })
     * 
     */
    delete<T extends AssignmentDeleteArgs>(args: SelectSubset<T, AssignmentDeleteArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Assignment.
     * @param {AssignmentUpdateArgs} args - Arguments to update one Assignment.
     * @example
     * // Update one Assignment
     * const assignment = await prisma.assignment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AssignmentUpdateArgs>(args: SelectSubset<T, AssignmentUpdateArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Assignments.
     * @param {AssignmentDeleteManyArgs} args - Arguments to filter Assignments to delete.
     * @example
     * // Delete a few Assignments
     * const { count } = await prisma.assignment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AssignmentDeleteManyArgs>(args?: SelectSubset<T, AssignmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Assignments
     * const assignment = await prisma.assignment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AssignmentUpdateManyArgs>(args: SelectSubset<T, AssignmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assignments and returns the data updated in the database.
     * @param {AssignmentUpdateManyAndReturnArgs} args - Arguments to update many Assignments.
     * @example
     * // Update many Assignments
     * const assignment = await prisma.assignment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Assignments and only return the `id`
     * const assignmentWithIdOnly = await prisma.assignment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AssignmentUpdateManyAndReturnArgs>(args: SelectSubset<T, AssignmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Assignment.
     * @param {AssignmentUpsertArgs} args - Arguments to update or create a Assignment.
     * @example
     * // Update or create a Assignment
     * const assignment = await prisma.assignment.upsert({
     *   create: {
     *     // ... data to create a Assignment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Assignment we want to update
     *   }
     * })
     */
    upsert<T extends AssignmentUpsertArgs>(args: SelectSubset<T, AssignmentUpsertArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Assignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentCountArgs} args - Arguments to filter Assignments to count.
     * @example
     * // Count the number of Assignments
     * const count = await prisma.assignment.count({
     *   where: {
     *     // ... the filter for the Assignments we want to count
     *   }
     * })
    **/
    count<T extends AssignmentCountArgs>(
      args?: Subset<T, AssignmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssignmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Assignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssignmentAggregateArgs>(args: Subset<T, AssignmentAggregateArgs>): Prisma.PrismaPromise<GetAssignmentAggregateType<T>>

    /**
     * Group by Assignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssignmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssignmentGroupByArgs['orderBy'] }
        : { orderBy?: AssignmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Assignment model
   */
  readonly fields: AssignmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Assignment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssignmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subject<T extends SubjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubjectDefaultArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    teacher<T extends TeacherDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeacherDefaultArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    submissions<T extends Assignment$submissionsArgs<ExtArgs> = {}>(args?: Subset<T, Assignment$submissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    students<T extends Assignment$studentsArgs<ExtArgs> = {}>(args?: Subset<T, Assignment$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Assignment model
   */
  interface AssignmentFieldRefs {
    readonly id: FieldRef<"Assignment", 'String'>
    readonly title: FieldRef<"Assignment", 'String'>
    readonly text: FieldRef<"Assignment", 'String'>
    readonly file: FieldRef<"Assignment", 'String'>
    readonly duedate: FieldRef<"Assignment", 'DateTime'>
    readonly graded: FieldRef<"Assignment", 'Boolean'>
    readonly subjectid: FieldRef<"Assignment", 'String'>
    readonly teacherid: FieldRef<"Assignment", 'String'>
    readonly createdAt: FieldRef<"Assignment", 'DateTime'>
    readonly updateAt: FieldRef<"Assignment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Assignment findUnique
   */
  export type AssignmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter, which Assignment to fetch.
     */
    where: AssignmentWhereUniqueInput
  }

  /**
   * Assignment findUniqueOrThrow
   */
  export type AssignmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter, which Assignment to fetch.
     */
    where: AssignmentWhereUniqueInput
  }

  /**
   * Assignment findFirst
   */
  export type AssignmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter, which Assignment to fetch.
     */
    where?: AssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assignments to fetch.
     */
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assignments.
     */
    cursor?: AssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assignments.
     */
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }

  /**
   * Assignment findFirstOrThrow
   */
  export type AssignmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter, which Assignment to fetch.
     */
    where?: AssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assignments to fetch.
     */
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assignments.
     */
    cursor?: AssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assignments.
     */
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }

  /**
   * Assignment findMany
   */
  export type AssignmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter, which Assignments to fetch.
     */
    where?: AssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assignments to fetch.
     */
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Assignments.
     */
    cursor?: AssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assignments.
     */
    skip?: number
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }

  /**
   * Assignment create
   */
  export type AssignmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Assignment.
     */
    data: XOR<AssignmentCreateInput, AssignmentUncheckedCreateInput>
  }

  /**
   * Assignment createMany
   */
  export type AssignmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Assignments.
     */
    data: AssignmentCreateManyInput | AssignmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Assignment createManyAndReturn
   */
  export type AssignmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * The data used to create many Assignments.
     */
    data: AssignmentCreateManyInput | AssignmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Assignment update
   */
  export type AssignmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Assignment.
     */
    data: XOR<AssignmentUpdateInput, AssignmentUncheckedUpdateInput>
    /**
     * Choose, which Assignment to update.
     */
    where: AssignmentWhereUniqueInput
  }

  /**
   * Assignment updateMany
   */
  export type AssignmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Assignments.
     */
    data: XOR<AssignmentUpdateManyMutationInput, AssignmentUncheckedUpdateManyInput>
    /**
     * Filter which Assignments to update
     */
    where?: AssignmentWhereInput
    /**
     * Limit how many Assignments to update.
     */
    limit?: number
  }

  /**
   * Assignment updateManyAndReturn
   */
  export type AssignmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * The data used to update Assignments.
     */
    data: XOR<AssignmentUpdateManyMutationInput, AssignmentUncheckedUpdateManyInput>
    /**
     * Filter which Assignments to update
     */
    where?: AssignmentWhereInput
    /**
     * Limit how many Assignments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Assignment upsert
   */
  export type AssignmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Assignment to update in case it exists.
     */
    where: AssignmentWhereUniqueInput
    /**
     * In case the Assignment found by the `where` argument doesn't exist, create a new Assignment with this data.
     */
    create: XOR<AssignmentCreateInput, AssignmentUncheckedCreateInput>
    /**
     * In case the Assignment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssignmentUpdateInput, AssignmentUncheckedUpdateInput>
  }

  /**
   * Assignment delete
   */
  export type AssignmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter which Assignment to delete.
     */
    where: AssignmentWhereUniqueInput
  }

  /**
   * Assignment deleteMany
   */
  export type AssignmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Assignments to delete
     */
    where?: AssignmentWhereInput
    /**
     * Limit how many Assignments to delete.
     */
    limit?: number
  }

  /**
   * Assignment.submissions
   */
  export type Assignment$submissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    where?: SubmissionWhereInput
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    cursor?: SubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Assignment.students
   */
  export type Assignment$studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    cursor?: StudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Assignment without action
   */
  export type AssignmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
  }


  /**
   * Model Test
   */

  export type AggregateTest = {
    _count: TestCountAggregateOutputType | null
    _avg: TestAvgAggregateOutputType | null
    _sum: TestSumAggregateOutputType | null
    _min: TestMinAggregateOutputType | null
    _max: TestMaxAggregateOutputType | null
  }

  export type TestAvgAggregateOutputType = {
    duration: number | null
    maxscore: number | null
  }

  export type TestSumAggregateOutputType = {
    duration: number | null
    maxscore: number | null
  }

  export type TestMinAggregateOutputType = {
    id: string | null
    title: string | null
    status: $Enums.TestStatus | null
    instructions: string | null
    duration: number | null
    maxscore: number | null
    open: boolean | null
    testdate: Date | null
    testtime: Date | null
    term: string | null
    subjectid: string | null
    teacherid: string | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type TestMaxAggregateOutputType = {
    id: string | null
    title: string | null
    status: $Enums.TestStatus | null
    instructions: string | null
    duration: number | null
    maxscore: number | null
    open: boolean | null
    testdate: Date | null
    testtime: Date | null
    term: string | null
    subjectid: string | null
    teacherid: string | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type TestCountAggregateOutputType = {
    id: number
    title: number
    status: number
    instructions: number
    duration: number
    maxscore: number
    open: number
    testdate: number
    testtime: number
    term: number
    subjectid: number
    teacherid: number
    createdAt: number
    updateAt: number
    _all: number
  }


  export type TestAvgAggregateInputType = {
    duration?: true
    maxscore?: true
  }

  export type TestSumAggregateInputType = {
    duration?: true
    maxscore?: true
  }

  export type TestMinAggregateInputType = {
    id?: true
    title?: true
    status?: true
    instructions?: true
    duration?: true
    maxscore?: true
    open?: true
    testdate?: true
    testtime?: true
    term?: true
    subjectid?: true
    teacherid?: true
    createdAt?: true
    updateAt?: true
  }

  export type TestMaxAggregateInputType = {
    id?: true
    title?: true
    status?: true
    instructions?: true
    duration?: true
    maxscore?: true
    open?: true
    testdate?: true
    testtime?: true
    term?: true
    subjectid?: true
    teacherid?: true
    createdAt?: true
    updateAt?: true
  }

  export type TestCountAggregateInputType = {
    id?: true
    title?: true
    status?: true
    instructions?: true
    duration?: true
    maxscore?: true
    open?: true
    testdate?: true
    testtime?: true
    term?: true
    subjectid?: true
    teacherid?: true
    createdAt?: true
    updateAt?: true
    _all?: true
  }

  export type TestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Test to aggregate.
     */
    where?: TestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tests to fetch.
     */
    orderBy?: TestOrderByWithRelationInput | TestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tests
    **/
    _count?: true | TestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TestMaxAggregateInputType
  }

  export type GetTestAggregateType<T extends TestAggregateArgs> = {
        [P in keyof T & keyof AggregateTest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTest[P]>
      : GetScalarType<T[P], AggregateTest[P]>
  }




  export type TestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestWhereInput
    orderBy?: TestOrderByWithAggregationInput | TestOrderByWithAggregationInput[]
    by: TestScalarFieldEnum[] | TestScalarFieldEnum
    having?: TestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TestCountAggregateInputType | true
    _avg?: TestAvgAggregateInputType
    _sum?: TestSumAggregateInputType
    _min?: TestMinAggregateInputType
    _max?: TestMaxAggregateInputType
  }

  export type TestGroupByOutputType = {
    id: string
    title: string
    status: $Enums.TestStatus
    instructions: string
    duration: number
    maxscore: number
    open: boolean
    testdate: Date
    testtime: Date
    term: string
    subjectid: string
    teacherid: string
    createdAt: Date
    updateAt: Date
    _count: TestCountAggregateOutputType | null
    _avg: TestAvgAggregateOutputType | null
    _sum: TestSumAggregateOutputType | null
    _min: TestMinAggregateOutputType | null
    _max: TestMaxAggregateOutputType | null
  }

  type GetTestGroupByPayload<T extends TestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TestGroupByOutputType[P]>
            : GetScalarType<T[P], TestGroupByOutputType[P]>
        }
      >
    >


  export type TestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    status?: boolean
    instructions?: boolean
    duration?: boolean
    maxscore?: boolean
    open?: boolean
    testdate?: boolean
    testtime?: boolean
    term?: boolean
    subjectid?: boolean
    teacherid?: boolean
    createdAt?: boolean
    updateAt?: boolean
    questions?: boolean | Test$questionsArgs<ExtArgs>
    answers?: boolean | Test$answersArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    _count?: boolean | TestCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["test"]>

  export type TestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    status?: boolean
    instructions?: boolean
    duration?: boolean
    maxscore?: boolean
    open?: boolean
    testdate?: boolean
    testtime?: boolean
    term?: boolean
    subjectid?: boolean
    teacherid?: boolean
    createdAt?: boolean
    updateAt?: boolean
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["test"]>

  export type TestSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    status?: boolean
    instructions?: boolean
    duration?: boolean
    maxscore?: boolean
    open?: boolean
    testdate?: boolean
    testtime?: boolean
    term?: boolean
    subjectid?: boolean
    teacherid?: boolean
    createdAt?: boolean
    updateAt?: boolean
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["test"]>

  export type TestSelectScalar = {
    id?: boolean
    title?: boolean
    status?: boolean
    instructions?: boolean
    duration?: boolean
    maxscore?: boolean
    open?: boolean
    testdate?: boolean
    testtime?: boolean
    term?: boolean
    subjectid?: boolean
    teacherid?: boolean
    createdAt?: boolean
    updateAt?: boolean
  }

  export type TestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "status" | "instructions" | "duration" | "maxscore" | "open" | "testdate" | "testtime" | "term" | "subjectid" | "teacherid" | "createdAt" | "updateAt", ExtArgs["result"]["test"]>
  export type TestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | Test$questionsArgs<ExtArgs>
    answers?: boolean | Test$answersArgs<ExtArgs>
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    _count?: boolean | TestCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
  }
  export type TestIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
  }

  export type $TestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Test"
    objects: {
      questions: Prisma.$QuestionPayload<ExtArgs>[]
      answers: Prisma.$AnswerPayload<ExtArgs>[]
      subject: Prisma.$SubjectPayload<ExtArgs>
      teacher: Prisma.$TeacherPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      status: $Enums.TestStatus
      instructions: string
      duration: number
      maxscore: number
      open: boolean
      testdate: Date
      testtime: Date
      term: string
      subjectid: string
      teacherid: string
      createdAt: Date
      updateAt: Date
    }, ExtArgs["result"]["test"]>
    composites: {}
  }

  type TestGetPayload<S extends boolean | null | undefined | TestDefaultArgs> = $Result.GetResult<Prisma.$TestPayload, S>

  type TestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TestCountAggregateInputType | true
    }

  export interface TestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Test'], meta: { name: 'Test' } }
    /**
     * Find zero or one Test that matches the filter.
     * @param {TestFindUniqueArgs} args - Arguments to find a Test
     * @example
     * // Get one Test
     * const test = await prisma.test.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TestFindUniqueArgs>(args: SelectSubset<T, TestFindUniqueArgs<ExtArgs>>): Prisma__TestClient<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Test that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TestFindUniqueOrThrowArgs} args - Arguments to find a Test
     * @example
     * // Get one Test
     * const test = await prisma.test.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TestFindUniqueOrThrowArgs>(args: SelectSubset<T, TestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TestClient<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Test that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestFindFirstArgs} args - Arguments to find a Test
     * @example
     * // Get one Test
     * const test = await prisma.test.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TestFindFirstArgs>(args?: SelectSubset<T, TestFindFirstArgs<ExtArgs>>): Prisma__TestClient<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Test that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestFindFirstOrThrowArgs} args - Arguments to find a Test
     * @example
     * // Get one Test
     * const test = await prisma.test.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TestFindFirstOrThrowArgs>(args?: SelectSubset<T, TestFindFirstOrThrowArgs<ExtArgs>>): Prisma__TestClient<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tests
     * const tests = await prisma.test.findMany()
     * 
     * // Get first 10 Tests
     * const tests = await prisma.test.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const testWithIdOnly = await prisma.test.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TestFindManyArgs>(args?: SelectSubset<T, TestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Test.
     * @param {TestCreateArgs} args - Arguments to create a Test.
     * @example
     * // Create one Test
     * const Test = await prisma.test.create({
     *   data: {
     *     // ... data to create a Test
     *   }
     * })
     * 
     */
    create<T extends TestCreateArgs>(args: SelectSubset<T, TestCreateArgs<ExtArgs>>): Prisma__TestClient<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tests.
     * @param {TestCreateManyArgs} args - Arguments to create many Tests.
     * @example
     * // Create many Tests
     * const test = await prisma.test.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TestCreateManyArgs>(args?: SelectSubset<T, TestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tests and returns the data saved in the database.
     * @param {TestCreateManyAndReturnArgs} args - Arguments to create many Tests.
     * @example
     * // Create many Tests
     * const test = await prisma.test.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tests and only return the `id`
     * const testWithIdOnly = await prisma.test.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TestCreateManyAndReturnArgs>(args?: SelectSubset<T, TestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Test.
     * @param {TestDeleteArgs} args - Arguments to delete one Test.
     * @example
     * // Delete one Test
     * const Test = await prisma.test.delete({
     *   where: {
     *     // ... filter to delete one Test
     *   }
     * })
     * 
     */
    delete<T extends TestDeleteArgs>(args: SelectSubset<T, TestDeleteArgs<ExtArgs>>): Prisma__TestClient<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Test.
     * @param {TestUpdateArgs} args - Arguments to update one Test.
     * @example
     * // Update one Test
     * const test = await prisma.test.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TestUpdateArgs>(args: SelectSubset<T, TestUpdateArgs<ExtArgs>>): Prisma__TestClient<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tests.
     * @param {TestDeleteManyArgs} args - Arguments to filter Tests to delete.
     * @example
     * // Delete a few Tests
     * const { count } = await prisma.test.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TestDeleteManyArgs>(args?: SelectSubset<T, TestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tests
     * const test = await prisma.test.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TestUpdateManyArgs>(args: SelectSubset<T, TestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tests and returns the data updated in the database.
     * @param {TestUpdateManyAndReturnArgs} args - Arguments to update many Tests.
     * @example
     * // Update many Tests
     * const test = await prisma.test.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tests and only return the `id`
     * const testWithIdOnly = await prisma.test.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TestUpdateManyAndReturnArgs>(args: SelectSubset<T, TestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Test.
     * @param {TestUpsertArgs} args - Arguments to update or create a Test.
     * @example
     * // Update or create a Test
     * const test = await prisma.test.upsert({
     *   create: {
     *     // ... data to create a Test
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Test we want to update
     *   }
     * })
     */
    upsert<T extends TestUpsertArgs>(args: SelectSubset<T, TestUpsertArgs<ExtArgs>>): Prisma__TestClient<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestCountArgs} args - Arguments to filter Tests to count.
     * @example
     * // Count the number of Tests
     * const count = await prisma.test.count({
     *   where: {
     *     // ... the filter for the Tests we want to count
     *   }
     * })
    **/
    count<T extends TestCountArgs>(
      args?: Subset<T, TestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Test.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TestAggregateArgs>(args: Subset<T, TestAggregateArgs>): Prisma.PrismaPromise<GetTestAggregateType<T>>

    /**
     * Group by Test.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TestGroupByArgs['orderBy'] }
        : { orderBy?: TestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Test model
   */
  readonly fields: TestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Test.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    questions<T extends Test$questionsArgs<ExtArgs> = {}>(args?: Subset<T, Test$questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    answers<T extends Test$answersArgs<ExtArgs> = {}>(args?: Subset<T, Test$answersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnswerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    subject<T extends SubjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubjectDefaultArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    teacher<T extends TeacherDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeacherDefaultArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Test model
   */
  interface TestFieldRefs {
    readonly id: FieldRef<"Test", 'String'>
    readonly title: FieldRef<"Test", 'String'>
    readonly status: FieldRef<"Test", 'TestStatus'>
    readonly instructions: FieldRef<"Test", 'String'>
    readonly duration: FieldRef<"Test", 'Int'>
    readonly maxscore: FieldRef<"Test", 'Int'>
    readonly open: FieldRef<"Test", 'Boolean'>
    readonly testdate: FieldRef<"Test", 'DateTime'>
    readonly testtime: FieldRef<"Test", 'DateTime'>
    readonly term: FieldRef<"Test", 'String'>
    readonly subjectid: FieldRef<"Test", 'String'>
    readonly teacherid: FieldRef<"Test", 'String'>
    readonly createdAt: FieldRef<"Test", 'DateTime'>
    readonly updateAt: FieldRef<"Test", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Test findUnique
   */
  export type TestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestInclude<ExtArgs> | null
    /**
     * Filter, which Test to fetch.
     */
    where: TestWhereUniqueInput
  }

  /**
   * Test findUniqueOrThrow
   */
  export type TestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestInclude<ExtArgs> | null
    /**
     * Filter, which Test to fetch.
     */
    where: TestWhereUniqueInput
  }

  /**
   * Test findFirst
   */
  export type TestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestInclude<ExtArgs> | null
    /**
     * Filter, which Test to fetch.
     */
    where?: TestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tests to fetch.
     */
    orderBy?: TestOrderByWithRelationInput | TestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tests.
     */
    cursor?: TestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tests.
     */
    distinct?: TestScalarFieldEnum | TestScalarFieldEnum[]
  }

  /**
   * Test findFirstOrThrow
   */
  export type TestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestInclude<ExtArgs> | null
    /**
     * Filter, which Test to fetch.
     */
    where?: TestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tests to fetch.
     */
    orderBy?: TestOrderByWithRelationInput | TestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tests.
     */
    cursor?: TestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tests.
     */
    distinct?: TestScalarFieldEnum | TestScalarFieldEnum[]
  }

  /**
   * Test findMany
   */
  export type TestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestInclude<ExtArgs> | null
    /**
     * Filter, which Tests to fetch.
     */
    where?: TestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tests to fetch.
     */
    orderBy?: TestOrderByWithRelationInput | TestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tests.
     */
    cursor?: TestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tests.
     */
    skip?: number
    distinct?: TestScalarFieldEnum | TestScalarFieldEnum[]
  }

  /**
   * Test create
   */
  export type TestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestInclude<ExtArgs> | null
    /**
     * The data needed to create a Test.
     */
    data: XOR<TestCreateInput, TestUncheckedCreateInput>
  }

  /**
   * Test createMany
   */
  export type TestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tests.
     */
    data: TestCreateManyInput | TestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Test createManyAndReturn
   */
  export type TestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * The data used to create many Tests.
     */
    data: TestCreateManyInput | TestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Test update
   */
  export type TestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestInclude<ExtArgs> | null
    /**
     * The data needed to update a Test.
     */
    data: XOR<TestUpdateInput, TestUncheckedUpdateInput>
    /**
     * Choose, which Test to update.
     */
    where: TestWhereUniqueInput
  }

  /**
   * Test updateMany
   */
  export type TestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tests.
     */
    data: XOR<TestUpdateManyMutationInput, TestUncheckedUpdateManyInput>
    /**
     * Filter which Tests to update
     */
    where?: TestWhereInput
    /**
     * Limit how many Tests to update.
     */
    limit?: number
  }

  /**
   * Test updateManyAndReturn
   */
  export type TestUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * The data used to update Tests.
     */
    data: XOR<TestUpdateManyMutationInput, TestUncheckedUpdateManyInput>
    /**
     * Filter which Tests to update
     */
    where?: TestWhereInput
    /**
     * Limit how many Tests to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Test upsert
   */
  export type TestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestInclude<ExtArgs> | null
    /**
     * The filter to search for the Test to update in case it exists.
     */
    where: TestWhereUniqueInput
    /**
     * In case the Test found by the `where` argument doesn't exist, create a new Test with this data.
     */
    create: XOR<TestCreateInput, TestUncheckedCreateInput>
    /**
     * In case the Test was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TestUpdateInput, TestUncheckedUpdateInput>
  }

  /**
   * Test delete
   */
  export type TestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestInclude<ExtArgs> | null
    /**
     * Filter which Test to delete.
     */
    where: TestWhereUniqueInput
  }

  /**
   * Test deleteMany
   */
  export type TestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tests to delete
     */
    where?: TestWhereInput
    /**
     * Limit how many Tests to delete.
     */
    limit?: number
  }

  /**
   * Test.questions
   */
  export type Test$questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    cursor?: QuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Test.answers
   */
  export type Test$answersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Answer
     */
    omit?: AnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerInclude<ExtArgs> | null
    where?: AnswerWhereInput
    orderBy?: AnswerOrderByWithRelationInput | AnswerOrderByWithRelationInput[]
    cursor?: AnswerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnswerScalarFieldEnum | AnswerScalarFieldEnum[]
  }

  /**
   * Test without action
   */
  export type TestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Test
     */
    select?: TestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Test
     */
    omit?: TestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestInclude<ExtArgs> | null
  }


  /**
   * Model Question
   */

  export type AggregateQuestion = {
    _count: QuestionCountAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  export type QuestionMinAggregateOutputType = {
    id: string | null
    text: string | null
    answer: string | null
    testid: string | null
  }

  export type QuestionMaxAggregateOutputType = {
    id: string | null
    text: string | null
    answer: string | null
    testid: string | null
  }

  export type QuestionCountAggregateOutputType = {
    id: number
    text: number
    options: number
    answer: number
    testid: number
    _all: number
  }


  export type QuestionMinAggregateInputType = {
    id?: true
    text?: true
    answer?: true
    testid?: true
  }

  export type QuestionMaxAggregateInputType = {
    id?: true
    text?: true
    answer?: true
    testid?: true
  }

  export type QuestionCountAggregateInputType = {
    id?: true
    text?: true
    options?: true
    answer?: true
    testid?: true
    _all?: true
  }

  export type QuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Question to aggregate.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Questions
    **/
    _count?: true | QuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionMaxAggregateInputType
  }

  export type GetQuestionAggregateType<T extends QuestionAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestion[P]>
      : GetScalarType<T[P], AggregateQuestion[P]>
  }




  export type QuestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithAggregationInput | QuestionOrderByWithAggregationInput[]
    by: QuestionScalarFieldEnum[] | QuestionScalarFieldEnum
    having?: QuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionCountAggregateInputType | true
    _min?: QuestionMinAggregateInputType
    _max?: QuestionMaxAggregateInputType
  }

  export type QuestionGroupByOutputType = {
    id: string
    text: string
    options: JsonValue
    answer: string
    testid: string
    _count: QuestionCountAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  type GetQuestionGroupByPayload<T extends QuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionGroupByOutputType[P]>
        }
      >
    >


  export type QuestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    options?: boolean
    answer?: boolean
    testid?: boolean
    test?: boolean | TestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    options?: boolean
    answer?: boolean
    testid?: boolean
    test?: boolean | TestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    options?: boolean
    answer?: boolean
    testid?: boolean
    test?: boolean | TestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectScalar = {
    id?: boolean
    text?: boolean
    options?: boolean
    answer?: boolean
    testid?: boolean
  }

  export type QuestionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "text" | "options" | "answer" | "testid", ExtArgs["result"]["question"]>
  export type QuestionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    test?: boolean | TestDefaultArgs<ExtArgs>
  }
  export type QuestionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    test?: boolean | TestDefaultArgs<ExtArgs>
  }
  export type QuestionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    test?: boolean | TestDefaultArgs<ExtArgs>
  }

  export type $QuestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Question"
    objects: {
      test: Prisma.$TestPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      text: string
      options: Prisma.JsonValue
      answer: string
      testid: string
    }, ExtArgs["result"]["question"]>
    composites: {}
  }

  type QuestionGetPayload<S extends boolean | null | undefined | QuestionDefaultArgs> = $Result.GetResult<Prisma.$QuestionPayload, S>

  type QuestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionCountAggregateInputType | true
    }

  export interface QuestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Question'], meta: { name: 'Question' } }
    /**
     * Find zero or one Question that matches the filter.
     * @param {QuestionFindUniqueArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionFindUniqueArgs>(args: SelectSubset<T, QuestionFindUniqueArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Question that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestionFindUniqueOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Question that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionFindFirstArgs>(args?: SelectSubset<T, QuestionFindFirstArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Question that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questions
     * const questions = await prisma.question.findMany()
     * 
     * // Get first 10 Questions
     * const questions = await prisma.question.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionWithIdOnly = await prisma.question.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestionFindManyArgs>(args?: SelectSubset<T, QuestionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Question.
     * @param {QuestionCreateArgs} args - Arguments to create a Question.
     * @example
     * // Create one Question
     * const Question = await prisma.question.create({
     *   data: {
     *     // ... data to create a Question
     *   }
     * })
     * 
     */
    create<T extends QuestionCreateArgs>(args: SelectSubset<T, QuestionCreateArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Questions.
     * @param {QuestionCreateManyArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const question = await prisma.question.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionCreateManyArgs>(args?: SelectSubset<T, QuestionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Questions and returns the data saved in the database.
     * @param {QuestionCreateManyAndReturnArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const question = await prisma.question.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Questions and only return the `id`
     * const questionWithIdOnly = await prisma.question.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Question.
     * @param {QuestionDeleteArgs} args - Arguments to delete one Question.
     * @example
     * // Delete one Question
     * const Question = await prisma.question.delete({
     *   where: {
     *     // ... filter to delete one Question
     *   }
     * })
     * 
     */
    delete<T extends QuestionDeleteArgs>(args: SelectSubset<T, QuestionDeleteArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Question.
     * @param {QuestionUpdateArgs} args - Arguments to update one Question.
     * @example
     * // Update one Question
     * const question = await prisma.question.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionUpdateArgs>(args: SelectSubset<T, QuestionUpdateArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Questions.
     * @param {QuestionDeleteManyArgs} args - Arguments to filter Questions to delete.
     * @example
     * // Delete a few Questions
     * const { count } = await prisma.question.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionDeleteManyArgs>(args?: SelectSubset<T, QuestionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questions
     * const question = await prisma.question.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionUpdateManyArgs>(args: SelectSubset<T, QuestionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions and returns the data updated in the database.
     * @param {QuestionUpdateManyAndReturnArgs} args - Arguments to update many Questions.
     * @example
     * // Update many Questions
     * const question = await prisma.question.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Questions and only return the `id`
     * const questionWithIdOnly = await prisma.question.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuestionUpdateManyAndReturnArgs>(args: SelectSubset<T, QuestionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Question.
     * @param {QuestionUpsertArgs} args - Arguments to update or create a Question.
     * @example
     * // Update or create a Question
     * const question = await prisma.question.upsert({
     *   create: {
     *     // ... data to create a Question
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Question we want to update
     *   }
     * })
     */
    upsert<T extends QuestionUpsertArgs>(args: SelectSubset<T, QuestionUpsertArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionCountArgs} args - Arguments to filter Questions to count.
     * @example
     * // Count the number of Questions
     * const count = await prisma.question.count({
     *   where: {
     *     // ... the filter for the Questions we want to count
     *   }
     * })
    **/
    count<T extends QuestionCountArgs>(
      args?: Subset<T, QuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionAggregateArgs>(args: Subset<T, QuestionAggregateArgs>): Prisma.PrismaPromise<GetQuestionAggregateType<T>>

    /**
     * Group by Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionGroupByArgs['orderBy'] }
        : { orderBy?: QuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Question model
   */
  readonly fields: QuestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Question.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    test<T extends TestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TestDefaultArgs<ExtArgs>>): Prisma__TestClient<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Question model
   */
  interface QuestionFieldRefs {
    readonly id: FieldRef<"Question", 'String'>
    readonly text: FieldRef<"Question", 'String'>
    readonly options: FieldRef<"Question", 'Json'>
    readonly answer: FieldRef<"Question", 'String'>
    readonly testid: FieldRef<"Question", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Question findUnique
   */
  export type QuestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findUniqueOrThrow
   */
  export type QuestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findFirst
   */
  export type QuestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question findFirstOrThrow
   */
  export type QuestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question findMany
   */
  export type QuestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Questions to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question create
   */
  export type QuestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to create a Question.
     */
    data: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
  }

  /**
   * Question createMany
   */
  export type QuestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Questions.
     */
    data: QuestionCreateManyInput | QuestionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Question createManyAndReturn
   */
  export type QuestionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * The data used to create many Questions.
     */
    data: QuestionCreateManyInput | QuestionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Question update
   */
  export type QuestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to update a Question.
     */
    data: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
    /**
     * Choose, which Question to update.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question updateMany
   */
  export type QuestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Questions.
     */
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyInput>
    /**
     * Filter which Questions to update
     */
    where?: QuestionWhereInput
    /**
     * Limit how many Questions to update.
     */
    limit?: number
  }

  /**
   * Question updateManyAndReturn
   */
  export type QuestionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * The data used to update Questions.
     */
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyInput>
    /**
     * Filter which Questions to update
     */
    where?: QuestionWhereInput
    /**
     * Limit how many Questions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Question upsert
   */
  export type QuestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The filter to search for the Question to update in case it exists.
     */
    where: QuestionWhereUniqueInput
    /**
     * In case the Question found by the `where` argument doesn't exist, create a new Question with this data.
     */
    create: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
    /**
     * In case the Question was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
  }

  /**
   * Question delete
   */
  export type QuestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter which Question to delete.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question deleteMany
   */
  export type QuestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Questions to delete
     */
    where?: QuestionWhereInput
    /**
     * Limit how many Questions to delete.
     */
    limit?: number
  }

  /**
   * Question without action
   */
  export type QuestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
  }


  /**
   * Model Answer
   */

  export type AggregateAnswer = {
    _count: AnswerCountAggregateOutputType | null
    _avg: AnswerAvgAggregateOutputType | null
    _sum: AnswerSumAggregateOutputType | null
    _min: AnswerMinAggregateOutputType | null
    _max: AnswerMaxAggregateOutputType | null
  }

  export type AnswerAvgAggregateOutputType = {
    score: number | null
  }

  export type AnswerSumAggregateOutputType = {
    score: number | null
  }

  export type AnswerMinAggregateOutputType = {
    id: string | null
    score: number | null
    testid: string | null
    studentid: string | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type AnswerMaxAggregateOutputType = {
    id: string | null
    score: number | null
    testid: string | null
    studentid: string | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type AnswerCountAggregateOutputType = {
    id: number
    score: number
    testid: number
    studentid: number
    createdAt: number
    updateAt: number
    _all: number
  }


  export type AnswerAvgAggregateInputType = {
    score?: true
  }

  export type AnswerSumAggregateInputType = {
    score?: true
  }

  export type AnswerMinAggregateInputType = {
    id?: true
    score?: true
    testid?: true
    studentid?: true
    createdAt?: true
    updateAt?: true
  }

  export type AnswerMaxAggregateInputType = {
    id?: true
    score?: true
    testid?: true
    studentid?: true
    createdAt?: true
    updateAt?: true
  }

  export type AnswerCountAggregateInputType = {
    id?: true
    score?: true
    testid?: true
    studentid?: true
    createdAt?: true
    updateAt?: true
    _all?: true
  }

  export type AnswerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Answer to aggregate.
     */
    where?: AnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Answers to fetch.
     */
    orderBy?: AnswerOrderByWithRelationInput | AnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Answers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Answers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Answers
    **/
    _count?: true | AnswerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AnswerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AnswerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnswerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnswerMaxAggregateInputType
  }

  export type GetAnswerAggregateType<T extends AnswerAggregateArgs> = {
        [P in keyof T & keyof AggregateAnswer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnswer[P]>
      : GetScalarType<T[P], AggregateAnswer[P]>
  }




  export type AnswerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnswerWhereInput
    orderBy?: AnswerOrderByWithAggregationInput | AnswerOrderByWithAggregationInput[]
    by: AnswerScalarFieldEnum[] | AnswerScalarFieldEnum
    having?: AnswerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnswerCountAggregateInputType | true
    _avg?: AnswerAvgAggregateInputType
    _sum?: AnswerSumAggregateInputType
    _min?: AnswerMinAggregateInputType
    _max?: AnswerMaxAggregateInputType
  }

  export type AnswerGroupByOutputType = {
    id: string
    score: number
    testid: string
    studentid: string
    createdAt: Date
    updateAt: Date
    _count: AnswerCountAggregateOutputType | null
    _avg: AnswerAvgAggregateOutputType | null
    _sum: AnswerSumAggregateOutputType | null
    _min: AnswerMinAggregateOutputType | null
    _max: AnswerMaxAggregateOutputType | null
  }

  type GetAnswerGroupByPayload<T extends AnswerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnswerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnswerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnswerGroupByOutputType[P]>
            : GetScalarType<T[P], AnswerGroupByOutputType[P]>
        }
      >
    >


  export type AnswerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    score?: boolean
    testid?: boolean
    studentid?: boolean
    createdAt?: boolean
    updateAt?: boolean
    test?: boolean | TestDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["answer"]>

  export type AnswerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    score?: boolean
    testid?: boolean
    studentid?: boolean
    createdAt?: boolean
    updateAt?: boolean
    test?: boolean | TestDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["answer"]>

  export type AnswerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    score?: boolean
    testid?: boolean
    studentid?: boolean
    createdAt?: boolean
    updateAt?: boolean
    test?: boolean | TestDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["answer"]>

  export type AnswerSelectScalar = {
    id?: boolean
    score?: boolean
    testid?: boolean
    studentid?: boolean
    createdAt?: boolean
    updateAt?: boolean
  }

  export type AnswerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "score" | "testid" | "studentid" | "createdAt" | "updateAt", ExtArgs["result"]["answer"]>
  export type AnswerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    test?: boolean | TestDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type AnswerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    test?: boolean | TestDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type AnswerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    test?: boolean | TestDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }

  export type $AnswerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Answer"
    objects: {
      test: Prisma.$TestPayload<ExtArgs>
      student: Prisma.$StudentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      score: number
      testid: string
      studentid: string
      createdAt: Date
      updateAt: Date
    }, ExtArgs["result"]["answer"]>
    composites: {}
  }

  type AnswerGetPayload<S extends boolean | null | undefined | AnswerDefaultArgs> = $Result.GetResult<Prisma.$AnswerPayload, S>

  type AnswerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AnswerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AnswerCountAggregateInputType | true
    }

  export interface AnswerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Answer'], meta: { name: 'Answer' } }
    /**
     * Find zero or one Answer that matches the filter.
     * @param {AnswerFindUniqueArgs} args - Arguments to find a Answer
     * @example
     * // Get one Answer
     * const answer = await prisma.answer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AnswerFindUniqueArgs>(args: SelectSubset<T, AnswerFindUniqueArgs<ExtArgs>>): Prisma__AnswerClient<$Result.GetResult<Prisma.$AnswerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Answer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AnswerFindUniqueOrThrowArgs} args - Arguments to find a Answer
     * @example
     * // Get one Answer
     * const answer = await prisma.answer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AnswerFindUniqueOrThrowArgs>(args: SelectSubset<T, AnswerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AnswerClient<$Result.GetResult<Prisma.$AnswerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Answer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerFindFirstArgs} args - Arguments to find a Answer
     * @example
     * // Get one Answer
     * const answer = await prisma.answer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AnswerFindFirstArgs>(args?: SelectSubset<T, AnswerFindFirstArgs<ExtArgs>>): Prisma__AnswerClient<$Result.GetResult<Prisma.$AnswerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Answer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerFindFirstOrThrowArgs} args - Arguments to find a Answer
     * @example
     * // Get one Answer
     * const answer = await prisma.answer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AnswerFindFirstOrThrowArgs>(args?: SelectSubset<T, AnswerFindFirstOrThrowArgs<ExtArgs>>): Prisma__AnswerClient<$Result.GetResult<Prisma.$AnswerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Answers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Answers
     * const answers = await prisma.answer.findMany()
     * 
     * // Get first 10 Answers
     * const answers = await prisma.answer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const answerWithIdOnly = await prisma.answer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AnswerFindManyArgs>(args?: SelectSubset<T, AnswerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnswerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Answer.
     * @param {AnswerCreateArgs} args - Arguments to create a Answer.
     * @example
     * // Create one Answer
     * const Answer = await prisma.answer.create({
     *   data: {
     *     // ... data to create a Answer
     *   }
     * })
     * 
     */
    create<T extends AnswerCreateArgs>(args: SelectSubset<T, AnswerCreateArgs<ExtArgs>>): Prisma__AnswerClient<$Result.GetResult<Prisma.$AnswerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Answers.
     * @param {AnswerCreateManyArgs} args - Arguments to create many Answers.
     * @example
     * // Create many Answers
     * const answer = await prisma.answer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AnswerCreateManyArgs>(args?: SelectSubset<T, AnswerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Answers and returns the data saved in the database.
     * @param {AnswerCreateManyAndReturnArgs} args - Arguments to create many Answers.
     * @example
     * // Create many Answers
     * const answer = await prisma.answer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Answers and only return the `id`
     * const answerWithIdOnly = await prisma.answer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AnswerCreateManyAndReturnArgs>(args?: SelectSubset<T, AnswerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnswerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Answer.
     * @param {AnswerDeleteArgs} args - Arguments to delete one Answer.
     * @example
     * // Delete one Answer
     * const Answer = await prisma.answer.delete({
     *   where: {
     *     // ... filter to delete one Answer
     *   }
     * })
     * 
     */
    delete<T extends AnswerDeleteArgs>(args: SelectSubset<T, AnswerDeleteArgs<ExtArgs>>): Prisma__AnswerClient<$Result.GetResult<Prisma.$AnswerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Answer.
     * @param {AnswerUpdateArgs} args - Arguments to update one Answer.
     * @example
     * // Update one Answer
     * const answer = await prisma.answer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AnswerUpdateArgs>(args: SelectSubset<T, AnswerUpdateArgs<ExtArgs>>): Prisma__AnswerClient<$Result.GetResult<Prisma.$AnswerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Answers.
     * @param {AnswerDeleteManyArgs} args - Arguments to filter Answers to delete.
     * @example
     * // Delete a few Answers
     * const { count } = await prisma.answer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AnswerDeleteManyArgs>(args?: SelectSubset<T, AnswerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Answers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Answers
     * const answer = await prisma.answer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AnswerUpdateManyArgs>(args: SelectSubset<T, AnswerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Answers and returns the data updated in the database.
     * @param {AnswerUpdateManyAndReturnArgs} args - Arguments to update many Answers.
     * @example
     * // Update many Answers
     * const answer = await prisma.answer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Answers and only return the `id`
     * const answerWithIdOnly = await prisma.answer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AnswerUpdateManyAndReturnArgs>(args: SelectSubset<T, AnswerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnswerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Answer.
     * @param {AnswerUpsertArgs} args - Arguments to update or create a Answer.
     * @example
     * // Update or create a Answer
     * const answer = await prisma.answer.upsert({
     *   create: {
     *     // ... data to create a Answer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Answer we want to update
     *   }
     * })
     */
    upsert<T extends AnswerUpsertArgs>(args: SelectSubset<T, AnswerUpsertArgs<ExtArgs>>): Prisma__AnswerClient<$Result.GetResult<Prisma.$AnswerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Answers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerCountArgs} args - Arguments to filter Answers to count.
     * @example
     * // Count the number of Answers
     * const count = await prisma.answer.count({
     *   where: {
     *     // ... the filter for the Answers we want to count
     *   }
     * })
    **/
    count<T extends AnswerCountArgs>(
      args?: Subset<T, AnswerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnswerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Answer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnswerAggregateArgs>(args: Subset<T, AnswerAggregateArgs>): Prisma.PrismaPromise<GetAnswerAggregateType<T>>

    /**
     * Group by Answer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnswerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnswerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnswerGroupByArgs['orderBy'] }
        : { orderBy?: AnswerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnswerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnswerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Answer model
   */
  readonly fields: AnswerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Answer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AnswerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    test<T extends TestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TestDefaultArgs<ExtArgs>>): Prisma__TestClient<$Result.GetResult<Prisma.$TestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Answer model
   */
  interface AnswerFieldRefs {
    readonly id: FieldRef<"Answer", 'String'>
    readonly score: FieldRef<"Answer", 'Int'>
    readonly testid: FieldRef<"Answer", 'String'>
    readonly studentid: FieldRef<"Answer", 'String'>
    readonly createdAt: FieldRef<"Answer", 'DateTime'>
    readonly updateAt: FieldRef<"Answer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Answer findUnique
   */
  export type AnswerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Answer
     */
    omit?: AnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerInclude<ExtArgs> | null
    /**
     * Filter, which Answer to fetch.
     */
    where: AnswerWhereUniqueInput
  }

  /**
   * Answer findUniqueOrThrow
   */
  export type AnswerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Answer
     */
    omit?: AnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerInclude<ExtArgs> | null
    /**
     * Filter, which Answer to fetch.
     */
    where: AnswerWhereUniqueInput
  }

  /**
   * Answer findFirst
   */
  export type AnswerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Answer
     */
    omit?: AnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerInclude<ExtArgs> | null
    /**
     * Filter, which Answer to fetch.
     */
    where?: AnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Answers to fetch.
     */
    orderBy?: AnswerOrderByWithRelationInput | AnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Answers.
     */
    cursor?: AnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Answers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Answers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Answers.
     */
    distinct?: AnswerScalarFieldEnum | AnswerScalarFieldEnum[]
  }

  /**
   * Answer findFirstOrThrow
   */
  export type AnswerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Answer
     */
    omit?: AnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerInclude<ExtArgs> | null
    /**
     * Filter, which Answer to fetch.
     */
    where?: AnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Answers to fetch.
     */
    orderBy?: AnswerOrderByWithRelationInput | AnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Answers.
     */
    cursor?: AnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Answers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Answers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Answers.
     */
    distinct?: AnswerScalarFieldEnum | AnswerScalarFieldEnum[]
  }

  /**
   * Answer findMany
   */
  export type AnswerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Answer
     */
    omit?: AnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerInclude<ExtArgs> | null
    /**
     * Filter, which Answers to fetch.
     */
    where?: AnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Answers to fetch.
     */
    orderBy?: AnswerOrderByWithRelationInput | AnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Answers.
     */
    cursor?: AnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Answers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Answers.
     */
    skip?: number
    distinct?: AnswerScalarFieldEnum | AnswerScalarFieldEnum[]
  }

  /**
   * Answer create
   */
  export type AnswerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Answer
     */
    omit?: AnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerInclude<ExtArgs> | null
    /**
     * The data needed to create a Answer.
     */
    data: XOR<AnswerCreateInput, AnswerUncheckedCreateInput>
  }

  /**
   * Answer createMany
   */
  export type AnswerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Answers.
     */
    data: AnswerCreateManyInput | AnswerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Answer createManyAndReturn
   */
  export type AnswerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Answer
     */
    omit?: AnswerOmit<ExtArgs> | null
    /**
     * The data used to create many Answers.
     */
    data: AnswerCreateManyInput | AnswerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Answer update
   */
  export type AnswerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Answer
     */
    omit?: AnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerInclude<ExtArgs> | null
    /**
     * The data needed to update a Answer.
     */
    data: XOR<AnswerUpdateInput, AnswerUncheckedUpdateInput>
    /**
     * Choose, which Answer to update.
     */
    where: AnswerWhereUniqueInput
  }

  /**
   * Answer updateMany
   */
  export type AnswerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Answers.
     */
    data: XOR<AnswerUpdateManyMutationInput, AnswerUncheckedUpdateManyInput>
    /**
     * Filter which Answers to update
     */
    where?: AnswerWhereInput
    /**
     * Limit how many Answers to update.
     */
    limit?: number
  }

  /**
   * Answer updateManyAndReturn
   */
  export type AnswerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Answer
     */
    omit?: AnswerOmit<ExtArgs> | null
    /**
     * The data used to update Answers.
     */
    data: XOR<AnswerUpdateManyMutationInput, AnswerUncheckedUpdateManyInput>
    /**
     * Filter which Answers to update
     */
    where?: AnswerWhereInput
    /**
     * Limit how many Answers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Answer upsert
   */
  export type AnswerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Answer
     */
    omit?: AnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerInclude<ExtArgs> | null
    /**
     * The filter to search for the Answer to update in case it exists.
     */
    where: AnswerWhereUniqueInput
    /**
     * In case the Answer found by the `where` argument doesn't exist, create a new Answer with this data.
     */
    create: XOR<AnswerCreateInput, AnswerUncheckedCreateInput>
    /**
     * In case the Answer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnswerUpdateInput, AnswerUncheckedUpdateInput>
  }

  /**
   * Answer delete
   */
  export type AnswerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Answer
     */
    omit?: AnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerInclude<ExtArgs> | null
    /**
     * Filter which Answer to delete.
     */
    where: AnswerWhereUniqueInput
  }

  /**
   * Answer deleteMany
   */
  export type AnswerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Answers to delete
     */
    where?: AnswerWhereInput
    /**
     * Limit how many Answers to delete.
     */
    limit?: number
  }

  /**
   * Answer without action
   */
  export type AnswerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Answer
     */
    select?: AnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Answer
     */
    omit?: AnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnswerInclude<ExtArgs> | null
  }


  /**
   * Model Submission
   */

  export type AggregateSubmission = {
    _count: SubmissionCountAggregateOutputType | null
    _avg: SubmissionAvgAggregateOutputType | null
    _sum: SubmissionSumAggregateOutputType | null
    _min: SubmissionMinAggregateOutputType | null
    _max: SubmissionMaxAggregateOutputType | null
  }

  export type SubmissionAvgAggregateOutputType = {
    score: number | null
  }

  export type SubmissionSumAggregateOutputType = {
    score: number | null
  }

  export type SubmissionMinAggregateOutputType = {
    id: string | null
    answer: string | null
    feedback: string | null
    score: number | null
    file: string | null
    assignmentId: string | null
    studentId: string | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type SubmissionMaxAggregateOutputType = {
    id: string | null
    answer: string | null
    feedback: string | null
    score: number | null
    file: string | null
    assignmentId: string | null
    studentId: string | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type SubmissionCountAggregateOutputType = {
    id: number
    answer: number
    feedback: number
    score: number
    file: number
    assignmentId: number
    studentId: number
    createdAt: number
    updateAt: number
    _all: number
  }


  export type SubmissionAvgAggregateInputType = {
    score?: true
  }

  export type SubmissionSumAggregateInputType = {
    score?: true
  }

  export type SubmissionMinAggregateInputType = {
    id?: true
    answer?: true
    feedback?: true
    score?: true
    file?: true
    assignmentId?: true
    studentId?: true
    createdAt?: true
    updateAt?: true
  }

  export type SubmissionMaxAggregateInputType = {
    id?: true
    answer?: true
    feedback?: true
    score?: true
    file?: true
    assignmentId?: true
    studentId?: true
    createdAt?: true
    updateAt?: true
  }

  export type SubmissionCountAggregateInputType = {
    id?: true
    answer?: true
    feedback?: true
    score?: true
    file?: true
    assignmentId?: true
    studentId?: true
    createdAt?: true
    updateAt?: true
    _all?: true
  }

  export type SubmissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Submission to aggregate.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Submissions
    **/
    _count?: true | SubmissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubmissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubmissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubmissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubmissionMaxAggregateInputType
  }

  export type GetSubmissionAggregateType<T extends SubmissionAggregateArgs> = {
        [P in keyof T & keyof AggregateSubmission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubmission[P]>
      : GetScalarType<T[P], AggregateSubmission[P]>
  }




  export type SubmissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionWhereInput
    orderBy?: SubmissionOrderByWithAggregationInput | SubmissionOrderByWithAggregationInput[]
    by: SubmissionScalarFieldEnum[] | SubmissionScalarFieldEnum
    having?: SubmissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubmissionCountAggregateInputType | true
    _avg?: SubmissionAvgAggregateInputType
    _sum?: SubmissionSumAggregateInputType
    _min?: SubmissionMinAggregateInputType
    _max?: SubmissionMaxAggregateInputType
  }

  export type SubmissionGroupByOutputType = {
    id: string
    answer: string
    feedback: string
    score: number
    file: string
    assignmentId: string | null
    studentId: string
    createdAt: Date
    updateAt: Date
    _count: SubmissionCountAggregateOutputType | null
    _avg: SubmissionAvgAggregateOutputType | null
    _sum: SubmissionSumAggregateOutputType | null
    _min: SubmissionMinAggregateOutputType | null
    _max: SubmissionMaxAggregateOutputType | null
  }

  type GetSubmissionGroupByPayload<T extends SubmissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubmissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubmissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubmissionGroupByOutputType[P]>
            : GetScalarType<T[P], SubmissionGroupByOutputType[P]>
        }
      >
    >


  export type SubmissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    answer?: boolean
    feedback?: boolean
    score?: boolean
    file?: boolean
    assignmentId?: boolean
    studentId?: boolean
    createdAt?: boolean
    updateAt?: boolean
    assignment?: boolean | Submission$assignmentArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submission"]>

  export type SubmissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    answer?: boolean
    feedback?: boolean
    score?: boolean
    file?: boolean
    assignmentId?: boolean
    studentId?: boolean
    createdAt?: boolean
    updateAt?: boolean
    assignment?: boolean | Submission$assignmentArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submission"]>

  export type SubmissionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    answer?: boolean
    feedback?: boolean
    score?: boolean
    file?: boolean
    assignmentId?: boolean
    studentId?: boolean
    createdAt?: boolean
    updateAt?: boolean
    assignment?: boolean | Submission$assignmentArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submission"]>

  export type SubmissionSelectScalar = {
    id?: boolean
    answer?: boolean
    feedback?: boolean
    score?: boolean
    file?: boolean
    assignmentId?: boolean
    studentId?: boolean
    createdAt?: boolean
    updateAt?: boolean
  }

  export type SubmissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "answer" | "feedback" | "score" | "file" | "assignmentId" | "studentId" | "createdAt" | "updateAt", ExtArgs["result"]["submission"]>
  export type SubmissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignment?: boolean | Submission$assignmentArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type SubmissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignment?: boolean | Submission$assignmentArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type SubmissionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignment?: boolean | Submission$assignmentArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }

  export type $SubmissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Submission"
    objects: {
      assignment: Prisma.$AssignmentPayload<ExtArgs> | null
      student: Prisma.$StudentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      answer: string
      feedback: string
      score: number
      file: string
      assignmentId: string | null
      studentId: string
      createdAt: Date
      updateAt: Date
    }, ExtArgs["result"]["submission"]>
    composites: {}
  }

  type SubmissionGetPayload<S extends boolean | null | undefined | SubmissionDefaultArgs> = $Result.GetResult<Prisma.$SubmissionPayload, S>

  type SubmissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubmissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubmissionCountAggregateInputType | true
    }

  export interface SubmissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Submission'], meta: { name: 'Submission' } }
    /**
     * Find zero or one Submission that matches the filter.
     * @param {SubmissionFindUniqueArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubmissionFindUniqueArgs>(args: SelectSubset<T, SubmissionFindUniqueArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Submission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubmissionFindUniqueOrThrowArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubmissionFindUniqueOrThrowArgs>(args: SelectSubset<T, SubmissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Submission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionFindFirstArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubmissionFindFirstArgs>(args?: SelectSubset<T, SubmissionFindFirstArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Submission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionFindFirstOrThrowArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubmissionFindFirstOrThrowArgs>(args?: SelectSubset<T, SubmissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Submissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Submissions
     * const submissions = await prisma.submission.findMany()
     * 
     * // Get first 10 Submissions
     * const submissions = await prisma.submission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const submissionWithIdOnly = await prisma.submission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubmissionFindManyArgs>(args?: SelectSubset<T, SubmissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Submission.
     * @param {SubmissionCreateArgs} args - Arguments to create a Submission.
     * @example
     * // Create one Submission
     * const Submission = await prisma.submission.create({
     *   data: {
     *     // ... data to create a Submission
     *   }
     * })
     * 
     */
    create<T extends SubmissionCreateArgs>(args: SelectSubset<T, SubmissionCreateArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Submissions.
     * @param {SubmissionCreateManyArgs} args - Arguments to create many Submissions.
     * @example
     * // Create many Submissions
     * const submission = await prisma.submission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubmissionCreateManyArgs>(args?: SelectSubset<T, SubmissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Submissions and returns the data saved in the database.
     * @param {SubmissionCreateManyAndReturnArgs} args - Arguments to create many Submissions.
     * @example
     * // Create many Submissions
     * const submission = await prisma.submission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Submissions and only return the `id`
     * const submissionWithIdOnly = await prisma.submission.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubmissionCreateManyAndReturnArgs>(args?: SelectSubset<T, SubmissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Submission.
     * @param {SubmissionDeleteArgs} args - Arguments to delete one Submission.
     * @example
     * // Delete one Submission
     * const Submission = await prisma.submission.delete({
     *   where: {
     *     // ... filter to delete one Submission
     *   }
     * })
     * 
     */
    delete<T extends SubmissionDeleteArgs>(args: SelectSubset<T, SubmissionDeleteArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Submission.
     * @param {SubmissionUpdateArgs} args - Arguments to update one Submission.
     * @example
     * // Update one Submission
     * const submission = await prisma.submission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubmissionUpdateArgs>(args: SelectSubset<T, SubmissionUpdateArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Submissions.
     * @param {SubmissionDeleteManyArgs} args - Arguments to filter Submissions to delete.
     * @example
     * // Delete a few Submissions
     * const { count } = await prisma.submission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubmissionDeleteManyArgs>(args?: SelectSubset<T, SubmissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Submissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Submissions
     * const submission = await prisma.submission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubmissionUpdateManyArgs>(args: SelectSubset<T, SubmissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Submissions and returns the data updated in the database.
     * @param {SubmissionUpdateManyAndReturnArgs} args - Arguments to update many Submissions.
     * @example
     * // Update many Submissions
     * const submission = await prisma.submission.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Submissions and only return the `id`
     * const submissionWithIdOnly = await prisma.submission.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubmissionUpdateManyAndReturnArgs>(args: SelectSubset<T, SubmissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Submission.
     * @param {SubmissionUpsertArgs} args - Arguments to update or create a Submission.
     * @example
     * // Update or create a Submission
     * const submission = await prisma.submission.upsert({
     *   create: {
     *     // ... data to create a Submission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Submission we want to update
     *   }
     * })
     */
    upsert<T extends SubmissionUpsertArgs>(args: SelectSubset<T, SubmissionUpsertArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Submissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionCountArgs} args - Arguments to filter Submissions to count.
     * @example
     * // Count the number of Submissions
     * const count = await prisma.submission.count({
     *   where: {
     *     // ... the filter for the Submissions we want to count
     *   }
     * })
    **/
    count<T extends SubmissionCountArgs>(
      args?: Subset<T, SubmissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubmissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Submission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubmissionAggregateArgs>(args: Subset<T, SubmissionAggregateArgs>): Prisma.PrismaPromise<GetSubmissionAggregateType<T>>

    /**
     * Group by Submission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubmissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubmissionGroupByArgs['orderBy'] }
        : { orderBy?: SubmissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubmissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubmissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Submission model
   */
  readonly fields: SubmissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Submission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubmissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assignment<T extends Submission$assignmentArgs<ExtArgs> = {}>(args?: Subset<T, Submission$assignmentArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Submission model
   */
  interface SubmissionFieldRefs {
    readonly id: FieldRef<"Submission", 'String'>
    readonly answer: FieldRef<"Submission", 'String'>
    readonly feedback: FieldRef<"Submission", 'String'>
    readonly score: FieldRef<"Submission", 'Int'>
    readonly file: FieldRef<"Submission", 'String'>
    readonly assignmentId: FieldRef<"Submission", 'String'>
    readonly studentId: FieldRef<"Submission", 'String'>
    readonly createdAt: FieldRef<"Submission", 'DateTime'>
    readonly updateAt: FieldRef<"Submission", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Submission findUnique
   */
  export type SubmissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where: SubmissionWhereUniqueInput
  }

  /**
   * Submission findUniqueOrThrow
   */
  export type SubmissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where: SubmissionWhereUniqueInput
  }

  /**
   * Submission findFirst
   */
  export type SubmissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Submissions.
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Submissions.
     */
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Submission findFirstOrThrow
   */
  export type SubmissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Submissions.
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Submissions.
     */
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Submission findMany
   */
  export type SubmissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submissions to fetch.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Submissions.
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Submission create
   */
  export type SubmissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * The data needed to create a Submission.
     */
    data: XOR<SubmissionCreateInput, SubmissionUncheckedCreateInput>
  }

  /**
   * Submission createMany
   */
  export type SubmissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Submissions.
     */
    data: SubmissionCreateManyInput | SubmissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Submission createManyAndReturn
   */
  export type SubmissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * The data used to create many Submissions.
     */
    data: SubmissionCreateManyInput | SubmissionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Submission update
   */
  export type SubmissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * The data needed to update a Submission.
     */
    data: XOR<SubmissionUpdateInput, SubmissionUncheckedUpdateInput>
    /**
     * Choose, which Submission to update.
     */
    where: SubmissionWhereUniqueInput
  }

  /**
   * Submission updateMany
   */
  export type SubmissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Submissions.
     */
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyInput>
    /**
     * Filter which Submissions to update
     */
    where?: SubmissionWhereInput
    /**
     * Limit how many Submissions to update.
     */
    limit?: number
  }

  /**
   * Submission updateManyAndReturn
   */
  export type SubmissionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * The data used to update Submissions.
     */
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyInput>
    /**
     * Filter which Submissions to update
     */
    where?: SubmissionWhereInput
    /**
     * Limit how many Submissions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Submission upsert
   */
  export type SubmissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * The filter to search for the Submission to update in case it exists.
     */
    where: SubmissionWhereUniqueInput
    /**
     * In case the Submission found by the `where` argument doesn't exist, create a new Submission with this data.
     */
    create: XOR<SubmissionCreateInput, SubmissionUncheckedCreateInput>
    /**
     * In case the Submission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubmissionUpdateInput, SubmissionUncheckedUpdateInput>
  }

  /**
   * Submission delete
   */
  export type SubmissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter which Submission to delete.
     */
    where: SubmissionWhereUniqueInput
  }

  /**
   * Submission deleteMany
   */
  export type SubmissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Submissions to delete
     */
    where?: SubmissionWhereInput
    /**
     * Limit how many Submissions to delete.
     */
    limit?: number
  }

  /**
   * Submission.assignment
   */
  export type Submission$assignmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    where?: AssignmentWhereInput
  }

  /**
   * Submission without action
   */
  export type SubmissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
  }


  /**
   * Model Grade
   */

  export type AggregateGrade = {
    _count: GradeCountAggregateOutputType | null
    _min: GradeMinAggregateOutputType | null
    _max: GradeMaxAggregateOutputType | null
  }

  export type GradeMinAggregateOutputType = {
    id: string | null
    title: string | null
    session: string | null
    term: string | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type GradeMaxAggregateOutputType = {
    id: string | null
    title: string | null
    session: string | null
    term: string | null
    createdAt: Date | null
    updateAt: Date | null
  }

  export type GradeCountAggregateOutputType = {
    id: number
    title: number
    session: number
    term: number
    createdAt: number
    updateAt: number
    _all: number
  }


  export type GradeMinAggregateInputType = {
    id?: true
    title?: true
    session?: true
    term?: true
    createdAt?: true
    updateAt?: true
  }

  export type GradeMaxAggregateInputType = {
    id?: true
    title?: true
    session?: true
    term?: true
    createdAt?: true
    updateAt?: true
  }

  export type GradeCountAggregateInputType = {
    id?: true
    title?: true
    session?: true
    term?: true
    createdAt?: true
    updateAt?: true
    _all?: true
  }

  export type GradeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Grade to aggregate.
     */
    where?: GradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grades to fetch.
     */
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Grades
    **/
    _count?: true | GradeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GradeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GradeMaxAggregateInputType
  }

  export type GetGradeAggregateType<T extends GradeAggregateArgs> = {
        [P in keyof T & keyof AggregateGrade]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGrade[P]>
      : GetScalarType<T[P], AggregateGrade[P]>
  }




  export type GradeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GradeWhereInput
    orderBy?: GradeOrderByWithAggregationInput | GradeOrderByWithAggregationInput[]
    by: GradeScalarFieldEnum[] | GradeScalarFieldEnum
    having?: GradeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GradeCountAggregateInputType | true
    _min?: GradeMinAggregateInputType
    _max?: GradeMaxAggregateInputType
  }

  export type GradeGroupByOutputType = {
    id: string
    title: string
    session: string
    term: string
    createdAt: Date
    updateAt: Date
    _count: GradeCountAggregateOutputType | null
    _min: GradeMinAggregateOutputType | null
    _max: GradeMaxAggregateOutputType | null
  }

  type GetGradeGroupByPayload<T extends GradeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GradeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GradeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GradeGroupByOutputType[P]>
            : GetScalarType<T[P], GradeGroupByOutputType[P]>
        }
      >
    >


  export type GradeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    session?: boolean
    term?: boolean
    createdAt?: boolean
    updateAt?: boolean
    gradings?: boolean | Grade$gradingsArgs<ExtArgs>
    effective?: boolean | Grade$effectiveArgs<ExtArgs>
    psychomotive?: boolean | Grade$psychomotiveArgs<ExtArgs>
    _count?: boolean | GradeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["grade"]>

  export type GradeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    session?: boolean
    term?: boolean
    createdAt?: boolean
    updateAt?: boolean
  }, ExtArgs["result"]["grade"]>

  export type GradeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    session?: boolean
    term?: boolean
    createdAt?: boolean
    updateAt?: boolean
  }, ExtArgs["result"]["grade"]>

  export type GradeSelectScalar = {
    id?: boolean
    title?: boolean
    session?: boolean
    term?: boolean
    createdAt?: boolean
    updateAt?: boolean
  }

  export type GradeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "session" | "term" | "createdAt" | "updateAt", ExtArgs["result"]["grade"]>
  export type GradeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gradings?: boolean | Grade$gradingsArgs<ExtArgs>
    effective?: boolean | Grade$effectiveArgs<ExtArgs>
    psychomotive?: boolean | Grade$psychomotiveArgs<ExtArgs>
    _count?: boolean | GradeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GradeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type GradeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $GradePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Grade"
    objects: {
      gradings: Prisma.$ClassGradePayload<ExtArgs>[]
      effective: Prisma.$EffectiveDomainPayload<ExtArgs>[]
      psychomotive: Prisma.$PsychomotiveDomainPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      session: string
      term: string
      createdAt: Date
      updateAt: Date
    }, ExtArgs["result"]["grade"]>
    composites: {}
  }

  type GradeGetPayload<S extends boolean | null | undefined | GradeDefaultArgs> = $Result.GetResult<Prisma.$GradePayload, S>

  type GradeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GradeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GradeCountAggregateInputType | true
    }

  export interface GradeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Grade'], meta: { name: 'Grade' } }
    /**
     * Find zero or one Grade that matches the filter.
     * @param {GradeFindUniqueArgs} args - Arguments to find a Grade
     * @example
     * // Get one Grade
     * const grade = await prisma.grade.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GradeFindUniqueArgs>(args: SelectSubset<T, GradeFindUniqueArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Grade that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GradeFindUniqueOrThrowArgs} args - Arguments to find a Grade
     * @example
     * // Get one Grade
     * const grade = await prisma.grade.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GradeFindUniqueOrThrowArgs>(args: SelectSubset<T, GradeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Grade that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeFindFirstArgs} args - Arguments to find a Grade
     * @example
     * // Get one Grade
     * const grade = await prisma.grade.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GradeFindFirstArgs>(args?: SelectSubset<T, GradeFindFirstArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Grade that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeFindFirstOrThrowArgs} args - Arguments to find a Grade
     * @example
     * // Get one Grade
     * const grade = await prisma.grade.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GradeFindFirstOrThrowArgs>(args?: SelectSubset<T, GradeFindFirstOrThrowArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Grades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Grades
     * const grades = await prisma.grade.findMany()
     * 
     * // Get first 10 Grades
     * const grades = await prisma.grade.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gradeWithIdOnly = await prisma.grade.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GradeFindManyArgs>(args?: SelectSubset<T, GradeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Grade.
     * @param {GradeCreateArgs} args - Arguments to create a Grade.
     * @example
     * // Create one Grade
     * const Grade = await prisma.grade.create({
     *   data: {
     *     // ... data to create a Grade
     *   }
     * })
     * 
     */
    create<T extends GradeCreateArgs>(args: SelectSubset<T, GradeCreateArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Grades.
     * @param {GradeCreateManyArgs} args - Arguments to create many Grades.
     * @example
     * // Create many Grades
     * const grade = await prisma.grade.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GradeCreateManyArgs>(args?: SelectSubset<T, GradeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Grades and returns the data saved in the database.
     * @param {GradeCreateManyAndReturnArgs} args - Arguments to create many Grades.
     * @example
     * // Create many Grades
     * const grade = await prisma.grade.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Grades and only return the `id`
     * const gradeWithIdOnly = await prisma.grade.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GradeCreateManyAndReturnArgs>(args?: SelectSubset<T, GradeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Grade.
     * @param {GradeDeleteArgs} args - Arguments to delete one Grade.
     * @example
     * // Delete one Grade
     * const Grade = await prisma.grade.delete({
     *   where: {
     *     // ... filter to delete one Grade
     *   }
     * })
     * 
     */
    delete<T extends GradeDeleteArgs>(args: SelectSubset<T, GradeDeleteArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Grade.
     * @param {GradeUpdateArgs} args - Arguments to update one Grade.
     * @example
     * // Update one Grade
     * const grade = await prisma.grade.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GradeUpdateArgs>(args: SelectSubset<T, GradeUpdateArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Grades.
     * @param {GradeDeleteManyArgs} args - Arguments to filter Grades to delete.
     * @example
     * // Delete a few Grades
     * const { count } = await prisma.grade.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GradeDeleteManyArgs>(args?: SelectSubset<T, GradeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Grades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Grades
     * const grade = await prisma.grade.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GradeUpdateManyArgs>(args: SelectSubset<T, GradeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Grades and returns the data updated in the database.
     * @param {GradeUpdateManyAndReturnArgs} args - Arguments to update many Grades.
     * @example
     * // Update many Grades
     * const grade = await prisma.grade.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Grades and only return the `id`
     * const gradeWithIdOnly = await prisma.grade.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GradeUpdateManyAndReturnArgs>(args: SelectSubset<T, GradeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Grade.
     * @param {GradeUpsertArgs} args - Arguments to update or create a Grade.
     * @example
     * // Update or create a Grade
     * const grade = await prisma.grade.upsert({
     *   create: {
     *     // ... data to create a Grade
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Grade we want to update
     *   }
     * })
     */
    upsert<T extends GradeUpsertArgs>(args: SelectSubset<T, GradeUpsertArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Grades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeCountArgs} args - Arguments to filter Grades to count.
     * @example
     * // Count the number of Grades
     * const count = await prisma.grade.count({
     *   where: {
     *     // ... the filter for the Grades we want to count
     *   }
     * })
    **/
    count<T extends GradeCountArgs>(
      args?: Subset<T, GradeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GradeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Grade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GradeAggregateArgs>(args: Subset<T, GradeAggregateArgs>): Prisma.PrismaPromise<GetGradeAggregateType<T>>

    /**
     * Group by Grade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GradeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GradeGroupByArgs['orderBy'] }
        : { orderBy?: GradeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GradeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGradeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Grade model
   */
  readonly fields: GradeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Grade.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GradeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    gradings<T extends Grade$gradingsArgs<ExtArgs> = {}>(args?: Subset<T, Grade$gradingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassGradePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    effective<T extends Grade$effectiveArgs<ExtArgs> = {}>(args?: Subset<T, Grade$effectiveArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EffectiveDomainPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    psychomotive<T extends Grade$psychomotiveArgs<ExtArgs> = {}>(args?: Subset<T, Grade$psychomotiveArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PsychomotiveDomainPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Grade model
   */
  interface GradeFieldRefs {
    readonly id: FieldRef<"Grade", 'String'>
    readonly title: FieldRef<"Grade", 'String'>
    readonly session: FieldRef<"Grade", 'String'>
    readonly term: FieldRef<"Grade", 'String'>
    readonly createdAt: FieldRef<"Grade", 'DateTime'>
    readonly updateAt: FieldRef<"Grade", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Grade findUnique
   */
  export type GradeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grade to fetch.
     */
    where: GradeWhereUniqueInput
  }

  /**
   * Grade findUniqueOrThrow
   */
  export type GradeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grade to fetch.
     */
    where: GradeWhereUniqueInput
  }

  /**
   * Grade findFirst
   */
  export type GradeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grade to fetch.
     */
    where?: GradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grades to fetch.
     */
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Grades.
     */
    cursor?: GradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Grades.
     */
    distinct?: GradeScalarFieldEnum | GradeScalarFieldEnum[]
  }

  /**
   * Grade findFirstOrThrow
   */
  export type GradeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grade to fetch.
     */
    where?: GradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grades to fetch.
     */
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Grades.
     */
    cursor?: GradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Grades.
     */
    distinct?: GradeScalarFieldEnum | GradeScalarFieldEnum[]
  }

  /**
   * Grade findMany
   */
  export type GradeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grades to fetch.
     */
    where?: GradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grades to fetch.
     */
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Grades.
     */
    cursor?: GradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grades.
     */
    skip?: number
    distinct?: GradeScalarFieldEnum | GradeScalarFieldEnum[]
  }

  /**
   * Grade create
   */
  export type GradeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * The data needed to create a Grade.
     */
    data: XOR<GradeCreateInput, GradeUncheckedCreateInput>
  }

  /**
   * Grade createMany
   */
  export type GradeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Grades.
     */
    data: GradeCreateManyInput | GradeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Grade createManyAndReturn
   */
  export type GradeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * The data used to create many Grades.
     */
    data: GradeCreateManyInput | GradeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Grade update
   */
  export type GradeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * The data needed to update a Grade.
     */
    data: XOR<GradeUpdateInput, GradeUncheckedUpdateInput>
    /**
     * Choose, which Grade to update.
     */
    where: GradeWhereUniqueInput
  }

  /**
   * Grade updateMany
   */
  export type GradeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Grades.
     */
    data: XOR<GradeUpdateManyMutationInput, GradeUncheckedUpdateManyInput>
    /**
     * Filter which Grades to update
     */
    where?: GradeWhereInput
    /**
     * Limit how many Grades to update.
     */
    limit?: number
  }

  /**
   * Grade updateManyAndReturn
   */
  export type GradeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * The data used to update Grades.
     */
    data: XOR<GradeUpdateManyMutationInput, GradeUncheckedUpdateManyInput>
    /**
     * Filter which Grades to update
     */
    where?: GradeWhereInput
    /**
     * Limit how many Grades to update.
     */
    limit?: number
  }

  /**
   * Grade upsert
   */
  export type GradeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * The filter to search for the Grade to update in case it exists.
     */
    where: GradeWhereUniqueInput
    /**
     * In case the Grade found by the `where` argument doesn't exist, create a new Grade with this data.
     */
    create: XOR<GradeCreateInput, GradeUncheckedCreateInput>
    /**
     * In case the Grade was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GradeUpdateInput, GradeUncheckedUpdateInput>
  }

  /**
   * Grade delete
   */
  export type GradeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter which Grade to delete.
     */
    where: GradeWhereUniqueInput
  }

  /**
   * Grade deleteMany
   */
  export type GradeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Grades to delete
     */
    where?: GradeWhereInput
    /**
     * Limit how many Grades to delete.
     */
    limit?: number
  }

  /**
   * Grade.gradings
   */
  export type Grade$gradingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassGrade
     */
    select?: ClassGradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassGrade
     */
    omit?: ClassGradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassGradeInclude<ExtArgs> | null
    where?: ClassGradeWhereInput
    orderBy?: ClassGradeOrderByWithRelationInput | ClassGradeOrderByWithRelationInput[]
    cursor?: ClassGradeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassGradeScalarFieldEnum | ClassGradeScalarFieldEnum[]
  }

  /**
   * Grade.effective
   */
  export type Grade$effectiveArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EffectiveDomain
     */
    select?: EffectiveDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EffectiveDomain
     */
    omit?: EffectiveDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EffectiveDomainInclude<ExtArgs> | null
    where?: EffectiveDomainWhereInput
    orderBy?: EffectiveDomainOrderByWithRelationInput | EffectiveDomainOrderByWithRelationInput[]
    cursor?: EffectiveDomainWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EffectiveDomainScalarFieldEnum | EffectiveDomainScalarFieldEnum[]
  }

  /**
   * Grade.psychomotive
   */
  export type Grade$psychomotiveArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsychomotiveDomain
     */
    select?: PsychomotiveDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PsychomotiveDomain
     */
    omit?: PsychomotiveDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsychomotiveDomainInclude<ExtArgs> | null
    where?: PsychomotiveDomainWhereInput
    orderBy?: PsychomotiveDomainOrderByWithRelationInput | PsychomotiveDomainOrderByWithRelationInput[]
    cursor?: PsychomotiveDomainWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PsychomotiveDomainScalarFieldEnum | PsychomotiveDomainScalarFieldEnum[]
  }

  /**
   * Grade without action
   */
  export type GradeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Grade
     */
    omit?: GradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
  }


  /**
   * Model ClassGrade
   */

  export type AggregateClassGrade = {
    _count: ClassGradeCountAggregateOutputType | null
    _min: ClassGradeMinAggregateOutputType | null
    _max: ClassGradeMaxAggregateOutputType | null
  }

  export type ClassGradeMinAggregateOutputType = {
    id: string | null
    classid: string | null
    gradeid: string | null
  }

  export type ClassGradeMaxAggregateOutputType = {
    id: string | null
    classid: string | null
    gradeid: string | null
  }

  export type ClassGradeCountAggregateOutputType = {
    id: number
    classid: number
    gradeid: number
    _all: number
  }


  export type ClassGradeMinAggregateInputType = {
    id?: true
    classid?: true
    gradeid?: true
  }

  export type ClassGradeMaxAggregateInputType = {
    id?: true
    classid?: true
    gradeid?: true
  }

  export type ClassGradeCountAggregateInputType = {
    id?: true
    classid?: true
    gradeid?: true
    _all?: true
  }

  export type ClassGradeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClassGrade to aggregate.
     */
    where?: ClassGradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassGrades to fetch.
     */
    orderBy?: ClassGradeOrderByWithRelationInput | ClassGradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClassGradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassGrades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassGrades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClassGrades
    **/
    _count?: true | ClassGradeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClassGradeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClassGradeMaxAggregateInputType
  }

  export type GetClassGradeAggregateType<T extends ClassGradeAggregateArgs> = {
        [P in keyof T & keyof AggregateClassGrade]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClassGrade[P]>
      : GetScalarType<T[P], AggregateClassGrade[P]>
  }




  export type ClassGradeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassGradeWhereInput
    orderBy?: ClassGradeOrderByWithAggregationInput | ClassGradeOrderByWithAggregationInput[]
    by: ClassGradeScalarFieldEnum[] | ClassGradeScalarFieldEnum
    having?: ClassGradeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClassGradeCountAggregateInputType | true
    _min?: ClassGradeMinAggregateInputType
    _max?: ClassGradeMaxAggregateInputType
  }

  export type ClassGradeGroupByOutputType = {
    id: string
    classid: string
    gradeid: string
    _count: ClassGradeCountAggregateOutputType | null
    _min: ClassGradeMinAggregateOutputType | null
    _max: ClassGradeMaxAggregateOutputType | null
  }

  type GetClassGradeGroupByPayload<T extends ClassGradeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClassGradeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClassGradeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClassGradeGroupByOutputType[P]>
            : GetScalarType<T[P], ClassGradeGroupByOutputType[P]>
        }
      >
    >


  export type ClassGradeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    classid?: boolean
    gradeid?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    grade?: boolean | GradeDefaultArgs<ExtArgs>
    subjects?: boolean | ClassGrade$subjectsArgs<ExtArgs>
    _count?: boolean | ClassGradeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classGrade"]>

  export type ClassGradeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    classid?: boolean
    gradeid?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    grade?: boolean | GradeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classGrade"]>

  export type ClassGradeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    classid?: boolean
    gradeid?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    grade?: boolean | GradeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classGrade"]>

  export type ClassGradeSelectScalar = {
    id?: boolean
    classid?: boolean
    gradeid?: boolean
  }

  export type ClassGradeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "classid" | "gradeid", ExtArgs["result"]["classGrade"]>
  export type ClassGradeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    grade?: boolean | GradeDefaultArgs<ExtArgs>
    subjects?: boolean | ClassGrade$subjectsArgs<ExtArgs>
    _count?: boolean | ClassGradeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClassGradeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    grade?: boolean | GradeDefaultArgs<ExtArgs>
  }
  export type ClassGradeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    grade?: boolean | GradeDefaultArgs<ExtArgs>
  }

  export type $ClassGradePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ClassGrade"
    objects: {
      class: Prisma.$ClassPayload<ExtArgs>
      grade: Prisma.$GradePayload<ExtArgs>
      subjects: Prisma.$SubjectGradePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      classid: string
      gradeid: string
    }, ExtArgs["result"]["classGrade"]>
    composites: {}
  }

  type ClassGradeGetPayload<S extends boolean | null | undefined | ClassGradeDefaultArgs> = $Result.GetResult<Prisma.$ClassGradePayload, S>

  type ClassGradeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClassGradeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClassGradeCountAggregateInputType | true
    }

  export interface ClassGradeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClassGrade'], meta: { name: 'ClassGrade' } }
    /**
     * Find zero or one ClassGrade that matches the filter.
     * @param {ClassGradeFindUniqueArgs} args - Arguments to find a ClassGrade
     * @example
     * // Get one ClassGrade
     * const classGrade = await prisma.classGrade.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClassGradeFindUniqueArgs>(args: SelectSubset<T, ClassGradeFindUniqueArgs<ExtArgs>>): Prisma__ClassGradeClient<$Result.GetResult<Prisma.$ClassGradePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ClassGrade that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClassGradeFindUniqueOrThrowArgs} args - Arguments to find a ClassGrade
     * @example
     * // Get one ClassGrade
     * const classGrade = await prisma.classGrade.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClassGradeFindUniqueOrThrowArgs>(args: SelectSubset<T, ClassGradeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClassGradeClient<$Result.GetResult<Prisma.$ClassGradePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClassGrade that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassGradeFindFirstArgs} args - Arguments to find a ClassGrade
     * @example
     * // Get one ClassGrade
     * const classGrade = await prisma.classGrade.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClassGradeFindFirstArgs>(args?: SelectSubset<T, ClassGradeFindFirstArgs<ExtArgs>>): Prisma__ClassGradeClient<$Result.GetResult<Prisma.$ClassGradePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClassGrade that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassGradeFindFirstOrThrowArgs} args - Arguments to find a ClassGrade
     * @example
     * // Get one ClassGrade
     * const classGrade = await prisma.classGrade.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClassGradeFindFirstOrThrowArgs>(args?: SelectSubset<T, ClassGradeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClassGradeClient<$Result.GetResult<Prisma.$ClassGradePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ClassGrades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassGradeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClassGrades
     * const classGrades = await prisma.classGrade.findMany()
     * 
     * // Get first 10 ClassGrades
     * const classGrades = await prisma.classGrade.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const classGradeWithIdOnly = await prisma.classGrade.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClassGradeFindManyArgs>(args?: SelectSubset<T, ClassGradeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassGradePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ClassGrade.
     * @param {ClassGradeCreateArgs} args - Arguments to create a ClassGrade.
     * @example
     * // Create one ClassGrade
     * const ClassGrade = await prisma.classGrade.create({
     *   data: {
     *     // ... data to create a ClassGrade
     *   }
     * })
     * 
     */
    create<T extends ClassGradeCreateArgs>(args: SelectSubset<T, ClassGradeCreateArgs<ExtArgs>>): Prisma__ClassGradeClient<$Result.GetResult<Prisma.$ClassGradePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ClassGrades.
     * @param {ClassGradeCreateManyArgs} args - Arguments to create many ClassGrades.
     * @example
     * // Create many ClassGrades
     * const classGrade = await prisma.classGrade.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClassGradeCreateManyArgs>(args?: SelectSubset<T, ClassGradeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ClassGrades and returns the data saved in the database.
     * @param {ClassGradeCreateManyAndReturnArgs} args - Arguments to create many ClassGrades.
     * @example
     * // Create many ClassGrades
     * const classGrade = await prisma.classGrade.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ClassGrades and only return the `id`
     * const classGradeWithIdOnly = await prisma.classGrade.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClassGradeCreateManyAndReturnArgs>(args?: SelectSubset<T, ClassGradeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassGradePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ClassGrade.
     * @param {ClassGradeDeleteArgs} args - Arguments to delete one ClassGrade.
     * @example
     * // Delete one ClassGrade
     * const ClassGrade = await prisma.classGrade.delete({
     *   where: {
     *     // ... filter to delete one ClassGrade
     *   }
     * })
     * 
     */
    delete<T extends ClassGradeDeleteArgs>(args: SelectSubset<T, ClassGradeDeleteArgs<ExtArgs>>): Prisma__ClassGradeClient<$Result.GetResult<Prisma.$ClassGradePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ClassGrade.
     * @param {ClassGradeUpdateArgs} args - Arguments to update one ClassGrade.
     * @example
     * // Update one ClassGrade
     * const classGrade = await prisma.classGrade.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClassGradeUpdateArgs>(args: SelectSubset<T, ClassGradeUpdateArgs<ExtArgs>>): Prisma__ClassGradeClient<$Result.GetResult<Prisma.$ClassGradePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ClassGrades.
     * @param {ClassGradeDeleteManyArgs} args - Arguments to filter ClassGrades to delete.
     * @example
     * // Delete a few ClassGrades
     * const { count } = await prisma.classGrade.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClassGradeDeleteManyArgs>(args?: SelectSubset<T, ClassGradeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClassGrades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassGradeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClassGrades
     * const classGrade = await prisma.classGrade.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClassGradeUpdateManyArgs>(args: SelectSubset<T, ClassGradeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClassGrades and returns the data updated in the database.
     * @param {ClassGradeUpdateManyAndReturnArgs} args - Arguments to update many ClassGrades.
     * @example
     * // Update many ClassGrades
     * const classGrade = await prisma.classGrade.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ClassGrades and only return the `id`
     * const classGradeWithIdOnly = await prisma.classGrade.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClassGradeUpdateManyAndReturnArgs>(args: SelectSubset<T, ClassGradeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassGradePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ClassGrade.
     * @param {ClassGradeUpsertArgs} args - Arguments to update or create a ClassGrade.
     * @example
     * // Update or create a ClassGrade
     * const classGrade = await prisma.classGrade.upsert({
     *   create: {
     *     // ... data to create a ClassGrade
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClassGrade we want to update
     *   }
     * })
     */
    upsert<T extends ClassGradeUpsertArgs>(args: SelectSubset<T, ClassGradeUpsertArgs<ExtArgs>>): Prisma__ClassGradeClient<$Result.GetResult<Prisma.$ClassGradePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ClassGrades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassGradeCountArgs} args - Arguments to filter ClassGrades to count.
     * @example
     * // Count the number of ClassGrades
     * const count = await prisma.classGrade.count({
     *   where: {
     *     // ... the filter for the ClassGrades we want to count
     *   }
     * })
    **/
    count<T extends ClassGradeCountArgs>(
      args?: Subset<T, ClassGradeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassGradeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClassGrade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassGradeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassGradeAggregateArgs>(args: Subset<T, ClassGradeAggregateArgs>): Prisma.PrismaPromise<GetClassGradeAggregateType<T>>

    /**
     * Group by ClassGrade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassGradeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClassGradeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClassGradeGroupByArgs['orderBy'] }
        : { orderBy?: ClassGradeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClassGradeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassGradeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClassGrade model
   */
  readonly fields: ClassGradeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClassGrade.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClassGradeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    grade<T extends GradeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GradeDefaultArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    subjects<T extends ClassGrade$subjectsArgs<ExtArgs> = {}>(args?: Subset<T, ClassGrade$subjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectGradePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ClassGrade model
   */
  interface ClassGradeFieldRefs {
    readonly id: FieldRef<"ClassGrade", 'String'>
    readonly classid: FieldRef<"ClassGrade", 'String'>
    readonly gradeid: FieldRef<"ClassGrade", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ClassGrade findUnique
   */
  export type ClassGradeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassGrade
     */
    select?: ClassGradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassGrade
     */
    omit?: ClassGradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassGradeInclude<ExtArgs> | null
    /**
     * Filter, which ClassGrade to fetch.
     */
    where: ClassGradeWhereUniqueInput
  }

  /**
   * ClassGrade findUniqueOrThrow
   */
  export type ClassGradeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassGrade
     */
    select?: ClassGradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassGrade
     */
    omit?: ClassGradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassGradeInclude<ExtArgs> | null
    /**
     * Filter, which ClassGrade to fetch.
     */
    where: ClassGradeWhereUniqueInput
  }

  /**
   * ClassGrade findFirst
   */
  export type ClassGradeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassGrade
     */
    select?: ClassGradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassGrade
     */
    omit?: ClassGradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassGradeInclude<ExtArgs> | null
    /**
     * Filter, which ClassGrade to fetch.
     */
    where?: ClassGradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassGrades to fetch.
     */
    orderBy?: ClassGradeOrderByWithRelationInput | ClassGradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClassGrades.
     */
    cursor?: ClassGradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassGrades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassGrades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClassGrades.
     */
    distinct?: ClassGradeScalarFieldEnum | ClassGradeScalarFieldEnum[]
  }

  /**
   * ClassGrade findFirstOrThrow
   */
  export type ClassGradeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassGrade
     */
    select?: ClassGradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassGrade
     */
    omit?: ClassGradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassGradeInclude<ExtArgs> | null
    /**
     * Filter, which ClassGrade to fetch.
     */
    where?: ClassGradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassGrades to fetch.
     */
    orderBy?: ClassGradeOrderByWithRelationInput | ClassGradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClassGrades.
     */
    cursor?: ClassGradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassGrades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassGrades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClassGrades.
     */
    distinct?: ClassGradeScalarFieldEnum | ClassGradeScalarFieldEnum[]
  }

  /**
   * ClassGrade findMany
   */
  export type ClassGradeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassGrade
     */
    select?: ClassGradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassGrade
     */
    omit?: ClassGradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassGradeInclude<ExtArgs> | null
    /**
     * Filter, which ClassGrades to fetch.
     */
    where?: ClassGradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassGrades to fetch.
     */
    orderBy?: ClassGradeOrderByWithRelationInput | ClassGradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClassGrades.
     */
    cursor?: ClassGradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassGrades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassGrades.
     */
    skip?: number
    distinct?: ClassGradeScalarFieldEnum | ClassGradeScalarFieldEnum[]
  }

  /**
   * ClassGrade create
   */
  export type ClassGradeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassGrade
     */
    select?: ClassGradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassGrade
     */
    omit?: ClassGradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassGradeInclude<ExtArgs> | null
    /**
     * The data needed to create a ClassGrade.
     */
    data: XOR<ClassGradeCreateInput, ClassGradeUncheckedCreateInput>
  }

  /**
   * ClassGrade createMany
   */
  export type ClassGradeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClassGrades.
     */
    data: ClassGradeCreateManyInput | ClassGradeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ClassGrade createManyAndReturn
   */
  export type ClassGradeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassGrade
     */
    select?: ClassGradeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ClassGrade
     */
    omit?: ClassGradeOmit<ExtArgs> | null
    /**
     * The data used to create many ClassGrades.
     */
    data: ClassGradeCreateManyInput | ClassGradeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassGradeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClassGrade update
   */
  export type ClassGradeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassGrade
     */
    select?: ClassGradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassGrade
     */
    omit?: ClassGradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassGradeInclude<ExtArgs> | null
    /**
     * The data needed to update a ClassGrade.
     */
    data: XOR<ClassGradeUpdateInput, ClassGradeUncheckedUpdateInput>
    /**
     * Choose, which ClassGrade to update.
     */
    where: ClassGradeWhereUniqueInput
  }

  /**
   * ClassGrade updateMany
   */
  export type ClassGradeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClassGrades.
     */
    data: XOR<ClassGradeUpdateManyMutationInput, ClassGradeUncheckedUpdateManyInput>
    /**
     * Filter which ClassGrades to update
     */
    where?: ClassGradeWhereInput
    /**
     * Limit how many ClassGrades to update.
     */
    limit?: number
  }

  /**
   * ClassGrade updateManyAndReturn
   */
  export type ClassGradeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassGrade
     */
    select?: ClassGradeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ClassGrade
     */
    omit?: ClassGradeOmit<ExtArgs> | null
    /**
     * The data used to update ClassGrades.
     */
    data: XOR<ClassGradeUpdateManyMutationInput, ClassGradeUncheckedUpdateManyInput>
    /**
     * Filter which ClassGrades to update
     */
    where?: ClassGradeWhereInput
    /**
     * Limit how many ClassGrades to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassGradeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClassGrade upsert
   */
  export type ClassGradeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassGrade
     */
    select?: ClassGradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassGrade
     */
    omit?: ClassGradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassGradeInclude<ExtArgs> | null
    /**
     * The filter to search for the ClassGrade to update in case it exists.
     */
    where: ClassGradeWhereUniqueInput
    /**
     * In case the ClassGrade found by the `where` argument doesn't exist, create a new ClassGrade with this data.
     */
    create: XOR<ClassGradeCreateInput, ClassGradeUncheckedCreateInput>
    /**
     * In case the ClassGrade was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClassGradeUpdateInput, ClassGradeUncheckedUpdateInput>
  }

  /**
   * ClassGrade delete
   */
  export type ClassGradeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassGrade
     */
    select?: ClassGradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassGrade
     */
    omit?: ClassGradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassGradeInclude<ExtArgs> | null
    /**
     * Filter which ClassGrade to delete.
     */
    where: ClassGradeWhereUniqueInput
  }

  /**
   * ClassGrade deleteMany
   */
  export type ClassGradeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClassGrades to delete
     */
    where?: ClassGradeWhereInput
    /**
     * Limit how many ClassGrades to delete.
     */
    limit?: number
  }

  /**
   * ClassGrade.subjects
   */
  export type ClassGrade$subjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectGrade
     */
    select?: SubjectGradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubjectGrade
     */
    omit?: SubjectGradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectGradeInclude<ExtArgs> | null
    where?: SubjectGradeWhereInput
    orderBy?: SubjectGradeOrderByWithRelationInput | SubjectGradeOrderByWithRelationInput[]
    cursor?: SubjectGradeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubjectGradeScalarFieldEnum | SubjectGradeScalarFieldEnum[]
  }

  /**
   * ClassGrade without action
   */
  export type ClassGradeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassGrade
     */
    select?: ClassGradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassGrade
     */
    omit?: ClassGradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassGradeInclude<ExtArgs> | null
  }


  /**
   * Model SubjectGrade
   */

  export type AggregateSubjectGrade = {
    _count: SubjectGradeCountAggregateOutputType | null
    _min: SubjectGradeMinAggregateOutputType | null
    _max: SubjectGradeMaxAggregateOutputType | null
  }

  export type SubjectGradeMinAggregateOutputType = {
    id: string | null
    subjectid: string | null
    classid: string | null
  }

  export type SubjectGradeMaxAggregateOutputType = {
    id: string | null
    subjectid: string | null
    classid: string | null
  }

  export type SubjectGradeCountAggregateOutputType = {
    id: number
    subjectid: number
    classid: number
    _all: number
  }


  export type SubjectGradeMinAggregateInputType = {
    id?: true
    subjectid?: true
    classid?: true
  }

  export type SubjectGradeMaxAggregateInputType = {
    id?: true
    subjectid?: true
    classid?: true
  }

  export type SubjectGradeCountAggregateInputType = {
    id?: true
    subjectid?: true
    classid?: true
    _all?: true
  }

  export type SubjectGradeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubjectGrade to aggregate.
     */
    where?: SubjectGradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubjectGrades to fetch.
     */
    orderBy?: SubjectGradeOrderByWithRelationInput | SubjectGradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubjectGradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubjectGrades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubjectGrades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SubjectGrades
    **/
    _count?: true | SubjectGradeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubjectGradeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubjectGradeMaxAggregateInputType
  }

  export type GetSubjectGradeAggregateType<T extends SubjectGradeAggregateArgs> = {
        [P in keyof T & keyof AggregateSubjectGrade]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubjectGrade[P]>
      : GetScalarType<T[P], AggregateSubjectGrade[P]>
  }




  export type SubjectGradeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubjectGradeWhereInput
    orderBy?: SubjectGradeOrderByWithAggregationInput | SubjectGradeOrderByWithAggregationInput[]
    by: SubjectGradeScalarFieldEnum[] | SubjectGradeScalarFieldEnum
    having?: SubjectGradeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubjectGradeCountAggregateInputType | true
    _min?: SubjectGradeMinAggregateInputType
    _max?: SubjectGradeMaxAggregateInputType
  }

  export type SubjectGradeGroupByOutputType = {
    id: string
    subjectid: string
    classid: string
    _count: SubjectGradeCountAggregateOutputType | null
    _min: SubjectGradeMinAggregateOutputType | null
    _max: SubjectGradeMaxAggregateOutputType | null
  }

  type GetSubjectGradeGroupByPayload<T extends SubjectGradeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubjectGradeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubjectGradeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubjectGradeGroupByOutputType[P]>
            : GetScalarType<T[P], SubjectGradeGroupByOutputType[P]>
        }
      >
    >


  export type SubjectGradeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subjectid?: boolean
    classid?: boolean
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    class?: boolean | ClassGradeDefaultArgs<ExtArgs>
    students?: boolean | SubjectGrade$studentsArgs<ExtArgs>
    _count?: boolean | SubjectGradeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subjectGrade"]>

  export type SubjectGradeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subjectid?: boolean
    classid?: boolean
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    class?: boolean | ClassGradeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subjectGrade"]>

  export type SubjectGradeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subjectid?: boolean
    classid?: boolean
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    class?: boolean | ClassGradeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subjectGrade"]>

  export type SubjectGradeSelectScalar = {
    id?: boolean
    subjectid?: boolean
    classid?: boolean
  }

  export type SubjectGradeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "subjectid" | "classid", ExtArgs["result"]["subjectGrade"]>
  export type SubjectGradeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    class?: boolean | ClassGradeDefaultArgs<ExtArgs>
    students?: boolean | SubjectGrade$studentsArgs<ExtArgs>
    _count?: boolean | SubjectGradeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SubjectGradeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    class?: boolean | ClassGradeDefaultArgs<ExtArgs>
  }
  export type SubjectGradeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subject?: boolean | SubjectDefaultArgs<ExtArgs>
    class?: boolean | ClassGradeDefaultArgs<ExtArgs>
  }

  export type $SubjectGradePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SubjectGrade"
    objects: {
      subject: Prisma.$SubjectPayload<ExtArgs>
      class: Prisma.$ClassGradePayload<ExtArgs>
      students: Prisma.$StudentGradePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      subjectid: string
      classid: string
    }, ExtArgs["result"]["subjectGrade"]>
    composites: {}
  }

  type SubjectGradeGetPayload<S extends boolean | null | undefined | SubjectGradeDefaultArgs> = $Result.GetResult<Prisma.$SubjectGradePayload, S>

  type SubjectGradeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubjectGradeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubjectGradeCountAggregateInputType | true
    }

  export interface SubjectGradeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SubjectGrade'], meta: { name: 'SubjectGrade' } }
    /**
     * Find zero or one SubjectGrade that matches the filter.
     * @param {SubjectGradeFindUniqueArgs} args - Arguments to find a SubjectGrade
     * @example
     * // Get one SubjectGrade
     * const subjectGrade = await prisma.subjectGrade.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubjectGradeFindUniqueArgs>(args: SelectSubset<T, SubjectGradeFindUniqueArgs<ExtArgs>>): Prisma__SubjectGradeClient<$Result.GetResult<Prisma.$SubjectGradePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SubjectGrade that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubjectGradeFindUniqueOrThrowArgs} args - Arguments to find a SubjectGrade
     * @example
     * // Get one SubjectGrade
     * const subjectGrade = await prisma.subjectGrade.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubjectGradeFindUniqueOrThrowArgs>(args: SelectSubset<T, SubjectGradeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubjectGradeClient<$Result.GetResult<Prisma.$SubjectGradePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SubjectGrade that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectGradeFindFirstArgs} args - Arguments to find a SubjectGrade
     * @example
     * // Get one SubjectGrade
     * const subjectGrade = await prisma.subjectGrade.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubjectGradeFindFirstArgs>(args?: SelectSubset<T, SubjectGradeFindFirstArgs<ExtArgs>>): Prisma__SubjectGradeClient<$Result.GetResult<Prisma.$SubjectGradePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SubjectGrade that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectGradeFindFirstOrThrowArgs} args - Arguments to find a SubjectGrade
     * @example
     * // Get one SubjectGrade
     * const subjectGrade = await prisma.subjectGrade.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubjectGradeFindFirstOrThrowArgs>(args?: SelectSubset<T, SubjectGradeFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubjectGradeClient<$Result.GetResult<Prisma.$SubjectGradePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SubjectGrades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectGradeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SubjectGrades
     * const subjectGrades = await prisma.subjectGrade.findMany()
     * 
     * // Get first 10 SubjectGrades
     * const subjectGrades = await prisma.subjectGrade.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subjectGradeWithIdOnly = await prisma.subjectGrade.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubjectGradeFindManyArgs>(args?: SelectSubset<T, SubjectGradeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectGradePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SubjectGrade.
     * @param {SubjectGradeCreateArgs} args - Arguments to create a SubjectGrade.
     * @example
     * // Create one SubjectGrade
     * const SubjectGrade = await prisma.subjectGrade.create({
     *   data: {
     *     // ... data to create a SubjectGrade
     *   }
     * })
     * 
     */
    create<T extends SubjectGradeCreateArgs>(args: SelectSubset<T, SubjectGradeCreateArgs<ExtArgs>>): Prisma__SubjectGradeClient<$Result.GetResult<Prisma.$SubjectGradePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SubjectGrades.
     * @param {SubjectGradeCreateManyArgs} args - Arguments to create many SubjectGrades.
     * @example
     * // Create many SubjectGrades
     * const subjectGrade = await prisma.subjectGrade.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubjectGradeCreateManyArgs>(args?: SelectSubset<T, SubjectGradeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SubjectGrades and returns the data saved in the database.
     * @param {SubjectGradeCreateManyAndReturnArgs} args - Arguments to create many SubjectGrades.
     * @example
     * // Create many SubjectGrades
     * const subjectGrade = await prisma.subjectGrade.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SubjectGrades and only return the `id`
     * const subjectGradeWithIdOnly = await prisma.subjectGrade.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubjectGradeCreateManyAndReturnArgs>(args?: SelectSubset<T, SubjectGradeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectGradePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SubjectGrade.
     * @param {SubjectGradeDeleteArgs} args - Arguments to delete one SubjectGrade.
     * @example
     * // Delete one SubjectGrade
     * const SubjectGrade = await prisma.subjectGrade.delete({
     *   where: {
     *     // ... filter to delete one SubjectGrade
     *   }
     * })
     * 
     */
    delete<T extends SubjectGradeDeleteArgs>(args: SelectSubset<T, SubjectGradeDeleteArgs<ExtArgs>>): Prisma__SubjectGradeClient<$Result.GetResult<Prisma.$SubjectGradePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SubjectGrade.
     * @param {SubjectGradeUpdateArgs} args - Arguments to update one SubjectGrade.
     * @example
     * // Update one SubjectGrade
     * const subjectGrade = await prisma.subjectGrade.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubjectGradeUpdateArgs>(args: SelectSubset<T, SubjectGradeUpdateArgs<ExtArgs>>): Prisma__SubjectGradeClient<$Result.GetResult<Prisma.$SubjectGradePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SubjectGrades.
     * @param {SubjectGradeDeleteManyArgs} args - Arguments to filter SubjectGrades to delete.
     * @example
     * // Delete a few SubjectGrades
     * const { count } = await prisma.subjectGrade.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubjectGradeDeleteManyArgs>(args?: SelectSubset<T, SubjectGradeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubjectGrades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectGradeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SubjectGrades
     * const subjectGrade = await prisma.subjectGrade.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubjectGradeUpdateManyArgs>(args: SelectSubset<T, SubjectGradeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubjectGrades and returns the data updated in the database.
     * @param {SubjectGradeUpdateManyAndReturnArgs} args - Arguments to update many SubjectGrades.
     * @example
     * // Update many SubjectGrades
     * const subjectGrade = await prisma.subjectGrade.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SubjectGrades and only return the `id`
     * const subjectGradeWithIdOnly = await prisma.subjectGrade.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubjectGradeUpdateManyAndReturnArgs>(args: SelectSubset<T, SubjectGradeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubjectGradePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SubjectGrade.
     * @param {SubjectGradeUpsertArgs} args - Arguments to update or create a SubjectGrade.
     * @example
     * // Update or create a SubjectGrade
     * const subjectGrade = await prisma.subjectGrade.upsert({
     *   create: {
     *     // ... data to create a SubjectGrade
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SubjectGrade we want to update
     *   }
     * })
     */
    upsert<T extends SubjectGradeUpsertArgs>(args: SelectSubset<T, SubjectGradeUpsertArgs<ExtArgs>>): Prisma__SubjectGradeClient<$Result.GetResult<Prisma.$SubjectGradePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SubjectGrades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectGradeCountArgs} args - Arguments to filter SubjectGrades to count.
     * @example
     * // Count the number of SubjectGrades
     * const count = await prisma.subjectGrade.count({
     *   where: {
     *     // ... the filter for the SubjectGrades we want to count
     *   }
     * })
    **/
    count<T extends SubjectGradeCountArgs>(
      args?: Subset<T, SubjectGradeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubjectGradeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SubjectGrade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectGradeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubjectGradeAggregateArgs>(args: Subset<T, SubjectGradeAggregateArgs>): Prisma.PrismaPromise<GetSubjectGradeAggregateType<T>>

    /**
     * Group by SubjectGrade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectGradeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubjectGradeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubjectGradeGroupByArgs['orderBy'] }
        : { orderBy?: SubjectGradeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubjectGradeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubjectGradeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SubjectGrade model
   */
  readonly fields: SubjectGradeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SubjectGrade.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubjectGradeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subject<T extends SubjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubjectDefaultArgs<ExtArgs>>): Prisma__SubjectClient<$Result.GetResult<Prisma.$SubjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    class<T extends ClassGradeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassGradeDefaultArgs<ExtArgs>>): Prisma__ClassGradeClient<$Result.GetResult<Prisma.$ClassGradePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    students<T extends SubjectGrade$studentsArgs<ExtArgs> = {}>(args?: Subset<T, SubjectGrade$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentGradePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SubjectGrade model
   */
  interface SubjectGradeFieldRefs {
    readonly id: FieldRef<"SubjectGrade", 'String'>
    readonly subjectid: FieldRef<"SubjectGrade", 'String'>
    readonly classid: FieldRef<"SubjectGrade", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SubjectGrade findUnique
   */
  export type SubjectGradeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectGrade
     */
    select?: SubjectGradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubjectGrade
     */
    omit?: SubjectGradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectGradeInclude<ExtArgs> | null
    /**
     * Filter, which SubjectGrade to fetch.
     */
    where: SubjectGradeWhereUniqueInput
  }

  /**
   * SubjectGrade findUniqueOrThrow
   */
  export type SubjectGradeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectGrade
     */
    select?: SubjectGradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubjectGrade
     */
    omit?: SubjectGradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectGradeInclude<ExtArgs> | null
    /**
     * Filter, which SubjectGrade to fetch.
     */
    where: SubjectGradeWhereUniqueInput
  }

  /**
   * SubjectGrade findFirst
   */
  export type SubjectGradeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectGrade
     */
    select?: SubjectGradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubjectGrade
     */
    omit?: SubjectGradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectGradeInclude<ExtArgs> | null
    /**
     * Filter, which SubjectGrade to fetch.
     */
    where?: SubjectGradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubjectGrades to fetch.
     */
    orderBy?: SubjectGradeOrderByWithRelationInput | SubjectGradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubjectGrades.
     */
    cursor?: SubjectGradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubjectGrades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubjectGrades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubjectGrades.
     */
    distinct?: SubjectGradeScalarFieldEnum | SubjectGradeScalarFieldEnum[]
  }

  /**
   * SubjectGrade findFirstOrThrow
   */
  export type SubjectGradeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectGrade
     */
    select?: SubjectGradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubjectGrade
     */
    omit?: SubjectGradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectGradeInclude<ExtArgs> | null
    /**
     * Filter, which SubjectGrade to fetch.
     */
    where?: SubjectGradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubjectGrades to fetch.
     */
    orderBy?: SubjectGradeOrderByWithRelationInput | SubjectGradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubjectGrades.
     */
    cursor?: SubjectGradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubjectGrades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubjectGrades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubjectGrades.
     */
    distinct?: SubjectGradeScalarFieldEnum | SubjectGradeScalarFieldEnum[]
  }

  /**
   * SubjectGrade findMany
   */
  export type SubjectGradeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectGrade
     */
    select?: SubjectGradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubjectGrade
     */
    omit?: SubjectGradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectGradeInclude<ExtArgs> | null
    /**
     * Filter, which SubjectGrades to fetch.
     */
    where?: SubjectGradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubjectGrades to fetch.
     */
    orderBy?: SubjectGradeOrderByWithRelationInput | SubjectGradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SubjectGrades.
     */
    cursor?: SubjectGradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubjectGrades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubjectGrades.
     */
    skip?: number
    distinct?: SubjectGradeScalarFieldEnum | SubjectGradeScalarFieldEnum[]
  }

  /**
   * SubjectGrade create
   */
  export type SubjectGradeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectGrade
     */
    select?: SubjectGradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubjectGrade
     */
    omit?: SubjectGradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectGradeInclude<ExtArgs> | null
    /**
     * The data needed to create a SubjectGrade.
     */
    data: XOR<SubjectGradeCreateInput, SubjectGradeUncheckedCreateInput>
  }

  /**
   * SubjectGrade createMany
   */
  export type SubjectGradeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SubjectGrades.
     */
    data: SubjectGradeCreateManyInput | SubjectGradeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SubjectGrade createManyAndReturn
   */
  export type SubjectGradeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectGrade
     */
    select?: SubjectGradeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SubjectGrade
     */
    omit?: SubjectGradeOmit<ExtArgs> | null
    /**
     * The data used to create many SubjectGrades.
     */
    data: SubjectGradeCreateManyInput | SubjectGradeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectGradeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SubjectGrade update
   */
  export type SubjectGradeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectGrade
     */
    select?: SubjectGradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubjectGrade
     */
    omit?: SubjectGradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectGradeInclude<ExtArgs> | null
    /**
     * The data needed to update a SubjectGrade.
     */
    data: XOR<SubjectGradeUpdateInput, SubjectGradeUncheckedUpdateInput>
    /**
     * Choose, which SubjectGrade to update.
     */
    where: SubjectGradeWhereUniqueInput
  }

  /**
   * SubjectGrade updateMany
   */
  export type SubjectGradeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SubjectGrades.
     */
    data: XOR<SubjectGradeUpdateManyMutationInput, SubjectGradeUncheckedUpdateManyInput>
    /**
     * Filter which SubjectGrades to update
     */
    where?: SubjectGradeWhereInput
    /**
     * Limit how many SubjectGrades to update.
     */
    limit?: number
  }

  /**
   * SubjectGrade updateManyAndReturn
   */
  export type SubjectGradeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectGrade
     */
    select?: SubjectGradeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SubjectGrade
     */
    omit?: SubjectGradeOmit<ExtArgs> | null
    /**
     * The data used to update SubjectGrades.
     */
    data: XOR<SubjectGradeUpdateManyMutationInput, SubjectGradeUncheckedUpdateManyInput>
    /**
     * Filter which SubjectGrades to update
     */
    where?: SubjectGradeWhereInput
    /**
     * Limit how many SubjectGrades to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectGradeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SubjectGrade upsert
   */
  export type SubjectGradeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectGrade
     */
    select?: SubjectGradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubjectGrade
     */
    omit?: SubjectGradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectGradeInclude<ExtArgs> | null
    /**
     * The filter to search for the SubjectGrade to update in case it exists.
     */
    where: SubjectGradeWhereUniqueInput
    /**
     * In case the SubjectGrade found by the `where` argument doesn't exist, create a new SubjectGrade with this data.
     */
    create: XOR<SubjectGradeCreateInput, SubjectGradeUncheckedCreateInput>
    /**
     * In case the SubjectGrade was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubjectGradeUpdateInput, SubjectGradeUncheckedUpdateInput>
  }

  /**
   * SubjectGrade delete
   */
  export type SubjectGradeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectGrade
     */
    select?: SubjectGradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubjectGrade
     */
    omit?: SubjectGradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectGradeInclude<ExtArgs> | null
    /**
     * Filter which SubjectGrade to delete.
     */
    where: SubjectGradeWhereUniqueInput
  }

  /**
   * SubjectGrade deleteMany
   */
  export type SubjectGradeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubjectGrades to delete
     */
    where?: SubjectGradeWhereInput
    /**
     * Limit how many SubjectGrades to delete.
     */
    limit?: number
  }

  /**
   * SubjectGrade.students
   */
  export type SubjectGrade$studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentGrade
     */
    select?: StudentGradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentGrade
     */
    omit?: StudentGradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentGradeInclude<ExtArgs> | null
    where?: StudentGradeWhereInput
    orderBy?: StudentGradeOrderByWithRelationInput | StudentGradeOrderByWithRelationInput[]
    cursor?: StudentGradeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentGradeScalarFieldEnum | StudentGradeScalarFieldEnum[]
  }

  /**
   * SubjectGrade without action
   */
  export type SubjectGradeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubjectGrade
     */
    select?: SubjectGradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubjectGrade
     */
    omit?: SubjectGradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubjectGradeInclude<ExtArgs> | null
  }


  /**
   * Model StudentGrade
   */

  export type AggregateStudentGrade = {
    _count: StudentGradeCountAggregateOutputType | null
    _avg: StudentGradeAvgAggregateOutputType | null
    _sum: StudentGradeSumAggregateOutputType | null
    _min: StudentGradeMinAggregateOutputType | null
    _max: StudentGradeMaxAggregateOutputType | null
  }

  export type StudentGradeAvgAggregateOutputType = {
    firstCa: number | null
    secondCa: number | null
    thirdCa: number | null
    fourthCa: number | null
    exams: number | null
    score: number | null
    grade: number | null
    remark: number | null
  }

  export type StudentGradeSumAggregateOutputType = {
    firstCa: number | null
    secondCa: number | null
    thirdCa: number | null
    fourthCa: number | null
    exams: number | null
    score: number | null
    grade: number | null
    remark: number | null
  }

  export type StudentGradeMinAggregateOutputType = {
    id: string | null
    firstCa: number | null
    secondCa: number | null
    thirdCa: number | null
    fourthCa: number | null
    exams: number | null
    score: number | null
    grade: number | null
    remark: number | null
    studentid: string | null
    subjectgradeid: string | null
  }

  export type StudentGradeMaxAggregateOutputType = {
    id: string | null
    firstCa: number | null
    secondCa: number | null
    thirdCa: number | null
    fourthCa: number | null
    exams: number | null
    score: number | null
    grade: number | null
    remark: number | null
    studentid: string | null
    subjectgradeid: string | null
  }

  export type StudentGradeCountAggregateOutputType = {
    id: number
    firstCa: number
    secondCa: number
    thirdCa: number
    fourthCa: number
    exams: number
    score: number
    grade: number
    remark: number
    studentid: number
    subjectgradeid: number
    _all: number
  }


  export type StudentGradeAvgAggregateInputType = {
    firstCa?: true
    secondCa?: true
    thirdCa?: true
    fourthCa?: true
    exams?: true
    score?: true
    grade?: true
    remark?: true
  }

  export type StudentGradeSumAggregateInputType = {
    firstCa?: true
    secondCa?: true
    thirdCa?: true
    fourthCa?: true
    exams?: true
    score?: true
    grade?: true
    remark?: true
  }

  export type StudentGradeMinAggregateInputType = {
    id?: true
    firstCa?: true
    secondCa?: true
    thirdCa?: true
    fourthCa?: true
    exams?: true
    score?: true
    grade?: true
    remark?: true
    studentid?: true
    subjectgradeid?: true
  }

  export type StudentGradeMaxAggregateInputType = {
    id?: true
    firstCa?: true
    secondCa?: true
    thirdCa?: true
    fourthCa?: true
    exams?: true
    score?: true
    grade?: true
    remark?: true
    studentid?: true
    subjectgradeid?: true
  }

  export type StudentGradeCountAggregateInputType = {
    id?: true
    firstCa?: true
    secondCa?: true
    thirdCa?: true
    fourthCa?: true
    exams?: true
    score?: true
    grade?: true
    remark?: true
    studentid?: true
    subjectgradeid?: true
    _all?: true
  }

  export type StudentGradeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentGrade to aggregate.
     */
    where?: StudentGradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentGrades to fetch.
     */
    orderBy?: StudentGradeOrderByWithRelationInput | StudentGradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentGradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentGrades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentGrades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudentGrades
    **/
    _count?: true | StudentGradeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentGradeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentGradeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentGradeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentGradeMaxAggregateInputType
  }

  export type GetStudentGradeAggregateType<T extends StudentGradeAggregateArgs> = {
        [P in keyof T & keyof AggregateStudentGrade]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudentGrade[P]>
      : GetScalarType<T[P], AggregateStudentGrade[P]>
  }




  export type StudentGradeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentGradeWhereInput
    orderBy?: StudentGradeOrderByWithAggregationInput | StudentGradeOrderByWithAggregationInput[]
    by: StudentGradeScalarFieldEnum[] | StudentGradeScalarFieldEnum
    having?: StudentGradeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentGradeCountAggregateInputType | true
    _avg?: StudentGradeAvgAggregateInputType
    _sum?: StudentGradeSumAggregateInputType
    _min?: StudentGradeMinAggregateInputType
    _max?: StudentGradeMaxAggregateInputType
  }

  export type StudentGradeGroupByOutputType = {
    id: string
    firstCa: number
    secondCa: number
    thirdCa: number
    fourthCa: number
    exams: number
    score: number
    grade: number
    remark: number
    studentid: string
    subjectgradeid: string
    _count: StudentGradeCountAggregateOutputType | null
    _avg: StudentGradeAvgAggregateOutputType | null
    _sum: StudentGradeSumAggregateOutputType | null
    _min: StudentGradeMinAggregateOutputType | null
    _max: StudentGradeMaxAggregateOutputType | null
  }

  type GetStudentGradeGroupByPayload<T extends StudentGradeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentGradeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentGradeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentGradeGroupByOutputType[P]>
            : GetScalarType<T[P], StudentGradeGroupByOutputType[P]>
        }
      >
    >


  export type StudentGradeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstCa?: boolean
    secondCa?: boolean
    thirdCa?: boolean
    fourthCa?: boolean
    exams?: boolean
    score?: boolean
    grade?: boolean
    remark?: boolean
    studentid?: boolean
    subjectgradeid?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    subjectGrade?: boolean | SubjectGradeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentGrade"]>

  export type StudentGradeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstCa?: boolean
    secondCa?: boolean
    thirdCa?: boolean
    fourthCa?: boolean
    exams?: boolean
    score?: boolean
    grade?: boolean
    remark?: boolean
    studentid?: boolean
    subjectgradeid?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    subjectGrade?: boolean | SubjectGradeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentGrade"]>

  export type StudentGradeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstCa?: boolean
    secondCa?: boolean
    thirdCa?: boolean
    fourthCa?: boolean
    exams?: boolean
    score?: boolean
    grade?: boolean
    remark?: boolean
    studentid?: boolean
    subjectgradeid?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    subjectGrade?: boolean | SubjectGradeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentGrade"]>

  export type StudentGradeSelectScalar = {
    id?: boolean
    firstCa?: boolean
    secondCa?: boolean
    thirdCa?: boolean
    fourthCa?: boolean
    exams?: boolean
    score?: boolean
    grade?: boolean
    remark?: boolean
    studentid?: boolean
    subjectgradeid?: boolean
  }

  export type StudentGradeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "firstCa" | "secondCa" | "thirdCa" | "fourthCa" | "exams" | "score" | "grade" | "remark" | "studentid" | "subjectgradeid", ExtArgs["result"]["studentGrade"]>
  export type StudentGradeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    subjectGrade?: boolean | SubjectGradeDefaultArgs<ExtArgs>
  }
  export type StudentGradeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    subjectGrade?: boolean | SubjectGradeDefaultArgs<ExtArgs>
  }
  export type StudentGradeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    subjectGrade?: boolean | SubjectGradeDefaultArgs<ExtArgs>
  }

  export type $StudentGradePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudentGrade"
    objects: {
      student: Prisma.$StudentPayload<ExtArgs>
      subjectGrade: Prisma.$SubjectGradePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstCa: number
      secondCa: number
      thirdCa: number
      fourthCa: number
      exams: number
      score: number
      grade: number
      remark: number
      studentid: string
      subjectgradeid: string
    }, ExtArgs["result"]["studentGrade"]>
    composites: {}
  }

  type StudentGradeGetPayload<S extends boolean | null | undefined | StudentGradeDefaultArgs> = $Result.GetResult<Prisma.$StudentGradePayload, S>

  type StudentGradeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudentGradeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentGradeCountAggregateInputType | true
    }

  export interface StudentGradeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudentGrade'], meta: { name: 'StudentGrade' } }
    /**
     * Find zero or one StudentGrade that matches the filter.
     * @param {StudentGradeFindUniqueArgs} args - Arguments to find a StudentGrade
     * @example
     * // Get one StudentGrade
     * const studentGrade = await prisma.studentGrade.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentGradeFindUniqueArgs>(args: SelectSubset<T, StudentGradeFindUniqueArgs<ExtArgs>>): Prisma__StudentGradeClient<$Result.GetResult<Prisma.$StudentGradePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StudentGrade that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudentGradeFindUniqueOrThrowArgs} args - Arguments to find a StudentGrade
     * @example
     * // Get one StudentGrade
     * const studentGrade = await prisma.studentGrade.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentGradeFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentGradeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentGradeClient<$Result.GetResult<Prisma.$StudentGradePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentGrade that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentGradeFindFirstArgs} args - Arguments to find a StudentGrade
     * @example
     * // Get one StudentGrade
     * const studentGrade = await prisma.studentGrade.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentGradeFindFirstArgs>(args?: SelectSubset<T, StudentGradeFindFirstArgs<ExtArgs>>): Prisma__StudentGradeClient<$Result.GetResult<Prisma.$StudentGradePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentGrade that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentGradeFindFirstOrThrowArgs} args - Arguments to find a StudentGrade
     * @example
     * // Get one StudentGrade
     * const studentGrade = await prisma.studentGrade.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentGradeFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentGradeFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentGradeClient<$Result.GetResult<Prisma.$StudentGradePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StudentGrades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentGradeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudentGrades
     * const studentGrades = await prisma.studentGrade.findMany()
     * 
     * // Get first 10 StudentGrades
     * const studentGrades = await prisma.studentGrade.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentGradeWithIdOnly = await prisma.studentGrade.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudentGradeFindManyArgs>(args?: SelectSubset<T, StudentGradeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentGradePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StudentGrade.
     * @param {StudentGradeCreateArgs} args - Arguments to create a StudentGrade.
     * @example
     * // Create one StudentGrade
     * const StudentGrade = await prisma.studentGrade.create({
     *   data: {
     *     // ... data to create a StudentGrade
     *   }
     * })
     * 
     */
    create<T extends StudentGradeCreateArgs>(args: SelectSubset<T, StudentGradeCreateArgs<ExtArgs>>): Prisma__StudentGradeClient<$Result.GetResult<Prisma.$StudentGradePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StudentGrades.
     * @param {StudentGradeCreateManyArgs} args - Arguments to create many StudentGrades.
     * @example
     * // Create many StudentGrades
     * const studentGrade = await prisma.studentGrade.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentGradeCreateManyArgs>(args?: SelectSubset<T, StudentGradeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StudentGrades and returns the data saved in the database.
     * @param {StudentGradeCreateManyAndReturnArgs} args - Arguments to create many StudentGrades.
     * @example
     * // Create many StudentGrades
     * const studentGrade = await prisma.studentGrade.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StudentGrades and only return the `id`
     * const studentGradeWithIdOnly = await prisma.studentGrade.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudentGradeCreateManyAndReturnArgs>(args?: SelectSubset<T, StudentGradeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentGradePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StudentGrade.
     * @param {StudentGradeDeleteArgs} args - Arguments to delete one StudentGrade.
     * @example
     * // Delete one StudentGrade
     * const StudentGrade = await prisma.studentGrade.delete({
     *   where: {
     *     // ... filter to delete one StudentGrade
     *   }
     * })
     * 
     */
    delete<T extends StudentGradeDeleteArgs>(args: SelectSubset<T, StudentGradeDeleteArgs<ExtArgs>>): Prisma__StudentGradeClient<$Result.GetResult<Prisma.$StudentGradePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StudentGrade.
     * @param {StudentGradeUpdateArgs} args - Arguments to update one StudentGrade.
     * @example
     * // Update one StudentGrade
     * const studentGrade = await prisma.studentGrade.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentGradeUpdateArgs>(args: SelectSubset<T, StudentGradeUpdateArgs<ExtArgs>>): Prisma__StudentGradeClient<$Result.GetResult<Prisma.$StudentGradePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StudentGrades.
     * @param {StudentGradeDeleteManyArgs} args - Arguments to filter StudentGrades to delete.
     * @example
     * // Delete a few StudentGrades
     * const { count } = await prisma.studentGrade.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentGradeDeleteManyArgs>(args?: SelectSubset<T, StudentGradeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentGrades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentGradeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudentGrades
     * const studentGrade = await prisma.studentGrade.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentGradeUpdateManyArgs>(args: SelectSubset<T, StudentGradeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentGrades and returns the data updated in the database.
     * @param {StudentGradeUpdateManyAndReturnArgs} args - Arguments to update many StudentGrades.
     * @example
     * // Update many StudentGrades
     * const studentGrade = await prisma.studentGrade.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StudentGrades and only return the `id`
     * const studentGradeWithIdOnly = await prisma.studentGrade.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudentGradeUpdateManyAndReturnArgs>(args: SelectSubset<T, StudentGradeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentGradePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StudentGrade.
     * @param {StudentGradeUpsertArgs} args - Arguments to update or create a StudentGrade.
     * @example
     * // Update or create a StudentGrade
     * const studentGrade = await prisma.studentGrade.upsert({
     *   create: {
     *     // ... data to create a StudentGrade
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudentGrade we want to update
     *   }
     * })
     */
    upsert<T extends StudentGradeUpsertArgs>(args: SelectSubset<T, StudentGradeUpsertArgs<ExtArgs>>): Prisma__StudentGradeClient<$Result.GetResult<Prisma.$StudentGradePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StudentGrades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentGradeCountArgs} args - Arguments to filter StudentGrades to count.
     * @example
     * // Count the number of StudentGrades
     * const count = await prisma.studentGrade.count({
     *   where: {
     *     // ... the filter for the StudentGrades we want to count
     *   }
     * })
    **/
    count<T extends StudentGradeCountArgs>(
      args?: Subset<T, StudentGradeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentGradeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudentGrade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentGradeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentGradeAggregateArgs>(args: Subset<T, StudentGradeAggregateArgs>): Prisma.PrismaPromise<GetStudentGradeAggregateType<T>>

    /**
     * Group by StudentGrade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentGradeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentGradeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentGradeGroupByArgs['orderBy'] }
        : { orderBy?: StudentGradeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentGradeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentGradeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudentGrade model
   */
  readonly fields: StudentGradeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudentGrade.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentGradeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    subjectGrade<T extends SubjectGradeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubjectGradeDefaultArgs<ExtArgs>>): Prisma__SubjectGradeClient<$Result.GetResult<Prisma.$SubjectGradePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StudentGrade model
   */
  interface StudentGradeFieldRefs {
    readonly id: FieldRef<"StudentGrade", 'String'>
    readonly firstCa: FieldRef<"StudentGrade", 'Int'>
    readonly secondCa: FieldRef<"StudentGrade", 'Int'>
    readonly thirdCa: FieldRef<"StudentGrade", 'Int'>
    readonly fourthCa: FieldRef<"StudentGrade", 'Int'>
    readonly exams: FieldRef<"StudentGrade", 'Int'>
    readonly score: FieldRef<"StudentGrade", 'Int'>
    readonly grade: FieldRef<"StudentGrade", 'Int'>
    readonly remark: FieldRef<"StudentGrade", 'Int'>
    readonly studentid: FieldRef<"StudentGrade", 'String'>
    readonly subjectgradeid: FieldRef<"StudentGrade", 'String'>
  }
    

  // Custom InputTypes
  /**
   * StudentGrade findUnique
   */
  export type StudentGradeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentGrade
     */
    select?: StudentGradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentGrade
     */
    omit?: StudentGradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentGradeInclude<ExtArgs> | null
    /**
     * Filter, which StudentGrade to fetch.
     */
    where: StudentGradeWhereUniqueInput
  }

  /**
   * StudentGrade findUniqueOrThrow
   */
  export type StudentGradeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentGrade
     */
    select?: StudentGradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentGrade
     */
    omit?: StudentGradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentGradeInclude<ExtArgs> | null
    /**
     * Filter, which StudentGrade to fetch.
     */
    where: StudentGradeWhereUniqueInput
  }

  /**
   * StudentGrade findFirst
   */
  export type StudentGradeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentGrade
     */
    select?: StudentGradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentGrade
     */
    omit?: StudentGradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentGradeInclude<ExtArgs> | null
    /**
     * Filter, which StudentGrade to fetch.
     */
    where?: StudentGradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentGrades to fetch.
     */
    orderBy?: StudentGradeOrderByWithRelationInput | StudentGradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentGrades.
     */
    cursor?: StudentGradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentGrades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentGrades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentGrades.
     */
    distinct?: StudentGradeScalarFieldEnum | StudentGradeScalarFieldEnum[]
  }

  /**
   * StudentGrade findFirstOrThrow
   */
  export type StudentGradeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentGrade
     */
    select?: StudentGradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentGrade
     */
    omit?: StudentGradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentGradeInclude<ExtArgs> | null
    /**
     * Filter, which StudentGrade to fetch.
     */
    where?: StudentGradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentGrades to fetch.
     */
    orderBy?: StudentGradeOrderByWithRelationInput | StudentGradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentGrades.
     */
    cursor?: StudentGradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentGrades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentGrades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentGrades.
     */
    distinct?: StudentGradeScalarFieldEnum | StudentGradeScalarFieldEnum[]
  }

  /**
   * StudentGrade findMany
   */
  export type StudentGradeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentGrade
     */
    select?: StudentGradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentGrade
     */
    omit?: StudentGradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentGradeInclude<ExtArgs> | null
    /**
     * Filter, which StudentGrades to fetch.
     */
    where?: StudentGradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentGrades to fetch.
     */
    orderBy?: StudentGradeOrderByWithRelationInput | StudentGradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudentGrades.
     */
    cursor?: StudentGradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentGrades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentGrades.
     */
    skip?: number
    distinct?: StudentGradeScalarFieldEnum | StudentGradeScalarFieldEnum[]
  }

  /**
   * StudentGrade create
   */
  export type StudentGradeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentGrade
     */
    select?: StudentGradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentGrade
     */
    omit?: StudentGradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentGradeInclude<ExtArgs> | null
    /**
     * The data needed to create a StudentGrade.
     */
    data: XOR<StudentGradeCreateInput, StudentGradeUncheckedCreateInput>
  }

  /**
   * StudentGrade createMany
   */
  export type StudentGradeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudentGrades.
     */
    data: StudentGradeCreateManyInput | StudentGradeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StudentGrade createManyAndReturn
   */
  export type StudentGradeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentGrade
     */
    select?: StudentGradeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentGrade
     */
    omit?: StudentGradeOmit<ExtArgs> | null
    /**
     * The data used to create many StudentGrades.
     */
    data: StudentGradeCreateManyInput | StudentGradeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentGradeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentGrade update
   */
  export type StudentGradeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentGrade
     */
    select?: StudentGradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentGrade
     */
    omit?: StudentGradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentGradeInclude<ExtArgs> | null
    /**
     * The data needed to update a StudentGrade.
     */
    data: XOR<StudentGradeUpdateInput, StudentGradeUncheckedUpdateInput>
    /**
     * Choose, which StudentGrade to update.
     */
    where: StudentGradeWhereUniqueInput
  }

  /**
   * StudentGrade updateMany
   */
  export type StudentGradeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudentGrades.
     */
    data: XOR<StudentGradeUpdateManyMutationInput, StudentGradeUncheckedUpdateManyInput>
    /**
     * Filter which StudentGrades to update
     */
    where?: StudentGradeWhereInput
    /**
     * Limit how many StudentGrades to update.
     */
    limit?: number
  }

  /**
   * StudentGrade updateManyAndReturn
   */
  export type StudentGradeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentGrade
     */
    select?: StudentGradeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentGrade
     */
    omit?: StudentGradeOmit<ExtArgs> | null
    /**
     * The data used to update StudentGrades.
     */
    data: XOR<StudentGradeUpdateManyMutationInput, StudentGradeUncheckedUpdateManyInput>
    /**
     * Filter which StudentGrades to update
     */
    where?: StudentGradeWhereInput
    /**
     * Limit how many StudentGrades to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentGradeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentGrade upsert
   */
  export type StudentGradeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentGrade
     */
    select?: StudentGradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentGrade
     */
    omit?: StudentGradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentGradeInclude<ExtArgs> | null
    /**
     * The filter to search for the StudentGrade to update in case it exists.
     */
    where: StudentGradeWhereUniqueInput
    /**
     * In case the StudentGrade found by the `where` argument doesn't exist, create a new StudentGrade with this data.
     */
    create: XOR<StudentGradeCreateInput, StudentGradeUncheckedCreateInput>
    /**
     * In case the StudentGrade was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentGradeUpdateInput, StudentGradeUncheckedUpdateInput>
  }

  /**
   * StudentGrade delete
   */
  export type StudentGradeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentGrade
     */
    select?: StudentGradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentGrade
     */
    omit?: StudentGradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentGradeInclude<ExtArgs> | null
    /**
     * Filter which StudentGrade to delete.
     */
    where: StudentGradeWhereUniqueInput
  }

  /**
   * StudentGrade deleteMany
   */
  export type StudentGradeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentGrades to delete
     */
    where?: StudentGradeWhereInput
    /**
     * Limit how many StudentGrades to delete.
     */
    limit?: number
  }

  /**
   * StudentGrade without action
   */
  export type StudentGradeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentGrade
     */
    select?: StudentGradeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentGrade
     */
    omit?: StudentGradeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentGradeInclude<ExtArgs> | null
  }


  /**
   * Model EffectiveDomain
   */

  export type AggregateEffectiveDomain = {
    _count: EffectiveDomainCountAggregateOutputType | null
    _avg: EffectiveDomainAvgAggregateOutputType | null
    _sum: EffectiveDomainSumAggregateOutputType | null
    _min: EffectiveDomainMinAggregateOutputType | null
    _max: EffectiveDomainMaxAggregateOutputType | null
  }

  export type EffectiveDomainAvgAggregateOutputType = {
    classattendance: number | null
    punctuality: number | null
    initiative: number | null
    responsibility: number | null
    neatness: number | null
    cooperation: number | null
    organization: number | null
  }

  export type EffectiveDomainSumAggregateOutputType = {
    classattendance: number | null
    punctuality: number | null
    initiative: number | null
    responsibility: number | null
    neatness: number | null
    cooperation: number | null
    organization: number | null
  }

  export type EffectiveDomainMinAggregateOutputType = {
    id: string | null
    classattendance: number | null
    punctuality: number | null
    initiative: number | null
    responsibility: number | null
    neatness: number | null
    cooperation: number | null
    organization: number | null
    studentid: string | null
    gradeid: string | null
  }

  export type EffectiveDomainMaxAggregateOutputType = {
    id: string | null
    classattendance: number | null
    punctuality: number | null
    initiative: number | null
    responsibility: number | null
    neatness: number | null
    cooperation: number | null
    organization: number | null
    studentid: string | null
    gradeid: string | null
  }

  export type EffectiveDomainCountAggregateOutputType = {
    id: number
    classattendance: number
    punctuality: number
    initiative: number
    responsibility: number
    neatness: number
    cooperation: number
    organization: number
    studentid: number
    gradeid: number
    _all: number
  }


  export type EffectiveDomainAvgAggregateInputType = {
    classattendance?: true
    punctuality?: true
    initiative?: true
    responsibility?: true
    neatness?: true
    cooperation?: true
    organization?: true
  }

  export type EffectiveDomainSumAggregateInputType = {
    classattendance?: true
    punctuality?: true
    initiative?: true
    responsibility?: true
    neatness?: true
    cooperation?: true
    organization?: true
  }

  export type EffectiveDomainMinAggregateInputType = {
    id?: true
    classattendance?: true
    punctuality?: true
    initiative?: true
    responsibility?: true
    neatness?: true
    cooperation?: true
    organization?: true
    studentid?: true
    gradeid?: true
  }

  export type EffectiveDomainMaxAggregateInputType = {
    id?: true
    classattendance?: true
    punctuality?: true
    initiative?: true
    responsibility?: true
    neatness?: true
    cooperation?: true
    organization?: true
    studentid?: true
    gradeid?: true
  }

  export type EffectiveDomainCountAggregateInputType = {
    id?: true
    classattendance?: true
    punctuality?: true
    initiative?: true
    responsibility?: true
    neatness?: true
    cooperation?: true
    organization?: true
    studentid?: true
    gradeid?: true
    _all?: true
  }

  export type EffectiveDomainAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EffectiveDomain to aggregate.
     */
    where?: EffectiveDomainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EffectiveDomains to fetch.
     */
    orderBy?: EffectiveDomainOrderByWithRelationInput | EffectiveDomainOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EffectiveDomainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EffectiveDomains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EffectiveDomains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EffectiveDomains
    **/
    _count?: true | EffectiveDomainCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EffectiveDomainAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EffectiveDomainSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EffectiveDomainMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EffectiveDomainMaxAggregateInputType
  }

  export type GetEffectiveDomainAggregateType<T extends EffectiveDomainAggregateArgs> = {
        [P in keyof T & keyof AggregateEffectiveDomain]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEffectiveDomain[P]>
      : GetScalarType<T[P], AggregateEffectiveDomain[P]>
  }




  export type EffectiveDomainGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EffectiveDomainWhereInput
    orderBy?: EffectiveDomainOrderByWithAggregationInput | EffectiveDomainOrderByWithAggregationInput[]
    by: EffectiveDomainScalarFieldEnum[] | EffectiveDomainScalarFieldEnum
    having?: EffectiveDomainScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EffectiveDomainCountAggregateInputType | true
    _avg?: EffectiveDomainAvgAggregateInputType
    _sum?: EffectiveDomainSumAggregateInputType
    _min?: EffectiveDomainMinAggregateInputType
    _max?: EffectiveDomainMaxAggregateInputType
  }

  export type EffectiveDomainGroupByOutputType = {
    id: string
    classattendance: number
    punctuality: number
    initiative: number
    responsibility: number
    neatness: number
    cooperation: number
    organization: number
    studentid: string
    gradeid: string
    _count: EffectiveDomainCountAggregateOutputType | null
    _avg: EffectiveDomainAvgAggregateOutputType | null
    _sum: EffectiveDomainSumAggregateOutputType | null
    _min: EffectiveDomainMinAggregateOutputType | null
    _max: EffectiveDomainMaxAggregateOutputType | null
  }

  type GetEffectiveDomainGroupByPayload<T extends EffectiveDomainGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EffectiveDomainGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EffectiveDomainGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EffectiveDomainGroupByOutputType[P]>
            : GetScalarType<T[P], EffectiveDomainGroupByOutputType[P]>
        }
      >
    >


  export type EffectiveDomainSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    classattendance?: boolean
    punctuality?: boolean
    initiative?: boolean
    responsibility?: boolean
    neatness?: boolean
    cooperation?: boolean
    organization?: boolean
    studentid?: boolean
    gradeid?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    grade?: boolean | GradeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["effectiveDomain"]>

  export type EffectiveDomainSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    classattendance?: boolean
    punctuality?: boolean
    initiative?: boolean
    responsibility?: boolean
    neatness?: boolean
    cooperation?: boolean
    organization?: boolean
    studentid?: boolean
    gradeid?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    grade?: boolean | GradeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["effectiveDomain"]>

  export type EffectiveDomainSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    classattendance?: boolean
    punctuality?: boolean
    initiative?: boolean
    responsibility?: boolean
    neatness?: boolean
    cooperation?: boolean
    organization?: boolean
    studentid?: boolean
    gradeid?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    grade?: boolean | GradeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["effectiveDomain"]>

  export type EffectiveDomainSelectScalar = {
    id?: boolean
    classattendance?: boolean
    punctuality?: boolean
    initiative?: boolean
    responsibility?: boolean
    neatness?: boolean
    cooperation?: boolean
    organization?: boolean
    studentid?: boolean
    gradeid?: boolean
  }

  export type EffectiveDomainOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "classattendance" | "punctuality" | "initiative" | "responsibility" | "neatness" | "cooperation" | "organization" | "studentid" | "gradeid", ExtArgs["result"]["effectiveDomain"]>
  export type EffectiveDomainInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    grade?: boolean | GradeDefaultArgs<ExtArgs>
  }
  export type EffectiveDomainIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    grade?: boolean | GradeDefaultArgs<ExtArgs>
  }
  export type EffectiveDomainIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    grade?: boolean | GradeDefaultArgs<ExtArgs>
  }

  export type $EffectiveDomainPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EffectiveDomain"
    objects: {
      student: Prisma.$StudentPayload<ExtArgs>
      grade: Prisma.$GradePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      classattendance: number
      punctuality: number
      initiative: number
      responsibility: number
      neatness: number
      cooperation: number
      organization: number
      studentid: string
      gradeid: string
    }, ExtArgs["result"]["effectiveDomain"]>
    composites: {}
  }

  type EffectiveDomainGetPayload<S extends boolean | null | undefined | EffectiveDomainDefaultArgs> = $Result.GetResult<Prisma.$EffectiveDomainPayload, S>

  type EffectiveDomainCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EffectiveDomainFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EffectiveDomainCountAggregateInputType | true
    }

  export interface EffectiveDomainDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EffectiveDomain'], meta: { name: 'EffectiveDomain' } }
    /**
     * Find zero or one EffectiveDomain that matches the filter.
     * @param {EffectiveDomainFindUniqueArgs} args - Arguments to find a EffectiveDomain
     * @example
     * // Get one EffectiveDomain
     * const effectiveDomain = await prisma.effectiveDomain.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EffectiveDomainFindUniqueArgs>(args: SelectSubset<T, EffectiveDomainFindUniqueArgs<ExtArgs>>): Prisma__EffectiveDomainClient<$Result.GetResult<Prisma.$EffectiveDomainPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EffectiveDomain that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EffectiveDomainFindUniqueOrThrowArgs} args - Arguments to find a EffectiveDomain
     * @example
     * // Get one EffectiveDomain
     * const effectiveDomain = await prisma.effectiveDomain.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EffectiveDomainFindUniqueOrThrowArgs>(args: SelectSubset<T, EffectiveDomainFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EffectiveDomainClient<$Result.GetResult<Prisma.$EffectiveDomainPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EffectiveDomain that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EffectiveDomainFindFirstArgs} args - Arguments to find a EffectiveDomain
     * @example
     * // Get one EffectiveDomain
     * const effectiveDomain = await prisma.effectiveDomain.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EffectiveDomainFindFirstArgs>(args?: SelectSubset<T, EffectiveDomainFindFirstArgs<ExtArgs>>): Prisma__EffectiveDomainClient<$Result.GetResult<Prisma.$EffectiveDomainPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EffectiveDomain that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EffectiveDomainFindFirstOrThrowArgs} args - Arguments to find a EffectiveDomain
     * @example
     * // Get one EffectiveDomain
     * const effectiveDomain = await prisma.effectiveDomain.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EffectiveDomainFindFirstOrThrowArgs>(args?: SelectSubset<T, EffectiveDomainFindFirstOrThrowArgs<ExtArgs>>): Prisma__EffectiveDomainClient<$Result.GetResult<Prisma.$EffectiveDomainPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EffectiveDomains that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EffectiveDomainFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EffectiveDomains
     * const effectiveDomains = await prisma.effectiveDomain.findMany()
     * 
     * // Get first 10 EffectiveDomains
     * const effectiveDomains = await prisma.effectiveDomain.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const effectiveDomainWithIdOnly = await prisma.effectiveDomain.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EffectiveDomainFindManyArgs>(args?: SelectSubset<T, EffectiveDomainFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EffectiveDomainPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EffectiveDomain.
     * @param {EffectiveDomainCreateArgs} args - Arguments to create a EffectiveDomain.
     * @example
     * // Create one EffectiveDomain
     * const EffectiveDomain = await prisma.effectiveDomain.create({
     *   data: {
     *     // ... data to create a EffectiveDomain
     *   }
     * })
     * 
     */
    create<T extends EffectiveDomainCreateArgs>(args: SelectSubset<T, EffectiveDomainCreateArgs<ExtArgs>>): Prisma__EffectiveDomainClient<$Result.GetResult<Prisma.$EffectiveDomainPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EffectiveDomains.
     * @param {EffectiveDomainCreateManyArgs} args - Arguments to create many EffectiveDomains.
     * @example
     * // Create many EffectiveDomains
     * const effectiveDomain = await prisma.effectiveDomain.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EffectiveDomainCreateManyArgs>(args?: SelectSubset<T, EffectiveDomainCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EffectiveDomains and returns the data saved in the database.
     * @param {EffectiveDomainCreateManyAndReturnArgs} args - Arguments to create many EffectiveDomains.
     * @example
     * // Create many EffectiveDomains
     * const effectiveDomain = await prisma.effectiveDomain.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EffectiveDomains and only return the `id`
     * const effectiveDomainWithIdOnly = await prisma.effectiveDomain.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EffectiveDomainCreateManyAndReturnArgs>(args?: SelectSubset<T, EffectiveDomainCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EffectiveDomainPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EffectiveDomain.
     * @param {EffectiveDomainDeleteArgs} args - Arguments to delete one EffectiveDomain.
     * @example
     * // Delete one EffectiveDomain
     * const EffectiveDomain = await prisma.effectiveDomain.delete({
     *   where: {
     *     // ... filter to delete one EffectiveDomain
     *   }
     * })
     * 
     */
    delete<T extends EffectiveDomainDeleteArgs>(args: SelectSubset<T, EffectiveDomainDeleteArgs<ExtArgs>>): Prisma__EffectiveDomainClient<$Result.GetResult<Prisma.$EffectiveDomainPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EffectiveDomain.
     * @param {EffectiveDomainUpdateArgs} args - Arguments to update one EffectiveDomain.
     * @example
     * // Update one EffectiveDomain
     * const effectiveDomain = await prisma.effectiveDomain.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EffectiveDomainUpdateArgs>(args: SelectSubset<T, EffectiveDomainUpdateArgs<ExtArgs>>): Prisma__EffectiveDomainClient<$Result.GetResult<Prisma.$EffectiveDomainPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EffectiveDomains.
     * @param {EffectiveDomainDeleteManyArgs} args - Arguments to filter EffectiveDomains to delete.
     * @example
     * // Delete a few EffectiveDomains
     * const { count } = await prisma.effectiveDomain.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EffectiveDomainDeleteManyArgs>(args?: SelectSubset<T, EffectiveDomainDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EffectiveDomains.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EffectiveDomainUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EffectiveDomains
     * const effectiveDomain = await prisma.effectiveDomain.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EffectiveDomainUpdateManyArgs>(args: SelectSubset<T, EffectiveDomainUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EffectiveDomains and returns the data updated in the database.
     * @param {EffectiveDomainUpdateManyAndReturnArgs} args - Arguments to update many EffectiveDomains.
     * @example
     * // Update many EffectiveDomains
     * const effectiveDomain = await prisma.effectiveDomain.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EffectiveDomains and only return the `id`
     * const effectiveDomainWithIdOnly = await prisma.effectiveDomain.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EffectiveDomainUpdateManyAndReturnArgs>(args: SelectSubset<T, EffectiveDomainUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EffectiveDomainPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EffectiveDomain.
     * @param {EffectiveDomainUpsertArgs} args - Arguments to update or create a EffectiveDomain.
     * @example
     * // Update or create a EffectiveDomain
     * const effectiveDomain = await prisma.effectiveDomain.upsert({
     *   create: {
     *     // ... data to create a EffectiveDomain
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EffectiveDomain we want to update
     *   }
     * })
     */
    upsert<T extends EffectiveDomainUpsertArgs>(args: SelectSubset<T, EffectiveDomainUpsertArgs<ExtArgs>>): Prisma__EffectiveDomainClient<$Result.GetResult<Prisma.$EffectiveDomainPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EffectiveDomains.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EffectiveDomainCountArgs} args - Arguments to filter EffectiveDomains to count.
     * @example
     * // Count the number of EffectiveDomains
     * const count = await prisma.effectiveDomain.count({
     *   where: {
     *     // ... the filter for the EffectiveDomains we want to count
     *   }
     * })
    **/
    count<T extends EffectiveDomainCountArgs>(
      args?: Subset<T, EffectiveDomainCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EffectiveDomainCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EffectiveDomain.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EffectiveDomainAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EffectiveDomainAggregateArgs>(args: Subset<T, EffectiveDomainAggregateArgs>): Prisma.PrismaPromise<GetEffectiveDomainAggregateType<T>>

    /**
     * Group by EffectiveDomain.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EffectiveDomainGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EffectiveDomainGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EffectiveDomainGroupByArgs['orderBy'] }
        : { orderBy?: EffectiveDomainGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EffectiveDomainGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEffectiveDomainGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EffectiveDomain model
   */
  readonly fields: EffectiveDomainFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EffectiveDomain.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EffectiveDomainClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    grade<T extends GradeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GradeDefaultArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EffectiveDomain model
   */
  interface EffectiveDomainFieldRefs {
    readonly id: FieldRef<"EffectiveDomain", 'String'>
    readonly classattendance: FieldRef<"EffectiveDomain", 'Int'>
    readonly punctuality: FieldRef<"EffectiveDomain", 'Int'>
    readonly initiative: FieldRef<"EffectiveDomain", 'Int'>
    readonly responsibility: FieldRef<"EffectiveDomain", 'Int'>
    readonly neatness: FieldRef<"EffectiveDomain", 'Int'>
    readonly cooperation: FieldRef<"EffectiveDomain", 'Int'>
    readonly organization: FieldRef<"EffectiveDomain", 'Int'>
    readonly studentid: FieldRef<"EffectiveDomain", 'String'>
    readonly gradeid: FieldRef<"EffectiveDomain", 'String'>
  }
    

  // Custom InputTypes
  /**
   * EffectiveDomain findUnique
   */
  export type EffectiveDomainFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EffectiveDomain
     */
    select?: EffectiveDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EffectiveDomain
     */
    omit?: EffectiveDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EffectiveDomainInclude<ExtArgs> | null
    /**
     * Filter, which EffectiveDomain to fetch.
     */
    where: EffectiveDomainWhereUniqueInput
  }

  /**
   * EffectiveDomain findUniqueOrThrow
   */
  export type EffectiveDomainFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EffectiveDomain
     */
    select?: EffectiveDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EffectiveDomain
     */
    omit?: EffectiveDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EffectiveDomainInclude<ExtArgs> | null
    /**
     * Filter, which EffectiveDomain to fetch.
     */
    where: EffectiveDomainWhereUniqueInput
  }

  /**
   * EffectiveDomain findFirst
   */
  export type EffectiveDomainFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EffectiveDomain
     */
    select?: EffectiveDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EffectiveDomain
     */
    omit?: EffectiveDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EffectiveDomainInclude<ExtArgs> | null
    /**
     * Filter, which EffectiveDomain to fetch.
     */
    where?: EffectiveDomainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EffectiveDomains to fetch.
     */
    orderBy?: EffectiveDomainOrderByWithRelationInput | EffectiveDomainOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EffectiveDomains.
     */
    cursor?: EffectiveDomainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EffectiveDomains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EffectiveDomains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EffectiveDomains.
     */
    distinct?: EffectiveDomainScalarFieldEnum | EffectiveDomainScalarFieldEnum[]
  }

  /**
   * EffectiveDomain findFirstOrThrow
   */
  export type EffectiveDomainFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EffectiveDomain
     */
    select?: EffectiveDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EffectiveDomain
     */
    omit?: EffectiveDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EffectiveDomainInclude<ExtArgs> | null
    /**
     * Filter, which EffectiveDomain to fetch.
     */
    where?: EffectiveDomainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EffectiveDomains to fetch.
     */
    orderBy?: EffectiveDomainOrderByWithRelationInput | EffectiveDomainOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EffectiveDomains.
     */
    cursor?: EffectiveDomainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EffectiveDomains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EffectiveDomains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EffectiveDomains.
     */
    distinct?: EffectiveDomainScalarFieldEnum | EffectiveDomainScalarFieldEnum[]
  }

  /**
   * EffectiveDomain findMany
   */
  export type EffectiveDomainFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EffectiveDomain
     */
    select?: EffectiveDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EffectiveDomain
     */
    omit?: EffectiveDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EffectiveDomainInclude<ExtArgs> | null
    /**
     * Filter, which EffectiveDomains to fetch.
     */
    where?: EffectiveDomainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EffectiveDomains to fetch.
     */
    orderBy?: EffectiveDomainOrderByWithRelationInput | EffectiveDomainOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EffectiveDomains.
     */
    cursor?: EffectiveDomainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EffectiveDomains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EffectiveDomains.
     */
    skip?: number
    distinct?: EffectiveDomainScalarFieldEnum | EffectiveDomainScalarFieldEnum[]
  }

  /**
   * EffectiveDomain create
   */
  export type EffectiveDomainCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EffectiveDomain
     */
    select?: EffectiveDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EffectiveDomain
     */
    omit?: EffectiveDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EffectiveDomainInclude<ExtArgs> | null
    /**
     * The data needed to create a EffectiveDomain.
     */
    data: XOR<EffectiveDomainCreateInput, EffectiveDomainUncheckedCreateInput>
  }

  /**
   * EffectiveDomain createMany
   */
  export type EffectiveDomainCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EffectiveDomains.
     */
    data: EffectiveDomainCreateManyInput | EffectiveDomainCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EffectiveDomain createManyAndReturn
   */
  export type EffectiveDomainCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EffectiveDomain
     */
    select?: EffectiveDomainSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EffectiveDomain
     */
    omit?: EffectiveDomainOmit<ExtArgs> | null
    /**
     * The data used to create many EffectiveDomains.
     */
    data: EffectiveDomainCreateManyInput | EffectiveDomainCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EffectiveDomainIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EffectiveDomain update
   */
  export type EffectiveDomainUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EffectiveDomain
     */
    select?: EffectiveDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EffectiveDomain
     */
    omit?: EffectiveDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EffectiveDomainInclude<ExtArgs> | null
    /**
     * The data needed to update a EffectiveDomain.
     */
    data: XOR<EffectiveDomainUpdateInput, EffectiveDomainUncheckedUpdateInput>
    /**
     * Choose, which EffectiveDomain to update.
     */
    where: EffectiveDomainWhereUniqueInput
  }

  /**
   * EffectiveDomain updateMany
   */
  export type EffectiveDomainUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EffectiveDomains.
     */
    data: XOR<EffectiveDomainUpdateManyMutationInput, EffectiveDomainUncheckedUpdateManyInput>
    /**
     * Filter which EffectiveDomains to update
     */
    where?: EffectiveDomainWhereInput
    /**
     * Limit how many EffectiveDomains to update.
     */
    limit?: number
  }

  /**
   * EffectiveDomain updateManyAndReturn
   */
  export type EffectiveDomainUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EffectiveDomain
     */
    select?: EffectiveDomainSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EffectiveDomain
     */
    omit?: EffectiveDomainOmit<ExtArgs> | null
    /**
     * The data used to update EffectiveDomains.
     */
    data: XOR<EffectiveDomainUpdateManyMutationInput, EffectiveDomainUncheckedUpdateManyInput>
    /**
     * Filter which EffectiveDomains to update
     */
    where?: EffectiveDomainWhereInput
    /**
     * Limit how many EffectiveDomains to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EffectiveDomainIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EffectiveDomain upsert
   */
  export type EffectiveDomainUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EffectiveDomain
     */
    select?: EffectiveDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EffectiveDomain
     */
    omit?: EffectiveDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EffectiveDomainInclude<ExtArgs> | null
    /**
     * The filter to search for the EffectiveDomain to update in case it exists.
     */
    where: EffectiveDomainWhereUniqueInput
    /**
     * In case the EffectiveDomain found by the `where` argument doesn't exist, create a new EffectiveDomain with this data.
     */
    create: XOR<EffectiveDomainCreateInput, EffectiveDomainUncheckedCreateInput>
    /**
     * In case the EffectiveDomain was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EffectiveDomainUpdateInput, EffectiveDomainUncheckedUpdateInput>
  }

  /**
   * EffectiveDomain delete
   */
  export type EffectiveDomainDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EffectiveDomain
     */
    select?: EffectiveDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EffectiveDomain
     */
    omit?: EffectiveDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EffectiveDomainInclude<ExtArgs> | null
    /**
     * Filter which EffectiveDomain to delete.
     */
    where: EffectiveDomainWhereUniqueInput
  }

  /**
   * EffectiveDomain deleteMany
   */
  export type EffectiveDomainDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EffectiveDomains to delete
     */
    where?: EffectiveDomainWhereInput
    /**
     * Limit how many EffectiveDomains to delete.
     */
    limit?: number
  }

  /**
   * EffectiveDomain without action
   */
  export type EffectiveDomainDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EffectiveDomain
     */
    select?: EffectiveDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EffectiveDomain
     */
    omit?: EffectiveDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EffectiveDomainInclude<ExtArgs> | null
  }


  /**
   * Model PsychomotiveDomain
   */

  export type AggregatePsychomotiveDomain = {
    _count: PsychomotiveDomainCountAggregateOutputType | null
    _avg: PsychomotiveDomainAvgAggregateOutputType | null
    _sum: PsychomotiveDomainSumAggregateOutputType | null
    _min: PsychomotiveDomainMinAggregateOutputType | null
    _max: PsychomotiveDomainMaxAggregateOutputType | null
  }

  export type PsychomotiveDomainAvgAggregateOutputType = {
    hardworking: number | null
    sports: number | null
  }

  export type PsychomotiveDomainSumAggregateOutputType = {
    hardworking: number | null
    sports: number | null
  }

  export type PsychomotiveDomainMinAggregateOutputType = {
    id: string | null
    hardworking: number | null
    sports: number | null
    studentid: string | null
    gradeid: string | null
  }

  export type PsychomotiveDomainMaxAggregateOutputType = {
    id: string | null
    hardworking: number | null
    sports: number | null
    studentid: string | null
    gradeid: string | null
  }

  export type PsychomotiveDomainCountAggregateOutputType = {
    id: number
    hardworking: number
    sports: number
    studentid: number
    gradeid: number
    _all: number
  }


  export type PsychomotiveDomainAvgAggregateInputType = {
    hardworking?: true
    sports?: true
  }

  export type PsychomotiveDomainSumAggregateInputType = {
    hardworking?: true
    sports?: true
  }

  export type PsychomotiveDomainMinAggregateInputType = {
    id?: true
    hardworking?: true
    sports?: true
    studentid?: true
    gradeid?: true
  }

  export type PsychomotiveDomainMaxAggregateInputType = {
    id?: true
    hardworking?: true
    sports?: true
    studentid?: true
    gradeid?: true
  }

  export type PsychomotiveDomainCountAggregateInputType = {
    id?: true
    hardworking?: true
    sports?: true
    studentid?: true
    gradeid?: true
    _all?: true
  }

  export type PsychomotiveDomainAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PsychomotiveDomain to aggregate.
     */
    where?: PsychomotiveDomainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PsychomotiveDomains to fetch.
     */
    orderBy?: PsychomotiveDomainOrderByWithRelationInput | PsychomotiveDomainOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PsychomotiveDomainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PsychomotiveDomains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PsychomotiveDomains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PsychomotiveDomains
    **/
    _count?: true | PsychomotiveDomainCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PsychomotiveDomainAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PsychomotiveDomainSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PsychomotiveDomainMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PsychomotiveDomainMaxAggregateInputType
  }

  export type GetPsychomotiveDomainAggregateType<T extends PsychomotiveDomainAggregateArgs> = {
        [P in keyof T & keyof AggregatePsychomotiveDomain]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePsychomotiveDomain[P]>
      : GetScalarType<T[P], AggregatePsychomotiveDomain[P]>
  }




  export type PsychomotiveDomainGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PsychomotiveDomainWhereInput
    orderBy?: PsychomotiveDomainOrderByWithAggregationInput | PsychomotiveDomainOrderByWithAggregationInput[]
    by: PsychomotiveDomainScalarFieldEnum[] | PsychomotiveDomainScalarFieldEnum
    having?: PsychomotiveDomainScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PsychomotiveDomainCountAggregateInputType | true
    _avg?: PsychomotiveDomainAvgAggregateInputType
    _sum?: PsychomotiveDomainSumAggregateInputType
    _min?: PsychomotiveDomainMinAggregateInputType
    _max?: PsychomotiveDomainMaxAggregateInputType
  }

  export type PsychomotiveDomainGroupByOutputType = {
    id: string
    hardworking: number
    sports: number
    studentid: string
    gradeid: string
    _count: PsychomotiveDomainCountAggregateOutputType | null
    _avg: PsychomotiveDomainAvgAggregateOutputType | null
    _sum: PsychomotiveDomainSumAggregateOutputType | null
    _min: PsychomotiveDomainMinAggregateOutputType | null
    _max: PsychomotiveDomainMaxAggregateOutputType | null
  }

  type GetPsychomotiveDomainGroupByPayload<T extends PsychomotiveDomainGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PsychomotiveDomainGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PsychomotiveDomainGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PsychomotiveDomainGroupByOutputType[P]>
            : GetScalarType<T[P], PsychomotiveDomainGroupByOutputType[P]>
        }
      >
    >


  export type PsychomotiveDomainSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hardworking?: boolean
    sports?: boolean
    studentid?: boolean
    gradeid?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    grade?: boolean | GradeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["psychomotiveDomain"]>

  export type PsychomotiveDomainSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hardworking?: boolean
    sports?: boolean
    studentid?: boolean
    gradeid?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    grade?: boolean | GradeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["psychomotiveDomain"]>

  export type PsychomotiveDomainSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hardworking?: boolean
    sports?: boolean
    studentid?: boolean
    gradeid?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
    grade?: boolean | GradeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["psychomotiveDomain"]>

  export type PsychomotiveDomainSelectScalar = {
    id?: boolean
    hardworking?: boolean
    sports?: boolean
    studentid?: boolean
    gradeid?: boolean
  }

  export type PsychomotiveDomainOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "hardworking" | "sports" | "studentid" | "gradeid", ExtArgs["result"]["psychomotiveDomain"]>
  export type PsychomotiveDomainInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    grade?: boolean | GradeDefaultArgs<ExtArgs>
  }
  export type PsychomotiveDomainIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    grade?: boolean | GradeDefaultArgs<ExtArgs>
  }
  export type PsychomotiveDomainIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
    grade?: boolean | GradeDefaultArgs<ExtArgs>
  }

  export type $PsychomotiveDomainPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PsychomotiveDomain"
    objects: {
      student: Prisma.$StudentPayload<ExtArgs>
      grade: Prisma.$GradePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      hardworking: number
      sports: number
      studentid: string
      gradeid: string
    }, ExtArgs["result"]["psychomotiveDomain"]>
    composites: {}
  }

  type PsychomotiveDomainGetPayload<S extends boolean | null | undefined | PsychomotiveDomainDefaultArgs> = $Result.GetResult<Prisma.$PsychomotiveDomainPayload, S>

  type PsychomotiveDomainCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PsychomotiveDomainFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PsychomotiveDomainCountAggregateInputType | true
    }

  export interface PsychomotiveDomainDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PsychomotiveDomain'], meta: { name: 'PsychomotiveDomain' } }
    /**
     * Find zero or one PsychomotiveDomain that matches the filter.
     * @param {PsychomotiveDomainFindUniqueArgs} args - Arguments to find a PsychomotiveDomain
     * @example
     * // Get one PsychomotiveDomain
     * const psychomotiveDomain = await prisma.psychomotiveDomain.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PsychomotiveDomainFindUniqueArgs>(args: SelectSubset<T, PsychomotiveDomainFindUniqueArgs<ExtArgs>>): Prisma__PsychomotiveDomainClient<$Result.GetResult<Prisma.$PsychomotiveDomainPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PsychomotiveDomain that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PsychomotiveDomainFindUniqueOrThrowArgs} args - Arguments to find a PsychomotiveDomain
     * @example
     * // Get one PsychomotiveDomain
     * const psychomotiveDomain = await prisma.psychomotiveDomain.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PsychomotiveDomainFindUniqueOrThrowArgs>(args: SelectSubset<T, PsychomotiveDomainFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PsychomotiveDomainClient<$Result.GetResult<Prisma.$PsychomotiveDomainPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PsychomotiveDomain that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PsychomotiveDomainFindFirstArgs} args - Arguments to find a PsychomotiveDomain
     * @example
     * // Get one PsychomotiveDomain
     * const psychomotiveDomain = await prisma.psychomotiveDomain.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PsychomotiveDomainFindFirstArgs>(args?: SelectSubset<T, PsychomotiveDomainFindFirstArgs<ExtArgs>>): Prisma__PsychomotiveDomainClient<$Result.GetResult<Prisma.$PsychomotiveDomainPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PsychomotiveDomain that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PsychomotiveDomainFindFirstOrThrowArgs} args - Arguments to find a PsychomotiveDomain
     * @example
     * // Get one PsychomotiveDomain
     * const psychomotiveDomain = await prisma.psychomotiveDomain.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PsychomotiveDomainFindFirstOrThrowArgs>(args?: SelectSubset<T, PsychomotiveDomainFindFirstOrThrowArgs<ExtArgs>>): Prisma__PsychomotiveDomainClient<$Result.GetResult<Prisma.$PsychomotiveDomainPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PsychomotiveDomains that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PsychomotiveDomainFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PsychomotiveDomains
     * const psychomotiveDomains = await prisma.psychomotiveDomain.findMany()
     * 
     * // Get first 10 PsychomotiveDomains
     * const psychomotiveDomains = await prisma.psychomotiveDomain.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const psychomotiveDomainWithIdOnly = await prisma.psychomotiveDomain.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PsychomotiveDomainFindManyArgs>(args?: SelectSubset<T, PsychomotiveDomainFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PsychomotiveDomainPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PsychomotiveDomain.
     * @param {PsychomotiveDomainCreateArgs} args - Arguments to create a PsychomotiveDomain.
     * @example
     * // Create one PsychomotiveDomain
     * const PsychomotiveDomain = await prisma.psychomotiveDomain.create({
     *   data: {
     *     // ... data to create a PsychomotiveDomain
     *   }
     * })
     * 
     */
    create<T extends PsychomotiveDomainCreateArgs>(args: SelectSubset<T, PsychomotiveDomainCreateArgs<ExtArgs>>): Prisma__PsychomotiveDomainClient<$Result.GetResult<Prisma.$PsychomotiveDomainPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PsychomotiveDomains.
     * @param {PsychomotiveDomainCreateManyArgs} args - Arguments to create many PsychomotiveDomains.
     * @example
     * // Create many PsychomotiveDomains
     * const psychomotiveDomain = await prisma.psychomotiveDomain.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PsychomotiveDomainCreateManyArgs>(args?: SelectSubset<T, PsychomotiveDomainCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PsychomotiveDomains and returns the data saved in the database.
     * @param {PsychomotiveDomainCreateManyAndReturnArgs} args - Arguments to create many PsychomotiveDomains.
     * @example
     * // Create many PsychomotiveDomains
     * const psychomotiveDomain = await prisma.psychomotiveDomain.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PsychomotiveDomains and only return the `id`
     * const psychomotiveDomainWithIdOnly = await prisma.psychomotiveDomain.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PsychomotiveDomainCreateManyAndReturnArgs>(args?: SelectSubset<T, PsychomotiveDomainCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PsychomotiveDomainPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PsychomotiveDomain.
     * @param {PsychomotiveDomainDeleteArgs} args - Arguments to delete one PsychomotiveDomain.
     * @example
     * // Delete one PsychomotiveDomain
     * const PsychomotiveDomain = await prisma.psychomotiveDomain.delete({
     *   where: {
     *     // ... filter to delete one PsychomotiveDomain
     *   }
     * })
     * 
     */
    delete<T extends PsychomotiveDomainDeleteArgs>(args: SelectSubset<T, PsychomotiveDomainDeleteArgs<ExtArgs>>): Prisma__PsychomotiveDomainClient<$Result.GetResult<Prisma.$PsychomotiveDomainPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PsychomotiveDomain.
     * @param {PsychomotiveDomainUpdateArgs} args - Arguments to update one PsychomotiveDomain.
     * @example
     * // Update one PsychomotiveDomain
     * const psychomotiveDomain = await prisma.psychomotiveDomain.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PsychomotiveDomainUpdateArgs>(args: SelectSubset<T, PsychomotiveDomainUpdateArgs<ExtArgs>>): Prisma__PsychomotiveDomainClient<$Result.GetResult<Prisma.$PsychomotiveDomainPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PsychomotiveDomains.
     * @param {PsychomotiveDomainDeleteManyArgs} args - Arguments to filter PsychomotiveDomains to delete.
     * @example
     * // Delete a few PsychomotiveDomains
     * const { count } = await prisma.psychomotiveDomain.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PsychomotiveDomainDeleteManyArgs>(args?: SelectSubset<T, PsychomotiveDomainDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PsychomotiveDomains.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PsychomotiveDomainUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PsychomotiveDomains
     * const psychomotiveDomain = await prisma.psychomotiveDomain.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PsychomotiveDomainUpdateManyArgs>(args: SelectSubset<T, PsychomotiveDomainUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PsychomotiveDomains and returns the data updated in the database.
     * @param {PsychomotiveDomainUpdateManyAndReturnArgs} args - Arguments to update many PsychomotiveDomains.
     * @example
     * // Update many PsychomotiveDomains
     * const psychomotiveDomain = await prisma.psychomotiveDomain.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PsychomotiveDomains and only return the `id`
     * const psychomotiveDomainWithIdOnly = await prisma.psychomotiveDomain.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PsychomotiveDomainUpdateManyAndReturnArgs>(args: SelectSubset<T, PsychomotiveDomainUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PsychomotiveDomainPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PsychomotiveDomain.
     * @param {PsychomotiveDomainUpsertArgs} args - Arguments to update or create a PsychomotiveDomain.
     * @example
     * // Update or create a PsychomotiveDomain
     * const psychomotiveDomain = await prisma.psychomotiveDomain.upsert({
     *   create: {
     *     // ... data to create a PsychomotiveDomain
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PsychomotiveDomain we want to update
     *   }
     * })
     */
    upsert<T extends PsychomotiveDomainUpsertArgs>(args: SelectSubset<T, PsychomotiveDomainUpsertArgs<ExtArgs>>): Prisma__PsychomotiveDomainClient<$Result.GetResult<Prisma.$PsychomotiveDomainPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PsychomotiveDomains.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PsychomotiveDomainCountArgs} args - Arguments to filter PsychomotiveDomains to count.
     * @example
     * // Count the number of PsychomotiveDomains
     * const count = await prisma.psychomotiveDomain.count({
     *   where: {
     *     // ... the filter for the PsychomotiveDomains we want to count
     *   }
     * })
    **/
    count<T extends PsychomotiveDomainCountArgs>(
      args?: Subset<T, PsychomotiveDomainCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PsychomotiveDomainCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PsychomotiveDomain.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PsychomotiveDomainAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PsychomotiveDomainAggregateArgs>(args: Subset<T, PsychomotiveDomainAggregateArgs>): Prisma.PrismaPromise<GetPsychomotiveDomainAggregateType<T>>

    /**
     * Group by PsychomotiveDomain.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PsychomotiveDomainGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PsychomotiveDomainGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PsychomotiveDomainGroupByArgs['orderBy'] }
        : { orderBy?: PsychomotiveDomainGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PsychomotiveDomainGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPsychomotiveDomainGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PsychomotiveDomain model
   */
  readonly fields: PsychomotiveDomainFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PsychomotiveDomain.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PsychomotiveDomainClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    grade<T extends GradeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GradeDefaultArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PsychomotiveDomain model
   */
  interface PsychomotiveDomainFieldRefs {
    readonly id: FieldRef<"PsychomotiveDomain", 'String'>
    readonly hardworking: FieldRef<"PsychomotiveDomain", 'Int'>
    readonly sports: FieldRef<"PsychomotiveDomain", 'Int'>
    readonly studentid: FieldRef<"PsychomotiveDomain", 'String'>
    readonly gradeid: FieldRef<"PsychomotiveDomain", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PsychomotiveDomain findUnique
   */
  export type PsychomotiveDomainFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsychomotiveDomain
     */
    select?: PsychomotiveDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PsychomotiveDomain
     */
    omit?: PsychomotiveDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsychomotiveDomainInclude<ExtArgs> | null
    /**
     * Filter, which PsychomotiveDomain to fetch.
     */
    where: PsychomotiveDomainWhereUniqueInput
  }

  /**
   * PsychomotiveDomain findUniqueOrThrow
   */
  export type PsychomotiveDomainFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsychomotiveDomain
     */
    select?: PsychomotiveDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PsychomotiveDomain
     */
    omit?: PsychomotiveDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsychomotiveDomainInclude<ExtArgs> | null
    /**
     * Filter, which PsychomotiveDomain to fetch.
     */
    where: PsychomotiveDomainWhereUniqueInput
  }

  /**
   * PsychomotiveDomain findFirst
   */
  export type PsychomotiveDomainFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsychomotiveDomain
     */
    select?: PsychomotiveDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PsychomotiveDomain
     */
    omit?: PsychomotiveDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsychomotiveDomainInclude<ExtArgs> | null
    /**
     * Filter, which PsychomotiveDomain to fetch.
     */
    where?: PsychomotiveDomainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PsychomotiveDomains to fetch.
     */
    orderBy?: PsychomotiveDomainOrderByWithRelationInput | PsychomotiveDomainOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PsychomotiveDomains.
     */
    cursor?: PsychomotiveDomainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PsychomotiveDomains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PsychomotiveDomains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PsychomotiveDomains.
     */
    distinct?: PsychomotiveDomainScalarFieldEnum | PsychomotiveDomainScalarFieldEnum[]
  }

  /**
   * PsychomotiveDomain findFirstOrThrow
   */
  export type PsychomotiveDomainFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsychomotiveDomain
     */
    select?: PsychomotiveDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PsychomotiveDomain
     */
    omit?: PsychomotiveDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsychomotiveDomainInclude<ExtArgs> | null
    /**
     * Filter, which PsychomotiveDomain to fetch.
     */
    where?: PsychomotiveDomainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PsychomotiveDomains to fetch.
     */
    orderBy?: PsychomotiveDomainOrderByWithRelationInput | PsychomotiveDomainOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PsychomotiveDomains.
     */
    cursor?: PsychomotiveDomainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PsychomotiveDomains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PsychomotiveDomains.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PsychomotiveDomains.
     */
    distinct?: PsychomotiveDomainScalarFieldEnum | PsychomotiveDomainScalarFieldEnum[]
  }

  /**
   * PsychomotiveDomain findMany
   */
  export type PsychomotiveDomainFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsychomotiveDomain
     */
    select?: PsychomotiveDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PsychomotiveDomain
     */
    omit?: PsychomotiveDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsychomotiveDomainInclude<ExtArgs> | null
    /**
     * Filter, which PsychomotiveDomains to fetch.
     */
    where?: PsychomotiveDomainWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PsychomotiveDomains to fetch.
     */
    orderBy?: PsychomotiveDomainOrderByWithRelationInput | PsychomotiveDomainOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PsychomotiveDomains.
     */
    cursor?: PsychomotiveDomainWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PsychomotiveDomains from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PsychomotiveDomains.
     */
    skip?: number
    distinct?: PsychomotiveDomainScalarFieldEnum | PsychomotiveDomainScalarFieldEnum[]
  }

  /**
   * PsychomotiveDomain create
   */
  export type PsychomotiveDomainCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsychomotiveDomain
     */
    select?: PsychomotiveDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PsychomotiveDomain
     */
    omit?: PsychomotiveDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsychomotiveDomainInclude<ExtArgs> | null
    /**
     * The data needed to create a PsychomotiveDomain.
     */
    data: XOR<PsychomotiveDomainCreateInput, PsychomotiveDomainUncheckedCreateInput>
  }

  /**
   * PsychomotiveDomain createMany
   */
  export type PsychomotiveDomainCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PsychomotiveDomains.
     */
    data: PsychomotiveDomainCreateManyInput | PsychomotiveDomainCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PsychomotiveDomain createManyAndReturn
   */
  export type PsychomotiveDomainCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsychomotiveDomain
     */
    select?: PsychomotiveDomainSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PsychomotiveDomain
     */
    omit?: PsychomotiveDomainOmit<ExtArgs> | null
    /**
     * The data used to create many PsychomotiveDomains.
     */
    data: PsychomotiveDomainCreateManyInput | PsychomotiveDomainCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsychomotiveDomainIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PsychomotiveDomain update
   */
  export type PsychomotiveDomainUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsychomotiveDomain
     */
    select?: PsychomotiveDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PsychomotiveDomain
     */
    omit?: PsychomotiveDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsychomotiveDomainInclude<ExtArgs> | null
    /**
     * The data needed to update a PsychomotiveDomain.
     */
    data: XOR<PsychomotiveDomainUpdateInput, PsychomotiveDomainUncheckedUpdateInput>
    /**
     * Choose, which PsychomotiveDomain to update.
     */
    where: PsychomotiveDomainWhereUniqueInput
  }

  /**
   * PsychomotiveDomain updateMany
   */
  export type PsychomotiveDomainUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PsychomotiveDomains.
     */
    data: XOR<PsychomotiveDomainUpdateManyMutationInput, PsychomotiveDomainUncheckedUpdateManyInput>
    /**
     * Filter which PsychomotiveDomains to update
     */
    where?: PsychomotiveDomainWhereInput
    /**
     * Limit how many PsychomotiveDomains to update.
     */
    limit?: number
  }

  /**
   * PsychomotiveDomain updateManyAndReturn
   */
  export type PsychomotiveDomainUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsychomotiveDomain
     */
    select?: PsychomotiveDomainSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PsychomotiveDomain
     */
    omit?: PsychomotiveDomainOmit<ExtArgs> | null
    /**
     * The data used to update PsychomotiveDomains.
     */
    data: XOR<PsychomotiveDomainUpdateManyMutationInput, PsychomotiveDomainUncheckedUpdateManyInput>
    /**
     * Filter which PsychomotiveDomains to update
     */
    where?: PsychomotiveDomainWhereInput
    /**
     * Limit how many PsychomotiveDomains to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsychomotiveDomainIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PsychomotiveDomain upsert
   */
  export type PsychomotiveDomainUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsychomotiveDomain
     */
    select?: PsychomotiveDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PsychomotiveDomain
     */
    omit?: PsychomotiveDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsychomotiveDomainInclude<ExtArgs> | null
    /**
     * The filter to search for the PsychomotiveDomain to update in case it exists.
     */
    where: PsychomotiveDomainWhereUniqueInput
    /**
     * In case the PsychomotiveDomain found by the `where` argument doesn't exist, create a new PsychomotiveDomain with this data.
     */
    create: XOR<PsychomotiveDomainCreateInput, PsychomotiveDomainUncheckedCreateInput>
    /**
     * In case the PsychomotiveDomain was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PsychomotiveDomainUpdateInput, PsychomotiveDomainUncheckedUpdateInput>
  }

  /**
   * PsychomotiveDomain delete
   */
  export type PsychomotiveDomainDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsychomotiveDomain
     */
    select?: PsychomotiveDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PsychomotiveDomain
     */
    omit?: PsychomotiveDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsychomotiveDomainInclude<ExtArgs> | null
    /**
     * Filter which PsychomotiveDomain to delete.
     */
    where: PsychomotiveDomainWhereUniqueInput
  }

  /**
   * PsychomotiveDomain deleteMany
   */
  export type PsychomotiveDomainDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PsychomotiveDomains to delete
     */
    where?: PsychomotiveDomainWhereInput
    /**
     * Limit how many PsychomotiveDomains to delete.
     */
    limit?: number
  }

  /**
   * PsychomotiveDomain without action
   */
  export type PsychomotiveDomainDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PsychomotiveDomain
     */
    select?: PsychomotiveDomainSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PsychomotiveDomain
     */
    omit?: PsychomotiveDomainOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PsychomotiveDomainInclude<ExtArgs> | null
  }


  /**
   * Model Attendance
   */

  export type AggregateAttendance = {
    _count: AttendanceCountAggregateOutputType | null
    _avg: AttendanceAvgAggregateOutputType | null
    _sum: AttendanceSumAggregateOutputType | null
    _min: AttendanceMinAggregateOutputType | null
    _max: AttendanceMaxAggregateOutputType | null
  }

  export type AttendanceAvgAggregateOutputType = {
    id: number | null
  }

  export type AttendanceSumAggregateOutputType = {
    id: number | null
  }

  export type AttendanceMinAggregateOutputType = {
    id: number | null
    date: Date | null
    present: boolean | null
    studentId: string | null
  }

  export type AttendanceMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    present: boolean | null
    studentId: string | null
  }

  export type AttendanceCountAggregateOutputType = {
    id: number
    date: number
    present: number
    studentId: number
    _all: number
  }


  export type AttendanceAvgAggregateInputType = {
    id?: true
  }

  export type AttendanceSumAggregateInputType = {
    id?: true
  }

  export type AttendanceMinAggregateInputType = {
    id?: true
    date?: true
    present?: true
    studentId?: true
  }

  export type AttendanceMaxAggregateInputType = {
    id?: true
    date?: true
    present?: true
    studentId?: true
  }

  export type AttendanceCountAggregateInputType = {
    id?: true
    date?: true
    present?: true
    studentId?: true
    _all?: true
  }

  export type AttendanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attendance to aggregate.
     */
    where?: AttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendances to fetch.
     */
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Attendances
    **/
    _count?: true | AttendanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AttendanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AttendanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttendanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttendanceMaxAggregateInputType
  }

  export type GetAttendanceAggregateType<T extends AttendanceAggregateArgs> = {
        [P in keyof T & keyof AggregateAttendance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttendance[P]>
      : GetScalarType<T[P], AggregateAttendance[P]>
  }




  export type AttendanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttendanceWhereInput
    orderBy?: AttendanceOrderByWithAggregationInput | AttendanceOrderByWithAggregationInput[]
    by: AttendanceScalarFieldEnum[] | AttendanceScalarFieldEnum
    having?: AttendanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttendanceCountAggregateInputType | true
    _avg?: AttendanceAvgAggregateInputType
    _sum?: AttendanceSumAggregateInputType
    _min?: AttendanceMinAggregateInputType
    _max?: AttendanceMaxAggregateInputType
  }

  export type AttendanceGroupByOutputType = {
    id: number
    date: Date
    present: boolean
    studentId: string
    _count: AttendanceCountAggregateOutputType | null
    _avg: AttendanceAvgAggregateOutputType | null
    _sum: AttendanceSumAggregateOutputType | null
    _min: AttendanceMinAggregateOutputType | null
    _max: AttendanceMaxAggregateOutputType | null
  }

  type GetAttendanceGroupByPayload<T extends AttendanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AttendanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttendanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttendanceGroupByOutputType[P]>
            : GetScalarType<T[P], AttendanceGroupByOutputType[P]>
        }
      >
    >


  export type AttendanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    present?: boolean
    studentId?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attendance"]>

  export type AttendanceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    present?: boolean
    studentId?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attendance"]>

  export type AttendanceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    present?: boolean
    studentId?: boolean
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attendance"]>

  export type AttendanceSelectScalar = {
    id?: boolean
    date?: boolean
    present?: boolean
    studentId?: boolean
  }

  export type AttendanceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "date" | "present" | "studentId", ExtArgs["result"]["attendance"]>
  export type AttendanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type AttendanceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type AttendanceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }

  export type $AttendancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Attendance"
    objects: {
      student: Prisma.$StudentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date
      present: boolean
      studentId: string
    }, ExtArgs["result"]["attendance"]>
    composites: {}
  }

  type AttendanceGetPayload<S extends boolean | null | undefined | AttendanceDefaultArgs> = $Result.GetResult<Prisma.$AttendancePayload, S>

  type AttendanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AttendanceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AttendanceCountAggregateInputType | true
    }

  export interface AttendanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Attendance'], meta: { name: 'Attendance' } }
    /**
     * Find zero or one Attendance that matches the filter.
     * @param {AttendanceFindUniqueArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AttendanceFindUniqueArgs>(args: SelectSubset<T, AttendanceFindUniqueArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Attendance that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AttendanceFindUniqueOrThrowArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AttendanceFindUniqueOrThrowArgs>(args: SelectSubset<T, AttendanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Attendance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceFindFirstArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AttendanceFindFirstArgs>(args?: SelectSubset<T, AttendanceFindFirstArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Attendance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceFindFirstOrThrowArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AttendanceFindFirstOrThrowArgs>(args?: SelectSubset<T, AttendanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Attendances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Attendances
     * const attendances = await prisma.attendance.findMany()
     * 
     * // Get first 10 Attendances
     * const attendances = await prisma.attendance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const attendanceWithIdOnly = await prisma.attendance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AttendanceFindManyArgs>(args?: SelectSubset<T, AttendanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Attendance.
     * @param {AttendanceCreateArgs} args - Arguments to create a Attendance.
     * @example
     * // Create one Attendance
     * const Attendance = await prisma.attendance.create({
     *   data: {
     *     // ... data to create a Attendance
     *   }
     * })
     * 
     */
    create<T extends AttendanceCreateArgs>(args: SelectSubset<T, AttendanceCreateArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Attendances.
     * @param {AttendanceCreateManyArgs} args - Arguments to create many Attendances.
     * @example
     * // Create many Attendances
     * const attendance = await prisma.attendance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AttendanceCreateManyArgs>(args?: SelectSubset<T, AttendanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Attendances and returns the data saved in the database.
     * @param {AttendanceCreateManyAndReturnArgs} args - Arguments to create many Attendances.
     * @example
     * // Create many Attendances
     * const attendance = await prisma.attendance.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Attendances and only return the `id`
     * const attendanceWithIdOnly = await prisma.attendance.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AttendanceCreateManyAndReturnArgs>(args?: SelectSubset<T, AttendanceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Attendance.
     * @param {AttendanceDeleteArgs} args - Arguments to delete one Attendance.
     * @example
     * // Delete one Attendance
     * const Attendance = await prisma.attendance.delete({
     *   where: {
     *     // ... filter to delete one Attendance
     *   }
     * })
     * 
     */
    delete<T extends AttendanceDeleteArgs>(args: SelectSubset<T, AttendanceDeleteArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Attendance.
     * @param {AttendanceUpdateArgs} args - Arguments to update one Attendance.
     * @example
     * // Update one Attendance
     * const attendance = await prisma.attendance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AttendanceUpdateArgs>(args: SelectSubset<T, AttendanceUpdateArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Attendances.
     * @param {AttendanceDeleteManyArgs} args - Arguments to filter Attendances to delete.
     * @example
     * // Delete a few Attendances
     * const { count } = await prisma.attendance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AttendanceDeleteManyArgs>(args?: SelectSubset<T, AttendanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Attendances
     * const attendance = await prisma.attendance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AttendanceUpdateManyArgs>(args: SelectSubset<T, AttendanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attendances and returns the data updated in the database.
     * @param {AttendanceUpdateManyAndReturnArgs} args - Arguments to update many Attendances.
     * @example
     * // Update many Attendances
     * const attendance = await prisma.attendance.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Attendances and only return the `id`
     * const attendanceWithIdOnly = await prisma.attendance.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AttendanceUpdateManyAndReturnArgs>(args: SelectSubset<T, AttendanceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Attendance.
     * @param {AttendanceUpsertArgs} args - Arguments to update or create a Attendance.
     * @example
     * // Update or create a Attendance
     * const attendance = await prisma.attendance.upsert({
     *   create: {
     *     // ... data to create a Attendance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Attendance we want to update
     *   }
     * })
     */
    upsert<T extends AttendanceUpsertArgs>(args: SelectSubset<T, AttendanceUpsertArgs<ExtArgs>>): Prisma__AttendanceClient<$Result.GetResult<Prisma.$AttendancePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Attendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceCountArgs} args - Arguments to filter Attendances to count.
     * @example
     * // Count the number of Attendances
     * const count = await prisma.attendance.count({
     *   where: {
     *     // ... the filter for the Attendances we want to count
     *   }
     * })
    **/
    count<T extends AttendanceCountArgs>(
      args?: Subset<T, AttendanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttendanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Attendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttendanceAggregateArgs>(args: Subset<T, AttendanceAggregateArgs>): Prisma.PrismaPromise<GetAttendanceAggregateType<T>>

    /**
     * Group by Attendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AttendanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AttendanceGroupByArgs['orderBy'] }
        : { orderBy?: AttendanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AttendanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttendanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Attendance model
   */
  readonly fields: AttendanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Attendance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AttendanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Attendance model
   */
  interface AttendanceFieldRefs {
    readonly id: FieldRef<"Attendance", 'Int'>
    readonly date: FieldRef<"Attendance", 'DateTime'>
    readonly present: FieldRef<"Attendance", 'Boolean'>
    readonly studentId: FieldRef<"Attendance", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Attendance findUnique
   */
  export type AttendanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter, which Attendance to fetch.
     */
    where: AttendanceWhereUniqueInput
  }

  /**
   * Attendance findUniqueOrThrow
   */
  export type AttendanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter, which Attendance to fetch.
     */
    where: AttendanceWhereUniqueInput
  }

  /**
   * Attendance findFirst
   */
  export type AttendanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter, which Attendance to fetch.
     */
    where?: AttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendances to fetch.
     */
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attendances.
     */
    cursor?: AttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attendances.
     */
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * Attendance findFirstOrThrow
   */
  export type AttendanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter, which Attendance to fetch.
     */
    where?: AttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendances to fetch.
     */
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attendances.
     */
    cursor?: AttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attendances.
     */
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * Attendance findMany
   */
  export type AttendanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter, which Attendances to fetch.
     */
    where?: AttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attendances to fetch.
     */
    orderBy?: AttendanceOrderByWithRelationInput | AttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Attendances.
     */
    cursor?: AttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attendances.
     */
    skip?: number
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * Attendance create
   */
  export type AttendanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * The data needed to create a Attendance.
     */
    data: XOR<AttendanceCreateInput, AttendanceUncheckedCreateInput>
  }

  /**
   * Attendance createMany
   */
  export type AttendanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Attendances.
     */
    data: AttendanceCreateManyInput | AttendanceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Attendance createManyAndReturn
   */
  export type AttendanceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * The data used to create many Attendances.
     */
    data: AttendanceCreateManyInput | AttendanceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Attendance update
   */
  export type AttendanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * The data needed to update a Attendance.
     */
    data: XOR<AttendanceUpdateInput, AttendanceUncheckedUpdateInput>
    /**
     * Choose, which Attendance to update.
     */
    where: AttendanceWhereUniqueInput
  }

  /**
   * Attendance updateMany
   */
  export type AttendanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Attendances.
     */
    data: XOR<AttendanceUpdateManyMutationInput, AttendanceUncheckedUpdateManyInput>
    /**
     * Filter which Attendances to update
     */
    where?: AttendanceWhereInput
    /**
     * Limit how many Attendances to update.
     */
    limit?: number
  }

  /**
   * Attendance updateManyAndReturn
   */
  export type AttendanceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * The data used to update Attendances.
     */
    data: XOR<AttendanceUpdateManyMutationInput, AttendanceUncheckedUpdateManyInput>
    /**
     * Filter which Attendances to update
     */
    where?: AttendanceWhereInput
    /**
     * Limit how many Attendances to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Attendance upsert
   */
  export type AttendanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * The filter to search for the Attendance to update in case it exists.
     */
    where: AttendanceWhereUniqueInput
    /**
     * In case the Attendance found by the `where` argument doesn't exist, create a new Attendance with this data.
     */
    create: XOR<AttendanceCreateInput, AttendanceUncheckedCreateInput>
    /**
     * In case the Attendance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AttendanceUpdateInput, AttendanceUncheckedUpdateInput>
  }

  /**
   * Attendance delete
   */
  export type AttendanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
    /**
     * Filter which Attendance to delete.
     */
    where: AttendanceWhereUniqueInput
  }

  /**
   * Attendance deleteMany
   */
  export type AttendanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attendances to delete
     */
    where?: AttendanceWhereInput
    /**
     * Limit how many Attendances to delete.
     */
    limit?: number
  }

  /**
   * Attendance without action
   */
  export type AttendanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attendance
     */
    select?: AttendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Attendance
     */
    omit?: AttendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttendanceInclude<ExtArgs> | null
  }


  /**
   * Model Event
   */

  export type AggregateEvent = {
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  export type EventAvgAggregateOutputType = {
    id: number | null
  }

  export type EventSumAggregateOutputType = {
    id: number | null
  }

  export type EventMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    startTime: Date | null
    endTime: Date | null
    classId: string | null
  }

  export type EventMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    startTime: Date | null
    endTime: Date | null
    classId: string | null
  }

  export type EventCountAggregateOutputType = {
    id: number
    title: number
    description: number
    startTime: number
    endTime: number
    classId: number
    _all: number
  }


  export type EventAvgAggregateInputType = {
    id?: true
  }

  export type EventSumAggregateInputType = {
    id?: true
  }

  export type EventMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    startTime?: true
    endTime?: true
    classId?: true
  }

  export type EventMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    startTime?: true
    endTime?: true
    classId?: true
  }

  export type EventCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    startTime?: true
    endTime?: true
    classId?: true
    _all?: true
  }

  export type EventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Event to aggregate.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventMaxAggregateInputType
  }

  export type GetEventAggregateType<T extends EventAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent[P]>
      : GetScalarType<T[P], AggregateEvent[P]>
  }




  export type EventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
    orderBy?: EventOrderByWithAggregationInput | EventOrderByWithAggregationInput[]
    by: EventScalarFieldEnum[] | EventScalarFieldEnum
    having?: EventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventCountAggregateInputType | true
    _avg?: EventAvgAggregateInputType
    _sum?: EventSumAggregateInputType
    _min?: EventMinAggregateInputType
    _max?: EventMaxAggregateInputType
  }

  export type EventGroupByOutputType = {
    id: number
    title: string
    description: string
    startTime: Date
    endTime: Date
    classId: string | null
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  type GetEventGroupByPayload<T extends EventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventGroupByOutputType[P]>
            : GetScalarType<T[P], EventGroupByOutputType[P]>
        }
      >
    >


  export type EventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    startTime?: boolean
    endTime?: boolean
    classId?: boolean
    class?: boolean | Event$classArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    startTime?: boolean
    endTime?: boolean
    classId?: boolean
    class?: boolean | Event$classArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    startTime?: boolean
    endTime?: boolean
    classId?: boolean
    class?: boolean | Event$classArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    startTime?: boolean
    endTime?: boolean
    classId?: boolean
  }

  export type EventOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "startTime" | "endTime" | "classId", ExtArgs["result"]["event"]>
  export type EventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | Event$classArgs<ExtArgs>
  }
  export type EventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | Event$classArgs<ExtArgs>
  }
  export type EventIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | Event$classArgs<ExtArgs>
  }

  export type $EventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Event"
    objects: {
      class: Prisma.$ClassPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string
      startTime: Date
      endTime: Date
      classId: string | null
    }, ExtArgs["result"]["event"]>
    composites: {}
  }

  type EventGetPayload<S extends boolean | null | undefined | EventDefaultArgs> = $Result.GetResult<Prisma.$EventPayload, S>

  type EventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EventFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EventCountAggregateInputType | true
    }

  export interface EventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Event'], meta: { name: 'Event' } }
    /**
     * Find zero or one Event that matches the filter.
     * @param {EventFindUniqueArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventFindUniqueArgs>(args: SelectSubset<T, EventFindUniqueArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Event that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EventFindUniqueOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventFindUniqueOrThrowArgs>(args: SelectSubset<T, EventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Event that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventFindFirstArgs>(args?: SelectSubset<T, EventFindFirstArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Event that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventFindFirstOrThrowArgs>(args?: SelectSubset<T, EventFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.event.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.event.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventWithIdOnly = await prisma.event.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventFindManyArgs>(args?: SelectSubset<T, EventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Event.
     * @param {EventCreateArgs} args - Arguments to create a Event.
     * @example
     * // Create one Event
     * const Event = await prisma.event.create({
     *   data: {
     *     // ... data to create a Event
     *   }
     * })
     * 
     */
    create<T extends EventCreateArgs>(args: SelectSubset<T, EventCreateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Events.
     * @param {EventCreateManyArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventCreateManyArgs>(args?: SelectSubset<T, EventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Events and returns the data saved in the database.
     * @param {EventCreateManyAndReturnArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Events and only return the `id`
     * const eventWithIdOnly = await prisma.event.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventCreateManyAndReturnArgs>(args?: SelectSubset<T, EventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Event.
     * @param {EventDeleteArgs} args - Arguments to delete one Event.
     * @example
     * // Delete one Event
     * const Event = await prisma.event.delete({
     *   where: {
     *     // ... filter to delete one Event
     *   }
     * })
     * 
     */
    delete<T extends EventDeleteArgs>(args: SelectSubset<T, EventDeleteArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Event.
     * @param {EventUpdateArgs} args - Arguments to update one Event.
     * @example
     * // Update one Event
     * const event = await prisma.event.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventUpdateArgs>(args: SelectSubset<T, EventUpdateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Events.
     * @param {EventDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.event.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventDeleteManyArgs>(args?: SelectSubset<T, EventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventUpdateManyArgs>(args: SelectSubset<T, EventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events and returns the data updated in the database.
     * @param {EventUpdateManyAndReturnArgs} args - Arguments to update many Events.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Events and only return the `id`
     * const eventWithIdOnly = await prisma.event.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EventUpdateManyAndReturnArgs>(args: SelectSubset<T, EventUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Event.
     * @param {EventUpsertArgs} args - Arguments to update or create a Event.
     * @example
     * // Update or create a Event
     * const event = await prisma.event.upsert({
     *   create: {
     *     // ... data to create a Event
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event we want to update
     *   }
     * })
     */
    upsert<T extends EventUpsertArgs>(args: SelectSubset<T, EventUpsertArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.event.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventCountArgs>(
      args?: Subset<T, EventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAggregateArgs>(args: Subset<T, EventAggregateArgs>): Prisma.PrismaPromise<GetEventAggregateType<T>>

    /**
     * Group by Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventGroupByArgs['orderBy'] }
        : { orderBy?: EventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Event model
   */
  readonly fields: EventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Event.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    class<T extends Event$classArgs<ExtArgs> = {}>(args?: Subset<T, Event$classArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Event model
   */
  interface EventFieldRefs {
    readonly id: FieldRef<"Event", 'Int'>
    readonly title: FieldRef<"Event", 'String'>
    readonly description: FieldRef<"Event", 'String'>
    readonly startTime: FieldRef<"Event", 'DateTime'>
    readonly endTime: FieldRef<"Event", 'DateTime'>
    readonly classId: FieldRef<"Event", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Event findUnique
   */
  export type EventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findUniqueOrThrow
   */
  export type EventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findFirst
   */
  export type EventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findFirstOrThrow
   */
  export type EventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findMany
   */
  export type EventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event create
   */
  export type EventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to create a Event.
     */
    data: XOR<EventCreateInput, EventUncheckedCreateInput>
  }

  /**
   * Event createMany
   */
  export type EventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Event createManyAndReturn
   */
  export type EventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Event update
   */
  export type EventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to update a Event.
     */
    data: XOR<EventUpdateInput, EventUncheckedUpdateInput>
    /**
     * Choose, which Event to update.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event updateMany
   */
  export type EventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
    /**
     * Limit how many Events to update.
     */
    limit?: number
  }

  /**
   * Event updateManyAndReturn
   */
  export type EventUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
    /**
     * Limit how many Events to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Event upsert
   */
  export type EventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The filter to search for the Event to update in case it exists.
     */
    where: EventWhereUniqueInput
    /**
     * In case the Event found by the `where` argument doesn't exist, create a new Event with this data.
     */
    create: XOR<EventCreateInput, EventUncheckedCreateInput>
    /**
     * In case the Event was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventUpdateInput, EventUncheckedUpdateInput>
  }

  /**
   * Event delete
   */
  export type EventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter which Event to delete.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event deleteMany
   */
  export type EventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to delete
     */
    where?: EventWhereInput
    /**
     * Limit how many Events to delete.
     */
    limit?: number
  }

  /**
   * Event.class
   */
  export type Event$classArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    where?: ClassWhereInput
  }

  /**
   * Event without action
   */
  export type EventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Event
     */
    omit?: EventOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
  }


  /**
   * Model Announcement
   */

  export type AggregateAnnouncement = {
    _count: AnnouncementCountAggregateOutputType | null
    _avg: AnnouncementAvgAggregateOutputType | null
    _sum: AnnouncementSumAggregateOutputType | null
    _min: AnnouncementMinAggregateOutputType | null
    _max: AnnouncementMaxAggregateOutputType | null
  }

  export type AnnouncementAvgAggregateOutputType = {
    id: number | null
  }

  export type AnnouncementSumAggregateOutputType = {
    id: number | null
  }

  export type AnnouncementMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    date: Date | null
    classId: string | null
  }

  export type AnnouncementMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    date: Date | null
    classId: string | null
  }

  export type AnnouncementCountAggregateOutputType = {
    id: number
    title: number
    description: number
    date: number
    classId: number
    _all: number
  }


  export type AnnouncementAvgAggregateInputType = {
    id?: true
  }

  export type AnnouncementSumAggregateInputType = {
    id?: true
  }

  export type AnnouncementMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    date?: true
    classId?: true
  }

  export type AnnouncementMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    date?: true
    classId?: true
  }

  export type AnnouncementCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    date?: true
    classId?: true
    _all?: true
  }

  export type AnnouncementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Announcement to aggregate.
     */
    where?: AnnouncementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Announcements to fetch.
     */
    orderBy?: AnnouncementOrderByWithRelationInput | AnnouncementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnnouncementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Announcements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Announcements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Announcements
    **/
    _count?: true | AnnouncementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AnnouncementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AnnouncementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnnouncementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnnouncementMaxAggregateInputType
  }

  export type GetAnnouncementAggregateType<T extends AnnouncementAggregateArgs> = {
        [P in keyof T & keyof AggregateAnnouncement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnnouncement[P]>
      : GetScalarType<T[P], AggregateAnnouncement[P]>
  }




  export type AnnouncementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnnouncementWhereInput
    orderBy?: AnnouncementOrderByWithAggregationInput | AnnouncementOrderByWithAggregationInput[]
    by: AnnouncementScalarFieldEnum[] | AnnouncementScalarFieldEnum
    having?: AnnouncementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnnouncementCountAggregateInputType | true
    _avg?: AnnouncementAvgAggregateInputType
    _sum?: AnnouncementSumAggregateInputType
    _min?: AnnouncementMinAggregateInputType
    _max?: AnnouncementMaxAggregateInputType
  }

  export type AnnouncementGroupByOutputType = {
    id: number
    title: string
    description: string
    date: Date
    classId: string | null
    _count: AnnouncementCountAggregateOutputType | null
    _avg: AnnouncementAvgAggregateOutputType | null
    _sum: AnnouncementSumAggregateOutputType | null
    _min: AnnouncementMinAggregateOutputType | null
    _max: AnnouncementMaxAggregateOutputType | null
  }

  type GetAnnouncementGroupByPayload<T extends AnnouncementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnnouncementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnnouncementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnnouncementGroupByOutputType[P]>
            : GetScalarType<T[P], AnnouncementGroupByOutputType[P]>
        }
      >
    >


  export type AnnouncementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    date?: boolean
    classId?: boolean
    class?: boolean | Announcement$classArgs<ExtArgs>
  }, ExtArgs["result"]["announcement"]>

  export type AnnouncementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    date?: boolean
    classId?: boolean
    class?: boolean | Announcement$classArgs<ExtArgs>
  }, ExtArgs["result"]["announcement"]>

  export type AnnouncementSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    date?: boolean
    classId?: boolean
    class?: boolean | Announcement$classArgs<ExtArgs>
  }, ExtArgs["result"]["announcement"]>

  export type AnnouncementSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    date?: boolean
    classId?: boolean
  }

  export type AnnouncementOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "date" | "classId", ExtArgs["result"]["announcement"]>
  export type AnnouncementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | Announcement$classArgs<ExtArgs>
  }
  export type AnnouncementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | Announcement$classArgs<ExtArgs>
  }
  export type AnnouncementIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | Announcement$classArgs<ExtArgs>
  }

  export type $AnnouncementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Announcement"
    objects: {
      class: Prisma.$ClassPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string
      date: Date
      classId: string | null
    }, ExtArgs["result"]["announcement"]>
    composites: {}
  }

  type AnnouncementGetPayload<S extends boolean | null | undefined | AnnouncementDefaultArgs> = $Result.GetResult<Prisma.$AnnouncementPayload, S>

  type AnnouncementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AnnouncementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AnnouncementCountAggregateInputType | true
    }

  export interface AnnouncementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Announcement'], meta: { name: 'Announcement' } }
    /**
     * Find zero or one Announcement that matches the filter.
     * @param {AnnouncementFindUniqueArgs} args - Arguments to find a Announcement
     * @example
     * // Get one Announcement
     * const announcement = await prisma.announcement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AnnouncementFindUniqueArgs>(args: SelectSubset<T, AnnouncementFindUniqueArgs<ExtArgs>>): Prisma__AnnouncementClient<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Announcement that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AnnouncementFindUniqueOrThrowArgs} args - Arguments to find a Announcement
     * @example
     * // Get one Announcement
     * const announcement = await prisma.announcement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AnnouncementFindUniqueOrThrowArgs>(args: SelectSubset<T, AnnouncementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AnnouncementClient<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Announcement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnnouncementFindFirstArgs} args - Arguments to find a Announcement
     * @example
     * // Get one Announcement
     * const announcement = await prisma.announcement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AnnouncementFindFirstArgs>(args?: SelectSubset<T, AnnouncementFindFirstArgs<ExtArgs>>): Prisma__AnnouncementClient<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Announcement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnnouncementFindFirstOrThrowArgs} args - Arguments to find a Announcement
     * @example
     * // Get one Announcement
     * const announcement = await prisma.announcement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AnnouncementFindFirstOrThrowArgs>(args?: SelectSubset<T, AnnouncementFindFirstOrThrowArgs<ExtArgs>>): Prisma__AnnouncementClient<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Announcements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnnouncementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Announcements
     * const announcements = await prisma.announcement.findMany()
     * 
     * // Get first 10 Announcements
     * const announcements = await prisma.announcement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const announcementWithIdOnly = await prisma.announcement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AnnouncementFindManyArgs>(args?: SelectSubset<T, AnnouncementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Announcement.
     * @param {AnnouncementCreateArgs} args - Arguments to create a Announcement.
     * @example
     * // Create one Announcement
     * const Announcement = await prisma.announcement.create({
     *   data: {
     *     // ... data to create a Announcement
     *   }
     * })
     * 
     */
    create<T extends AnnouncementCreateArgs>(args: SelectSubset<T, AnnouncementCreateArgs<ExtArgs>>): Prisma__AnnouncementClient<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Announcements.
     * @param {AnnouncementCreateManyArgs} args - Arguments to create many Announcements.
     * @example
     * // Create many Announcements
     * const announcement = await prisma.announcement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AnnouncementCreateManyArgs>(args?: SelectSubset<T, AnnouncementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Announcements and returns the data saved in the database.
     * @param {AnnouncementCreateManyAndReturnArgs} args - Arguments to create many Announcements.
     * @example
     * // Create many Announcements
     * const announcement = await prisma.announcement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Announcements and only return the `id`
     * const announcementWithIdOnly = await prisma.announcement.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AnnouncementCreateManyAndReturnArgs>(args?: SelectSubset<T, AnnouncementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Announcement.
     * @param {AnnouncementDeleteArgs} args - Arguments to delete one Announcement.
     * @example
     * // Delete one Announcement
     * const Announcement = await prisma.announcement.delete({
     *   where: {
     *     // ... filter to delete one Announcement
     *   }
     * })
     * 
     */
    delete<T extends AnnouncementDeleteArgs>(args: SelectSubset<T, AnnouncementDeleteArgs<ExtArgs>>): Prisma__AnnouncementClient<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Announcement.
     * @param {AnnouncementUpdateArgs} args - Arguments to update one Announcement.
     * @example
     * // Update one Announcement
     * const announcement = await prisma.announcement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AnnouncementUpdateArgs>(args: SelectSubset<T, AnnouncementUpdateArgs<ExtArgs>>): Prisma__AnnouncementClient<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Announcements.
     * @param {AnnouncementDeleteManyArgs} args - Arguments to filter Announcements to delete.
     * @example
     * // Delete a few Announcements
     * const { count } = await prisma.announcement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AnnouncementDeleteManyArgs>(args?: SelectSubset<T, AnnouncementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Announcements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnnouncementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Announcements
     * const announcement = await prisma.announcement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AnnouncementUpdateManyArgs>(args: SelectSubset<T, AnnouncementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Announcements and returns the data updated in the database.
     * @param {AnnouncementUpdateManyAndReturnArgs} args - Arguments to update many Announcements.
     * @example
     * // Update many Announcements
     * const announcement = await prisma.announcement.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Announcements and only return the `id`
     * const announcementWithIdOnly = await prisma.announcement.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AnnouncementUpdateManyAndReturnArgs>(args: SelectSubset<T, AnnouncementUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Announcement.
     * @param {AnnouncementUpsertArgs} args - Arguments to update or create a Announcement.
     * @example
     * // Update or create a Announcement
     * const announcement = await prisma.announcement.upsert({
     *   create: {
     *     // ... data to create a Announcement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Announcement we want to update
     *   }
     * })
     */
    upsert<T extends AnnouncementUpsertArgs>(args: SelectSubset<T, AnnouncementUpsertArgs<ExtArgs>>): Prisma__AnnouncementClient<$Result.GetResult<Prisma.$AnnouncementPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Announcements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnnouncementCountArgs} args - Arguments to filter Announcements to count.
     * @example
     * // Count the number of Announcements
     * const count = await prisma.announcement.count({
     *   where: {
     *     // ... the filter for the Announcements we want to count
     *   }
     * })
    **/
    count<T extends AnnouncementCountArgs>(
      args?: Subset<T, AnnouncementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnnouncementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Announcement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnnouncementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnnouncementAggregateArgs>(args: Subset<T, AnnouncementAggregateArgs>): Prisma.PrismaPromise<GetAnnouncementAggregateType<T>>

    /**
     * Group by Announcement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnnouncementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnnouncementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnnouncementGroupByArgs['orderBy'] }
        : { orderBy?: AnnouncementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnnouncementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnnouncementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Announcement model
   */
  readonly fields: AnnouncementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Announcement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AnnouncementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    class<T extends Announcement$classArgs<ExtArgs> = {}>(args?: Subset<T, Announcement$classArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Announcement model
   */
  interface AnnouncementFieldRefs {
    readonly id: FieldRef<"Announcement", 'Int'>
    readonly title: FieldRef<"Announcement", 'String'>
    readonly description: FieldRef<"Announcement", 'String'>
    readonly date: FieldRef<"Announcement", 'DateTime'>
    readonly classId: FieldRef<"Announcement", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Announcement findUnique
   */
  export type AnnouncementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementInclude<ExtArgs> | null
    /**
     * Filter, which Announcement to fetch.
     */
    where: AnnouncementWhereUniqueInput
  }

  /**
   * Announcement findUniqueOrThrow
   */
  export type AnnouncementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementInclude<ExtArgs> | null
    /**
     * Filter, which Announcement to fetch.
     */
    where: AnnouncementWhereUniqueInput
  }

  /**
   * Announcement findFirst
   */
  export type AnnouncementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementInclude<ExtArgs> | null
    /**
     * Filter, which Announcement to fetch.
     */
    where?: AnnouncementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Announcements to fetch.
     */
    orderBy?: AnnouncementOrderByWithRelationInput | AnnouncementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Announcements.
     */
    cursor?: AnnouncementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Announcements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Announcements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Announcements.
     */
    distinct?: AnnouncementScalarFieldEnum | AnnouncementScalarFieldEnum[]
  }

  /**
   * Announcement findFirstOrThrow
   */
  export type AnnouncementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementInclude<ExtArgs> | null
    /**
     * Filter, which Announcement to fetch.
     */
    where?: AnnouncementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Announcements to fetch.
     */
    orderBy?: AnnouncementOrderByWithRelationInput | AnnouncementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Announcements.
     */
    cursor?: AnnouncementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Announcements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Announcements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Announcements.
     */
    distinct?: AnnouncementScalarFieldEnum | AnnouncementScalarFieldEnum[]
  }

  /**
   * Announcement findMany
   */
  export type AnnouncementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementInclude<ExtArgs> | null
    /**
     * Filter, which Announcements to fetch.
     */
    where?: AnnouncementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Announcements to fetch.
     */
    orderBy?: AnnouncementOrderByWithRelationInput | AnnouncementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Announcements.
     */
    cursor?: AnnouncementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Announcements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Announcements.
     */
    skip?: number
    distinct?: AnnouncementScalarFieldEnum | AnnouncementScalarFieldEnum[]
  }

  /**
   * Announcement create
   */
  export type AnnouncementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementInclude<ExtArgs> | null
    /**
     * The data needed to create a Announcement.
     */
    data: XOR<AnnouncementCreateInput, AnnouncementUncheckedCreateInput>
  }

  /**
   * Announcement createMany
   */
  export type AnnouncementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Announcements.
     */
    data: AnnouncementCreateManyInput | AnnouncementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Announcement createManyAndReturn
   */
  export type AnnouncementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * The data used to create many Announcements.
     */
    data: AnnouncementCreateManyInput | AnnouncementCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Announcement update
   */
  export type AnnouncementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementInclude<ExtArgs> | null
    /**
     * The data needed to update a Announcement.
     */
    data: XOR<AnnouncementUpdateInput, AnnouncementUncheckedUpdateInput>
    /**
     * Choose, which Announcement to update.
     */
    where: AnnouncementWhereUniqueInput
  }

  /**
   * Announcement updateMany
   */
  export type AnnouncementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Announcements.
     */
    data: XOR<AnnouncementUpdateManyMutationInput, AnnouncementUncheckedUpdateManyInput>
    /**
     * Filter which Announcements to update
     */
    where?: AnnouncementWhereInput
    /**
     * Limit how many Announcements to update.
     */
    limit?: number
  }

  /**
   * Announcement updateManyAndReturn
   */
  export type AnnouncementUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * The data used to update Announcements.
     */
    data: XOR<AnnouncementUpdateManyMutationInput, AnnouncementUncheckedUpdateManyInput>
    /**
     * Filter which Announcements to update
     */
    where?: AnnouncementWhereInput
    /**
     * Limit how many Announcements to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Announcement upsert
   */
  export type AnnouncementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementInclude<ExtArgs> | null
    /**
     * The filter to search for the Announcement to update in case it exists.
     */
    where: AnnouncementWhereUniqueInput
    /**
     * In case the Announcement found by the `where` argument doesn't exist, create a new Announcement with this data.
     */
    create: XOR<AnnouncementCreateInput, AnnouncementUncheckedCreateInput>
    /**
     * In case the Announcement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnnouncementUpdateInput, AnnouncementUncheckedUpdateInput>
  }

  /**
   * Announcement delete
   */
  export type AnnouncementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementInclude<ExtArgs> | null
    /**
     * Filter which Announcement to delete.
     */
    where: AnnouncementWhereUniqueInput
  }

  /**
   * Announcement deleteMany
   */
  export type AnnouncementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Announcements to delete
     */
    where?: AnnouncementWhereInput
    /**
     * Limit how many Announcements to delete.
     */
    limit?: number
  }

  /**
   * Announcement.class
   */
  export type Announcement$classArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    where?: ClassWhereInput
  }

  /**
   * Announcement without action
   */
  export type AnnouncementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Announcement
     */
    select?: AnnouncementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Announcement
     */
    omit?: AnnouncementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnnouncementInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AdministrationScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    role: 'role',
    createdAt: 'createdAt',
    updateAt: 'updateAt'
  };

  export type AdministrationScalarFieldEnum = (typeof AdministrationScalarFieldEnum)[keyof typeof AdministrationScalarFieldEnum]


  export const SchoolScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    phone: 'phone',
    address: 'address',
    logo: 'logo',
    createdAt: 'createdAt',
    updateAt: 'updateAt'
  };

  export type SchoolScalarFieldEnum = (typeof SchoolScalarFieldEnum)[keyof typeof SchoolScalarFieldEnum]


  export const StudentScalarFieldEnum: {
    id: 'id',
    username: 'username',
    admissionnumber: 'admissionnumber',
    firstname: 'firstname',
    surname: 'surname',
    othername: 'othername',
    birthday: 'birthday',
    gender: 'gender',
    religion: 'religion',
    studenttype: 'studenttype',
    house: 'house',
    bloodgroup: 'bloodgroup',
    admissiondate: 'admissiondate',
    email: 'email',
    phone: 'phone',
    address: 'address',
    state: 'state',
    lga: 'lga',
    avarta: 'avarta',
    parentid: 'parentid',
    schoolid: 'schoolid',
    classid: 'classid',
    createdAt: 'createdAt',
    updateAt: 'updateAt'
  };

  export type StudentScalarFieldEnum = (typeof StudentScalarFieldEnum)[keyof typeof StudentScalarFieldEnum]


  export const TeacherScalarFieldEnum: {
    id: 'id',
    username: 'username',
    title: 'title',
    firstname: 'firstname',
    surname: 'surname',
    othername: 'othername',
    birthday: 'birthday',
    bloodgroup: 'bloodgroup',
    gender: 'gender',
    state: 'state',
    lga: 'lga',
    email: 'email',
    phone: 'phone',
    address: 'address',
    avarta: 'avarta',
    schoolid: 'schoolid',
    createdAt: 'createdAt',
    updateAt: 'updateAt'
  };

  export type TeacherScalarFieldEnum = (typeof TeacherScalarFieldEnum)[keyof typeof TeacherScalarFieldEnum]


  export const ParentScalarFieldEnum: {
    id: 'id',
    username: 'username',
    title: 'title',
    firstname: 'firstname',
    surname: 'surname',
    othername: 'othername',
    birthday: 'birthday',
    bloodgroup: 'bloodgroup',
    gender: 'gender',
    occupation: 'occupation',
    religion: 'religion',
    state: 'state',
    lga: 'lga',
    email: 'email',
    phone: 'phone',
    address: 'address',
    createdAt: 'createdAt',
    updateAt: 'updateAt'
  };

  export type ParentScalarFieldEnum = (typeof ParentScalarFieldEnum)[keyof typeof ParentScalarFieldEnum]


  export const SubjectScalarFieldEnum: {
    id: 'id',
    name: 'name',
    category: 'category',
    schoolid: 'schoolid',
    createdAt: 'createdAt',
    updateAt: 'updateAt'
  };

  export type SubjectScalarFieldEnum = (typeof SubjectScalarFieldEnum)[keyof typeof SubjectScalarFieldEnum]


  export const ClassScalarFieldEnum: {
    id: 'id',
    name: 'name',
    category: 'category',
    level: 'level',
    capacity: 'capacity',
    formmasterid: 'formmasterid',
    createdAt: 'createdAt',
    updateAt: 'updateAt'
  };

  export type ClassScalarFieldEnum = (typeof ClassScalarFieldEnum)[keyof typeof ClassScalarFieldEnum]


  export const PaymentSetupScalarFieldEnum: {
    id: 'id',
    amount: 'amount',
    fees: 'fees',
    partpayment: 'partpayment',
    session: 'session',
    term: 'term',
    schoolid: 'schoolid',
    createdAt: 'createdAt',
    updateAt: 'updateAt'
  };

  export type PaymentSetupScalarFieldEnum = (typeof PaymentSetupScalarFieldEnum)[keyof typeof PaymentSetupScalarFieldEnum]


  export const TermScalarFieldEnum: {
    id: 'id',
    start: 'start',
    end: 'end',
    nextterm: 'nextterm',
    daysopen: 'daysopen',
    session: 'session',
    term: 'term',
    status: 'status',
    createdAt: 'createdAt',
    updateAt: 'updateAt'
  };

  export type TermScalarFieldEnum = (typeof TermScalarFieldEnum)[keyof typeof TermScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    id: 'id',
    session: 'session',
    term: 'term',
    amount: 'amount',
    schoolid: 'schoolid',
    studentid: 'studentid',
    createdAt: 'createdAt',
    updateAt: 'updateAt'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const AssignmentScalarFieldEnum: {
    id: 'id',
    title: 'title',
    text: 'text',
    file: 'file',
    duedate: 'duedate',
    graded: 'graded',
    subjectid: 'subjectid',
    teacherid: 'teacherid',
    createdAt: 'createdAt',
    updateAt: 'updateAt'
  };

  export type AssignmentScalarFieldEnum = (typeof AssignmentScalarFieldEnum)[keyof typeof AssignmentScalarFieldEnum]


  export const TestScalarFieldEnum: {
    id: 'id',
    title: 'title',
    status: 'status',
    instructions: 'instructions',
    duration: 'duration',
    maxscore: 'maxscore',
    open: 'open',
    testdate: 'testdate',
    testtime: 'testtime',
    term: 'term',
    subjectid: 'subjectid',
    teacherid: 'teacherid',
    createdAt: 'createdAt',
    updateAt: 'updateAt'
  };

  export type TestScalarFieldEnum = (typeof TestScalarFieldEnum)[keyof typeof TestScalarFieldEnum]


  export const QuestionScalarFieldEnum: {
    id: 'id',
    text: 'text',
    options: 'options',
    answer: 'answer',
    testid: 'testid'
  };

  export type QuestionScalarFieldEnum = (typeof QuestionScalarFieldEnum)[keyof typeof QuestionScalarFieldEnum]


  export const AnswerScalarFieldEnum: {
    id: 'id',
    score: 'score',
    testid: 'testid',
    studentid: 'studentid',
    createdAt: 'createdAt',
    updateAt: 'updateAt'
  };

  export type AnswerScalarFieldEnum = (typeof AnswerScalarFieldEnum)[keyof typeof AnswerScalarFieldEnum]


  export const SubmissionScalarFieldEnum: {
    id: 'id',
    answer: 'answer',
    feedback: 'feedback',
    score: 'score',
    file: 'file',
    assignmentId: 'assignmentId',
    studentId: 'studentId',
    createdAt: 'createdAt',
    updateAt: 'updateAt'
  };

  export type SubmissionScalarFieldEnum = (typeof SubmissionScalarFieldEnum)[keyof typeof SubmissionScalarFieldEnum]


  export const GradeScalarFieldEnum: {
    id: 'id',
    title: 'title',
    session: 'session',
    term: 'term',
    createdAt: 'createdAt',
    updateAt: 'updateAt'
  };

  export type GradeScalarFieldEnum = (typeof GradeScalarFieldEnum)[keyof typeof GradeScalarFieldEnum]


  export const ClassGradeScalarFieldEnum: {
    id: 'id',
    classid: 'classid',
    gradeid: 'gradeid'
  };

  export type ClassGradeScalarFieldEnum = (typeof ClassGradeScalarFieldEnum)[keyof typeof ClassGradeScalarFieldEnum]


  export const SubjectGradeScalarFieldEnum: {
    id: 'id',
    subjectid: 'subjectid',
    classid: 'classid'
  };

  export type SubjectGradeScalarFieldEnum = (typeof SubjectGradeScalarFieldEnum)[keyof typeof SubjectGradeScalarFieldEnum]


  export const StudentGradeScalarFieldEnum: {
    id: 'id',
    firstCa: 'firstCa',
    secondCa: 'secondCa',
    thirdCa: 'thirdCa',
    fourthCa: 'fourthCa',
    exams: 'exams',
    score: 'score',
    grade: 'grade',
    remark: 'remark',
    studentid: 'studentid',
    subjectgradeid: 'subjectgradeid'
  };

  export type StudentGradeScalarFieldEnum = (typeof StudentGradeScalarFieldEnum)[keyof typeof StudentGradeScalarFieldEnum]


  export const EffectiveDomainScalarFieldEnum: {
    id: 'id',
    classattendance: 'classattendance',
    punctuality: 'punctuality',
    initiative: 'initiative',
    responsibility: 'responsibility',
    neatness: 'neatness',
    cooperation: 'cooperation',
    organization: 'organization',
    studentid: 'studentid',
    gradeid: 'gradeid'
  };

  export type EffectiveDomainScalarFieldEnum = (typeof EffectiveDomainScalarFieldEnum)[keyof typeof EffectiveDomainScalarFieldEnum]


  export const PsychomotiveDomainScalarFieldEnum: {
    id: 'id',
    hardworking: 'hardworking',
    sports: 'sports',
    studentid: 'studentid',
    gradeid: 'gradeid'
  };

  export type PsychomotiveDomainScalarFieldEnum = (typeof PsychomotiveDomainScalarFieldEnum)[keyof typeof PsychomotiveDomainScalarFieldEnum]


  export const AttendanceScalarFieldEnum: {
    id: 'id',
    date: 'date',
    present: 'present',
    studentId: 'studentId'
  };

  export type AttendanceScalarFieldEnum = (typeof AttendanceScalarFieldEnum)[keyof typeof AttendanceScalarFieldEnum]


  export const EventScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    startTime: 'startTime',
    endTime: 'endTime',
    classId: 'classId'
  };

  export type EventScalarFieldEnum = (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]


  export const AnnouncementScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    date: 'date',
    classId: 'classId'
  };

  export type AnnouncementScalarFieldEnum = (typeof AnnouncementScalarFieldEnum)[keyof typeof AnnouncementScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Roles'
   */
  export type EnumRolesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Roles'>
    


  /**
   * Reference to a field of type 'Roles[]'
   */
  export type ListEnumRolesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Roles[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'UserSex'
   */
  export type EnumUserSexFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserSex'>
    


  /**
   * Reference to a field of type 'UserSex[]'
   */
  export type ListEnumUserSexFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserSex[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Terms'
   */
  export type EnumTermsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Terms'>
    


  /**
   * Reference to a field of type 'Terms[]'
   */
  export type ListEnumTermsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Terms[]'>
    


  /**
   * Reference to a field of type 'TermStatus'
   */
  export type EnumTermStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TermStatus'>
    


  /**
   * Reference to a field of type 'TermStatus[]'
   */
  export type ListEnumTermStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TermStatus[]'>
    


  /**
   * Reference to a field of type 'TestStatus'
   */
  export type EnumTestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TestStatus'>
    


  /**
   * Reference to a field of type 'TestStatus[]'
   */
  export type ListEnumTestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TestStatus[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type AdministrationWhereInput = {
    AND?: AdministrationWhereInput | AdministrationWhereInput[]
    OR?: AdministrationWhereInput[]
    NOT?: AdministrationWhereInput | AdministrationWhereInput[]
    id?: StringFilter<"Administration"> | string
    username?: StringFilter<"Administration"> | string
    email?: StringFilter<"Administration"> | string
    role?: EnumRolesFilter<"Administration"> | $Enums.Roles
    createdAt?: DateTimeFilter<"Administration"> | Date | string
    updateAt?: DateTimeFilter<"Administration"> | Date | string
  }

  export type AdministrationOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type AdministrationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    email?: string
    AND?: AdministrationWhereInput | AdministrationWhereInput[]
    OR?: AdministrationWhereInput[]
    NOT?: AdministrationWhereInput | AdministrationWhereInput[]
    role?: EnumRolesFilter<"Administration"> | $Enums.Roles
    createdAt?: DateTimeFilter<"Administration"> | Date | string
    updateAt?: DateTimeFilter<"Administration"> | Date | string
  }, "id" | "username" | "email">

  export type AdministrationOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    _count?: AdministrationCountOrderByAggregateInput
    _max?: AdministrationMaxOrderByAggregateInput
    _min?: AdministrationMinOrderByAggregateInput
  }

  export type AdministrationScalarWhereWithAggregatesInput = {
    AND?: AdministrationScalarWhereWithAggregatesInput | AdministrationScalarWhereWithAggregatesInput[]
    OR?: AdministrationScalarWhereWithAggregatesInput[]
    NOT?: AdministrationScalarWhereWithAggregatesInput | AdministrationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Administration"> | string
    username?: StringWithAggregatesFilter<"Administration"> | string
    email?: StringWithAggregatesFilter<"Administration"> | string
    role?: EnumRolesWithAggregatesFilter<"Administration"> | $Enums.Roles
    createdAt?: DateTimeWithAggregatesFilter<"Administration"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"Administration"> | Date | string
  }

  export type SchoolWhereInput = {
    AND?: SchoolWhereInput | SchoolWhereInput[]
    OR?: SchoolWhereInput[]
    NOT?: SchoolWhereInput | SchoolWhereInput[]
    id?: StringFilter<"School"> | string
    name?: StringFilter<"School"> | string
    email?: StringFilter<"School"> | string
    phone?: StringNullableFilter<"School"> | string | null
    address?: StringFilter<"School"> | string
    logo?: StringNullableFilter<"School"> | string | null
    createdAt?: DateTimeFilter<"School"> | Date | string
    updateAt?: DateTimeFilter<"School"> | Date | string
    students?: StudentListRelationFilter
    teachers?: TeacherListRelationFilter
    subjects?: SubjectListRelationFilter
    paymentsetups?: PaymentSetupListRelationFilter
    payments?: PaymentListRelationFilter
  }

  export type SchoolOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrder
    logo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    students?: StudentOrderByRelationAggregateInput
    teachers?: TeacherOrderByRelationAggregateInput
    subjects?: SubjectOrderByRelationAggregateInput
    paymentsetups?: PaymentSetupOrderByRelationAggregateInput
    payments?: PaymentOrderByRelationAggregateInput
  }

  export type SchoolWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    email?: string
    phone?: string
    AND?: SchoolWhereInput | SchoolWhereInput[]
    OR?: SchoolWhereInput[]
    NOT?: SchoolWhereInput | SchoolWhereInput[]
    address?: StringFilter<"School"> | string
    logo?: StringNullableFilter<"School"> | string | null
    createdAt?: DateTimeFilter<"School"> | Date | string
    updateAt?: DateTimeFilter<"School"> | Date | string
    students?: StudentListRelationFilter
    teachers?: TeacherListRelationFilter
    subjects?: SubjectListRelationFilter
    paymentsetups?: PaymentSetupListRelationFilter
    payments?: PaymentListRelationFilter
  }, "id" | "name" | "email" | "phone">

  export type SchoolOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrder
    logo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    _count?: SchoolCountOrderByAggregateInput
    _max?: SchoolMaxOrderByAggregateInput
    _min?: SchoolMinOrderByAggregateInput
  }

  export type SchoolScalarWhereWithAggregatesInput = {
    AND?: SchoolScalarWhereWithAggregatesInput | SchoolScalarWhereWithAggregatesInput[]
    OR?: SchoolScalarWhereWithAggregatesInput[]
    NOT?: SchoolScalarWhereWithAggregatesInput | SchoolScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"School"> | string
    name?: StringWithAggregatesFilter<"School"> | string
    email?: StringWithAggregatesFilter<"School"> | string
    phone?: StringNullableWithAggregatesFilter<"School"> | string | null
    address?: StringWithAggregatesFilter<"School"> | string
    logo?: StringNullableWithAggregatesFilter<"School"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"School"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"School"> | Date | string
  }

  export type StudentWhereInput = {
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    id?: StringFilter<"Student"> | string
    username?: StringFilter<"Student"> | string
    admissionnumber?: StringFilter<"Student"> | string
    firstname?: StringFilter<"Student"> | string
    surname?: StringFilter<"Student"> | string
    othername?: StringNullableFilter<"Student"> | string | null
    birthday?: DateTimeFilter<"Student"> | Date | string
    gender?: EnumUserSexFilter<"Student"> | $Enums.UserSex
    religion?: StringNullableFilter<"Student"> | string | null
    studenttype?: StringFilter<"Student"> | string
    house?: StringFilter<"Student"> | string
    bloodgroup?: StringFilter<"Student"> | string
    admissiondate?: DateTimeFilter<"Student"> | Date | string
    email?: StringFilter<"Student"> | string
    phone?: StringNullableFilter<"Student"> | string | null
    address?: StringFilter<"Student"> | string
    state?: StringFilter<"Student"> | string
    lga?: StringFilter<"Student"> | string
    avarta?: StringNullableFilter<"Student"> | string | null
    parentid?: StringFilter<"Student"> | string
    schoolid?: StringFilter<"Student"> | string
    classid?: StringFilter<"Student"> | string
    createdAt?: DateTimeFilter<"Student"> | Date | string
    updateAt?: DateTimeFilter<"Student"> | Date | string
    parent?: XOR<ParentScalarRelationFilter, ParentWhereInput>
    school?: XOR<SchoolScalarRelationFilter, SchoolWhereInput>
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    attendances?: AttendanceListRelationFilter
    assignments?: AssignmentListRelationFilter
    submissions?: SubmissionListRelationFilter
    answers?: AnswerListRelationFilter
    grades?: StudentGradeListRelationFilter
    effective?: EffectiveDomainListRelationFilter
    psychomotive?: PsychomotiveDomainListRelationFilter
    payments?: PaymentListRelationFilter
  }

  export type StudentOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    admissionnumber?: SortOrder
    firstname?: SortOrder
    surname?: SortOrder
    othername?: SortOrderInput | SortOrder
    birthday?: SortOrder
    gender?: SortOrder
    religion?: SortOrderInput | SortOrder
    studenttype?: SortOrder
    house?: SortOrder
    bloodgroup?: SortOrder
    admissiondate?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrder
    state?: SortOrder
    lga?: SortOrder
    avarta?: SortOrderInput | SortOrder
    parentid?: SortOrder
    schoolid?: SortOrder
    classid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    parent?: ParentOrderByWithRelationInput
    school?: SchoolOrderByWithRelationInput
    class?: ClassOrderByWithRelationInput
    attendances?: AttendanceOrderByRelationAggregateInput
    assignments?: AssignmentOrderByRelationAggregateInput
    submissions?: SubmissionOrderByRelationAggregateInput
    answers?: AnswerOrderByRelationAggregateInput
    grades?: StudentGradeOrderByRelationAggregateInput
    effective?: EffectiveDomainOrderByRelationAggregateInput
    psychomotive?: PsychomotiveDomainOrderByRelationAggregateInput
    payments?: PaymentOrderByRelationAggregateInput
  }

  export type StudentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    admissionnumber?: string
    email?: string
    phone?: string
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    firstname?: StringFilter<"Student"> | string
    surname?: StringFilter<"Student"> | string
    othername?: StringNullableFilter<"Student"> | string | null
    birthday?: DateTimeFilter<"Student"> | Date | string
    gender?: EnumUserSexFilter<"Student"> | $Enums.UserSex
    religion?: StringNullableFilter<"Student"> | string | null
    studenttype?: StringFilter<"Student"> | string
    house?: StringFilter<"Student"> | string
    bloodgroup?: StringFilter<"Student"> | string
    admissiondate?: DateTimeFilter<"Student"> | Date | string
    address?: StringFilter<"Student"> | string
    state?: StringFilter<"Student"> | string
    lga?: StringFilter<"Student"> | string
    avarta?: StringNullableFilter<"Student"> | string | null
    parentid?: StringFilter<"Student"> | string
    schoolid?: StringFilter<"Student"> | string
    classid?: StringFilter<"Student"> | string
    createdAt?: DateTimeFilter<"Student"> | Date | string
    updateAt?: DateTimeFilter<"Student"> | Date | string
    parent?: XOR<ParentScalarRelationFilter, ParentWhereInput>
    school?: XOR<SchoolScalarRelationFilter, SchoolWhereInput>
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    attendances?: AttendanceListRelationFilter
    assignments?: AssignmentListRelationFilter
    submissions?: SubmissionListRelationFilter
    answers?: AnswerListRelationFilter
    grades?: StudentGradeListRelationFilter
    effective?: EffectiveDomainListRelationFilter
    psychomotive?: PsychomotiveDomainListRelationFilter
    payments?: PaymentListRelationFilter
  }, "id" | "username" | "admissionnumber" | "email" | "phone">

  export type StudentOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    admissionnumber?: SortOrder
    firstname?: SortOrder
    surname?: SortOrder
    othername?: SortOrderInput | SortOrder
    birthday?: SortOrder
    gender?: SortOrder
    religion?: SortOrderInput | SortOrder
    studenttype?: SortOrder
    house?: SortOrder
    bloodgroup?: SortOrder
    admissiondate?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrder
    state?: SortOrder
    lga?: SortOrder
    avarta?: SortOrderInput | SortOrder
    parentid?: SortOrder
    schoolid?: SortOrder
    classid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    _count?: StudentCountOrderByAggregateInput
    _max?: StudentMaxOrderByAggregateInput
    _min?: StudentMinOrderByAggregateInput
  }

  export type StudentScalarWhereWithAggregatesInput = {
    AND?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    OR?: StudentScalarWhereWithAggregatesInput[]
    NOT?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Student"> | string
    username?: StringWithAggregatesFilter<"Student"> | string
    admissionnumber?: StringWithAggregatesFilter<"Student"> | string
    firstname?: StringWithAggregatesFilter<"Student"> | string
    surname?: StringWithAggregatesFilter<"Student"> | string
    othername?: StringNullableWithAggregatesFilter<"Student"> | string | null
    birthday?: DateTimeWithAggregatesFilter<"Student"> | Date | string
    gender?: EnumUserSexWithAggregatesFilter<"Student"> | $Enums.UserSex
    religion?: StringNullableWithAggregatesFilter<"Student"> | string | null
    studenttype?: StringWithAggregatesFilter<"Student"> | string
    house?: StringWithAggregatesFilter<"Student"> | string
    bloodgroup?: StringWithAggregatesFilter<"Student"> | string
    admissiondate?: DateTimeWithAggregatesFilter<"Student"> | Date | string
    email?: StringWithAggregatesFilter<"Student"> | string
    phone?: StringNullableWithAggregatesFilter<"Student"> | string | null
    address?: StringWithAggregatesFilter<"Student"> | string
    state?: StringWithAggregatesFilter<"Student"> | string
    lga?: StringWithAggregatesFilter<"Student"> | string
    avarta?: StringNullableWithAggregatesFilter<"Student"> | string | null
    parentid?: StringWithAggregatesFilter<"Student"> | string
    schoolid?: StringWithAggregatesFilter<"Student"> | string
    classid?: StringWithAggregatesFilter<"Student"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Student"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"Student"> | Date | string
  }

  export type TeacherWhereInput = {
    AND?: TeacherWhereInput | TeacherWhereInput[]
    OR?: TeacherWhereInput[]
    NOT?: TeacherWhereInput | TeacherWhereInput[]
    id?: StringFilter<"Teacher"> | string
    username?: StringFilter<"Teacher"> | string
    title?: StringFilter<"Teacher"> | string
    firstname?: StringFilter<"Teacher"> | string
    surname?: StringFilter<"Teacher"> | string
    othername?: StringNullableFilter<"Teacher"> | string | null
    birthday?: DateTimeNullableFilter<"Teacher"> | Date | string | null
    bloodgroup?: StringNullableFilter<"Teacher"> | string | null
    gender?: EnumUserSexFilter<"Teacher"> | $Enums.UserSex
    state?: StringFilter<"Teacher"> | string
    lga?: StringFilter<"Teacher"> | string
    email?: StringFilter<"Teacher"> | string
    phone?: StringNullableFilter<"Teacher"> | string | null
    address?: StringFilter<"Teacher"> | string
    avarta?: StringNullableFilter<"Teacher"> | string | null
    schoolid?: StringFilter<"Teacher"> | string
    createdAt?: DateTimeFilter<"Teacher"> | Date | string
    updateAt?: DateTimeFilter<"Teacher"> | Date | string
    school?: XOR<SchoolScalarRelationFilter, SchoolWhereInput>
    subjects?: SubjectListRelationFilter
    classes?: ClassListRelationFilter
    assignments?: AssignmentListRelationFilter
    tests?: TestListRelationFilter
  }

  export type TeacherOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    title?: SortOrder
    firstname?: SortOrder
    surname?: SortOrder
    othername?: SortOrderInput | SortOrder
    birthday?: SortOrderInput | SortOrder
    bloodgroup?: SortOrderInput | SortOrder
    gender?: SortOrder
    state?: SortOrder
    lga?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrder
    avarta?: SortOrderInput | SortOrder
    schoolid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    school?: SchoolOrderByWithRelationInput
    subjects?: SubjectOrderByRelationAggregateInput
    classes?: ClassOrderByRelationAggregateInput
    assignments?: AssignmentOrderByRelationAggregateInput
    tests?: TestOrderByRelationAggregateInput
  }

  export type TeacherWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    email?: string
    phone?: string
    AND?: TeacherWhereInput | TeacherWhereInput[]
    OR?: TeacherWhereInput[]
    NOT?: TeacherWhereInput | TeacherWhereInput[]
    title?: StringFilter<"Teacher"> | string
    firstname?: StringFilter<"Teacher"> | string
    surname?: StringFilter<"Teacher"> | string
    othername?: StringNullableFilter<"Teacher"> | string | null
    birthday?: DateTimeNullableFilter<"Teacher"> | Date | string | null
    bloodgroup?: StringNullableFilter<"Teacher"> | string | null
    gender?: EnumUserSexFilter<"Teacher"> | $Enums.UserSex
    state?: StringFilter<"Teacher"> | string
    lga?: StringFilter<"Teacher"> | string
    address?: StringFilter<"Teacher"> | string
    avarta?: StringNullableFilter<"Teacher"> | string | null
    schoolid?: StringFilter<"Teacher"> | string
    createdAt?: DateTimeFilter<"Teacher"> | Date | string
    updateAt?: DateTimeFilter<"Teacher"> | Date | string
    school?: XOR<SchoolScalarRelationFilter, SchoolWhereInput>
    subjects?: SubjectListRelationFilter
    classes?: ClassListRelationFilter
    assignments?: AssignmentListRelationFilter
    tests?: TestListRelationFilter
  }, "id" | "username" | "email" | "phone">

  export type TeacherOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    title?: SortOrder
    firstname?: SortOrder
    surname?: SortOrder
    othername?: SortOrderInput | SortOrder
    birthday?: SortOrderInput | SortOrder
    bloodgroup?: SortOrderInput | SortOrder
    gender?: SortOrder
    state?: SortOrder
    lga?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrder
    avarta?: SortOrderInput | SortOrder
    schoolid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    _count?: TeacherCountOrderByAggregateInput
    _max?: TeacherMaxOrderByAggregateInput
    _min?: TeacherMinOrderByAggregateInput
  }

  export type TeacherScalarWhereWithAggregatesInput = {
    AND?: TeacherScalarWhereWithAggregatesInput | TeacherScalarWhereWithAggregatesInput[]
    OR?: TeacherScalarWhereWithAggregatesInput[]
    NOT?: TeacherScalarWhereWithAggregatesInput | TeacherScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Teacher"> | string
    username?: StringWithAggregatesFilter<"Teacher"> | string
    title?: StringWithAggregatesFilter<"Teacher"> | string
    firstname?: StringWithAggregatesFilter<"Teacher"> | string
    surname?: StringWithAggregatesFilter<"Teacher"> | string
    othername?: StringNullableWithAggregatesFilter<"Teacher"> | string | null
    birthday?: DateTimeNullableWithAggregatesFilter<"Teacher"> | Date | string | null
    bloodgroup?: StringNullableWithAggregatesFilter<"Teacher"> | string | null
    gender?: EnumUserSexWithAggregatesFilter<"Teacher"> | $Enums.UserSex
    state?: StringWithAggregatesFilter<"Teacher"> | string
    lga?: StringWithAggregatesFilter<"Teacher"> | string
    email?: StringWithAggregatesFilter<"Teacher"> | string
    phone?: StringNullableWithAggregatesFilter<"Teacher"> | string | null
    address?: StringWithAggregatesFilter<"Teacher"> | string
    avarta?: StringNullableWithAggregatesFilter<"Teacher"> | string | null
    schoolid?: StringWithAggregatesFilter<"Teacher"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Teacher"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"Teacher"> | Date | string
  }

  export type ParentWhereInput = {
    AND?: ParentWhereInput | ParentWhereInput[]
    OR?: ParentWhereInput[]
    NOT?: ParentWhereInput | ParentWhereInput[]
    id?: StringFilter<"Parent"> | string
    username?: StringFilter<"Parent"> | string
    title?: StringFilter<"Parent"> | string
    firstname?: StringFilter<"Parent"> | string
    surname?: StringFilter<"Parent"> | string
    othername?: StringNullableFilter<"Parent"> | string | null
    birthday?: DateTimeNullableFilter<"Parent"> | Date | string | null
    bloodgroup?: StringNullableFilter<"Parent"> | string | null
    gender?: EnumUserSexFilter<"Parent"> | $Enums.UserSex
    occupation?: StringFilter<"Parent"> | string
    religion?: StringFilter<"Parent"> | string
    state?: StringFilter<"Parent"> | string
    lga?: StringFilter<"Parent"> | string
    email?: StringFilter<"Parent"> | string
    phone?: StringFilter<"Parent"> | string
    address?: StringFilter<"Parent"> | string
    createdAt?: DateTimeFilter<"Parent"> | Date | string
    updateAt?: DateTimeFilter<"Parent"> | Date | string
    students?: StudentListRelationFilter
  }

  export type ParentOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    title?: SortOrder
    firstname?: SortOrder
    surname?: SortOrder
    othername?: SortOrderInput | SortOrder
    birthday?: SortOrderInput | SortOrder
    bloodgroup?: SortOrderInput | SortOrder
    gender?: SortOrder
    occupation?: SortOrder
    religion?: SortOrder
    state?: SortOrder
    lga?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    students?: StudentOrderByRelationAggregateInput
  }

  export type ParentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    email?: string
    phone?: string
    AND?: ParentWhereInput | ParentWhereInput[]
    OR?: ParentWhereInput[]
    NOT?: ParentWhereInput | ParentWhereInput[]
    title?: StringFilter<"Parent"> | string
    firstname?: StringFilter<"Parent"> | string
    surname?: StringFilter<"Parent"> | string
    othername?: StringNullableFilter<"Parent"> | string | null
    birthday?: DateTimeNullableFilter<"Parent"> | Date | string | null
    bloodgroup?: StringNullableFilter<"Parent"> | string | null
    gender?: EnumUserSexFilter<"Parent"> | $Enums.UserSex
    occupation?: StringFilter<"Parent"> | string
    religion?: StringFilter<"Parent"> | string
    state?: StringFilter<"Parent"> | string
    lga?: StringFilter<"Parent"> | string
    address?: StringFilter<"Parent"> | string
    createdAt?: DateTimeFilter<"Parent"> | Date | string
    updateAt?: DateTimeFilter<"Parent"> | Date | string
    students?: StudentListRelationFilter
  }, "id" | "username" | "email" | "phone">

  export type ParentOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    title?: SortOrder
    firstname?: SortOrder
    surname?: SortOrder
    othername?: SortOrderInput | SortOrder
    birthday?: SortOrderInput | SortOrder
    bloodgroup?: SortOrderInput | SortOrder
    gender?: SortOrder
    occupation?: SortOrder
    religion?: SortOrder
    state?: SortOrder
    lga?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    _count?: ParentCountOrderByAggregateInput
    _max?: ParentMaxOrderByAggregateInput
    _min?: ParentMinOrderByAggregateInput
  }

  export type ParentScalarWhereWithAggregatesInput = {
    AND?: ParentScalarWhereWithAggregatesInput | ParentScalarWhereWithAggregatesInput[]
    OR?: ParentScalarWhereWithAggregatesInput[]
    NOT?: ParentScalarWhereWithAggregatesInput | ParentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Parent"> | string
    username?: StringWithAggregatesFilter<"Parent"> | string
    title?: StringWithAggregatesFilter<"Parent"> | string
    firstname?: StringWithAggregatesFilter<"Parent"> | string
    surname?: StringWithAggregatesFilter<"Parent"> | string
    othername?: StringNullableWithAggregatesFilter<"Parent"> | string | null
    birthday?: DateTimeNullableWithAggregatesFilter<"Parent"> | Date | string | null
    bloodgroup?: StringNullableWithAggregatesFilter<"Parent"> | string | null
    gender?: EnumUserSexWithAggregatesFilter<"Parent"> | $Enums.UserSex
    occupation?: StringWithAggregatesFilter<"Parent"> | string
    religion?: StringWithAggregatesFilter<"Parent"> | string
    state?: StringWithAggregatesFilter<"Parent"> | string
    lga?: StringWithAggregatesFilter<"Parent"> | string
    email?: StringWithAggregatesFilter<"Parent"> | string
    phone?: StringWithAggregatesFilter<"Parent"> | string
    address?: StringWithAggregatesFilter<"Parent"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Parent"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"Parent"> | Date | string
  }

  export type SubjectWhereInput = {
    AND?: SubjectWhereInput | SubjectWhereInput[]
    OR?: SubjectWhereInput[]
    NOT?: SubjectWhereInput | SubjectWhereInput[]
    id?: StringFilter<"Subject"> | string
    name?: StringFilter<"Subject"> | string
    category?: StringFilter<"Subject"> | string
    schoolid?: StringFilter<"Subject"> | string
    createdAt?: DateTimeFilter<"Subject"> | Date | string
    updateAt?: DateTimeFilter<"Subject"> | Date | string
    school?: XOR<SchoolScalarRelationFilter, SchoolWhereInput>
    teachers?: TeacherListRelationFilter
    assignments?: AssignmentListRelationFilter
    grades?: SubjectGradeListRelationFilter
    tests?: TestListRelationFilter
  }

  export type SubjectOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    schoolid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    school?: SchoolOrderByWithRelationInput
    teachers?: TeacherOrderByRelationAggregateInput
    assignments?: AssignmentOrderByRelationAggregateInput
    grades?: SubjectGradeOrderByRelationAggregateInput
    tests?: TestOrderByRelationAggregateInput
  }

  export type SubjectWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: SubjectWhereInput | SubjectWhereInput[]
    OR?: SubjectWhereInput[]
    NOT?: SubjectWhereInput | SubjectWhereInput[]
    category?: StringFilter<"Subject"> | string
    schoolid?: StringFilter<"Subject"> | string
    createdAt?: DateTimeFilter<"Subject"> | Date | string
    updateAt?: DateTimeFilter<"Subject"> | Date | string
    school?: XOR<SchoolScalarRelationFilter, SchoolWhereInput>
    teachers?: TeacherListRelationFilter
    assignments?: AssignmentListRelationFilter
    grades?: SubjectGradeListRelationFilter
    tests?: TestListRelationFilter
  }, "id" | "name">

  export type SubjectOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    schoolid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    _count?: SubjectCountOrderByAggregateInput
    _max?: SubjectMaxOrderByAggregateInput
    _min?: SubjectMinOrderByAggregateInput
  }

  export type SubjectScalarWhereWithAggregatesInput = {
    AND?: SubjectScalarWhereWithAggregatesInput | SubjectScalarWhereWithAggregatesInput[]
    OR?: SubjectScalarWhereWithAggregatesInput[]
    NOT?: SubjectScalarWhereWithAggregatesInput | SubjectScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Subject"> | string
    name?: StringWithAggregatesFilter<"Subject"> | string
    category?: StringWithAggregatesFilter<"Subject"> | string
    schoolid?: StringWithAggregatesFilter<"Subject"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Subject"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"Subject"> | Date | string
  }

  export type ClassWhereInput = {
    AND?: ClassWhereInput | ClassWhereInput[]
    OR?: ClassWhereInput[]
    NOT?: ClassWhereInput | ClassWhereInput[]
    id?: StringFilter<"Class"> | string
    name?: StringFilter<"Class"> | string
    category?: StringFilter<"Class"> | string
    level?: StringFilter<"Class"> | string
    capacity?: IntNullableFilter<"Class"> | number | null
    formmasterid?: StringNullableFilter<"Class"> | string | null
    createdAt?: DateTimeFilter<"Class"> | Date | string
    updateAt?: DateTimeFilter<"Class"> | Date | string
    formmaster?: XOR<TeacherNullableScalarRelationFilter, TeacherWhereInput> | null
    students?: StudentListRelationFilter
    gradings?: ClassGradeListRelationFilter
    events?: EventListRelationFilter
    announcements?: AnnouncementListRelationFilter
  }

  export type ClassOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    level?: SortOrder
    capacity?: SortOrderInput | SortOrder
    formmasterid?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    formmaster?: TeacherOrderByWithRelationInput
    students?: StudentOrderByRelationAggregateInput
    gradings?: ClassGradeOrderByRelationAggregateInput
    events?: EventOrderByRelationAggregateInput
    announcements?: AnnouncementOrderByRelationAggregateInput
  }

  export type ClassWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: ClassWhereInput | ClassWhereInput[]
    OR?: ClassWhereInput[]
    NOT?: ClassWhereInput | ClassWhereInput[]
    category?: StringFilter<"Class"> | string
    level?: StringFilter<"Class"> | string
    capacity?: IntNullableFilter<"Class"> | number | null
    formmasterid?: StringNullableFilter<"Class"> | string | null
    createdAt?: DateTimeFilter<"Class"> | Date | string
    updateAt?: DateTimeFilter<"Class"> | Date | string
    formmaster?: XOR<TeacherNullableScalarRelationFilter, TeacherWhereInput> | null
    students?: StudentListRelationFilter
    gradings?: ClassGradeListRelationFilter
    events?: EventListRelationFilter
    announcements?: AnnouncementListRelationFilter
  }, "id" | "name">

  export type ClassOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    level?: SortOrder
    capacity?: SortOrderInput | SortOrder
    formmasterid?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    _count?: ClassCountOrderByAggregateInput
    _avg?: ClassAvgOrderByAggregateInput
    _max?: ClassMaxOrderByAggregateInput
    _min?: ClassMinOrderByAggregateInput
    _sum?: ClassSumOrderByAggregateInput
  }

  export type ClassScalarWhereWithAggregatesInput = {
    AND?: ClassScalarWhereWithAggregatesInput | ClassScalarWhereWithAggregatesInput[]
    OR?: ClassScalarWhereWithAggregatesInput[]
    NOT?: ClassScalarWhereWithAggregatesInput | ClassScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Class"> | string
    name?: StringWithAggregatesFilter<"Class"> | string
    category?: StringWithAggregatesFilter<"Class"> | string
    level?: StringWithAggregatesFilter<"Class"> | string
    capacity?: IntNullableWithAggregatesFilter<"Class"> | number | null
    formmasterid?: StringNullableWithAggregatesFilter<"Class"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Class"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"Class"> | Date | string
  }

  export type PaymentSetupWhereInput = {
    AND?: PaymentSetupWhereInput | PaymentSetupWhereInput[]
    OR?: PaymentSetupWhereInput[]
    NOT?: PaymentSetupWhereInput | PaymentSetupWhereInput[]
    id?: StringFilter<"PaymentSetup"> | string
    amount?: IntFilter<"PaymentSetup"> | number
    fees?: IntFilter<"PaymentSetup"> | number
    partpayment?: BoolFilter<"PaymentSetup"> | boolean
    session?: StringFilter<"PaymentSetup"> | string
    term?: StringFilter<"PaymentSetup"> | string
    schoolid?: StringFilter<"PaymentSetup"> | string
    createdAt?: DateTimeFilter<"PaymentSetup"> | Date | string
    updateAt?: DateTimeFilter<"PaymentSetup"> | Date | string
    school?: XOR<SchoolScalarRelationFilter, SchoolWhereInput>
  }

  export type PaymentSetupOrderByWithRelationInput = {
    id?: SortOrder
    amount?: SortOrder
    fees?: SortOrder
    partpayment?: SortOrder
    session?: SortOrder
    term?: SortOrder
    schoolid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    school?: SchoolOrderByWithRelationInput
  }

  export type PaymentSetupWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PaymentSetupWhereInput | PaymentSetupWhereInput[]
    OR?: PaymentSetupWhereInput[]
    NOT?: PaymentSetupWhereInput | PaymentSetupWhereInput[]
    amount?: IntFilter<"PaymentSetup"> | number
    fees?: IntFilter<"PaymentSetup"> | number
    partpayment?: BoolFilter<"PaymentSetup"> | boolean
    session?: StringFilter<"PaymentSetup"> | string
    term?: StringFilter<"PaymentSetup"> | string
    schoolid?: StringFilter<"PaymentSetup"> | string
    createdAt?: DateTimeFilter<"PaymentSetup"> | Date | string
    updateAt?: DateTimeFilter<"PaymentSetup"> | Date | string
    school?: XOR<SchoolScalarRelationFilter, SchoolWhereInput>
  }, "id">

  export type PaymentSetupOrderByWithAggregationInput = {
    id?: SortOrder
    amount?: SortOrder
    fees?: SortOrder
    partpayment?: SortOrder
    session?: SortOrder
    term?: SortOrder
    schoolid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    _count?: PaymentSetupCountOrderByAggregateInput
    _avg?: PaymentSetupAvgOrderByAggregateInput
    _max?: PaymentSetupMaxOrderByAggregateInput
    _min?: PaymentSetupMinOrderByAggregateInput
    _sum?: PaymentSetupSumOrderByAggregateInput
  }

  export type PaymentSetupScalarWhereWithAggregatesInput = {
    AND?: PaymentSetupScalarWhereWithAggregatesInput | PaymentSetupScalarWhereWithAggregatesInput[]
    OR?: PaymentSetupScalarWhereWithAggregatesInput[]
    NOT?: PaymentSetupScalarWhereWithAggregatesInput | PaymentSetupScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PaymentSetup"> | string
    amount?: IntWithAggregatesFilter<"PaymentSetup"> | number
    fees?: IntWithAggregatesFilter<"PaymentSetup"> | number
    partpayment?: BoolWithAggregatesFilter<"PaymentSetup"> | boolean
    session?: StringWithAggregatesFilter<"PaymentSetup"> | string
    term?: StringWithAggregatesFilter<"PaymentSetup"> | string
    schoolid?: StringWithAggregatesFilter<"PaymentSetup"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PaymentSetup"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"PaymentSetup"> | Date | string
  }

  export type TermWhereInput = {
    AND?: TermWhereInput | TermWhereInput[]
    OR?: TermWhereInput[]
    NOT?: TermWhereInput | TermWhereInput[]
    id?: StringFilter<"Term"> | string
    start?: DateTimeFilter<"Term"> | Date | string
    end?: DateTimeFilter<"Term"> | Date | string
    nextterm?: DateTimeFilter<"Term"> | Date | string
    daysopen?: IntFilter<"Term"> | number
    session?: StringFilter<"Term"> | string
    term?: EnumTermsFilter<"Term"> | $Enums.Terms
    status?: EnumTermStatusFilter<"Term"> | $Enums.TermStatus
    createdAt?: DateTimeFilter<"Term"> | Date | string
    updateAt?: DateTimeFilter<"Term"> | Date | string
  }

  export type TermOrderByWithRelationInput = {
    id?: SortOrder
    start?: SortOrder
    end?: SortOrder
    nextterm?: SortOrder
    daysopen?: SortOrder
    session?: SortOrder
    term?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type TermWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TermWhereInput | TermWhereInput[]
    OR?: TermWhereInput[]
    NOT?: TermWhereInput | TermWhereInput[]
    start?: DateTimeFilter<"Term"> | Date | string
    end?: DateTimeFilter<"Term"> | Date | string
    nextterm?: DateTimeFilter<"Term"> | Date | string
    daysopen?: IntFilter<"Term"> | number
    session?: StringFilter<"Term"> | string
    term?: EnumTermsFilter<"Term"> | $Enums.Terms
    status?: EnumTermStatusFilter<"Term"> | $Enums.TermStatus
    createdAt?: DateTimeFilter<"Term"> | Date | string
    updateAt?: DateTimeFilter<"Term"> | Date | string
  }, "id">

  export type TermOrderByWithAggregationInput = {
    id?: SortOrder
    start?: SortOrder
    end?: SortOrder
    nextterm?: SortOrder
    daysopen?: SortOrder
    session?: SortOrder
    term?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    _count?: TermCountOrderByAggregateInput
    _avg?: TermAvgOrderByAggregateInput
    _max?: TermMaxOrderByAggregateInput
    _min?: TermMinOrderByAggregateInput
    _sum?: TermSumOrderByAggregateInput
  }

  export type TermScalarWhereWithAggregatesInput = {
    AND?: TermScalarWhereWithAggregatesInput | TermScalarWhereWithAggregatesInput[]
    OR?: TermScalarWhereWithAggregatesInput[]
    NOT?: TermScalarWhereWithAggregatesInput | TermScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Term"> | string
    start?: DateTimeWithAggregatesFilter<"Term"> | Date | string
    end?: DateTimeWithAggregatesFilter<"Term"> | Date | string
    nextterm?: DateTimeWithAggregatesFilter<"Term"> | Date | string
    daysopen?: IntWithAggregatesFilter<"Term"> | number
    session?: StringWithAggregatesFilter<"Term"> | string
    term?: EnumTermsWithAggregatesFilter<"Term"> | $Enums.Terms
    status?: EnumTermStatusWithAggregatesFilter<"Term"> | $Enums.TermStatus
    createdAt?: DateTimeWithAggregatesFilter<"Term"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"Term"> | Date | string
  }

  export type PaymentWhereInput = {
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    id?: StringFilter<"Payment"> | string
    session?: StringFilter<"Payment"> | string
    term?: EnumTermsFilter<"Payment"> | $Enums.Terms
    amount?: IntFilter<"Payment"> | number
    schoolid?: StringFilter<"Payment"> | string
    studentid?: StringFilter<"Payment"> | string
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updateAt?: DateTimeFilter<"Payment"> | Date | string
    school?: XOR<SchoolScalarRelationFilter, SchoolWhereInput>
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }

  export type PaymentOrderByWithRelationInput = {
    id?: SortOrder
    session?: SortOrder
    term?: SortOrder
    amount?: SortOrder
    schoolid?: SortOrder
    studentid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    school?: SchoolOrderByWithRelationInput
    student?: StudentOrderByWithRelationInput
  }

  export type PaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    session?: StringFilter<"Payment"> | string
    term?: EnumTermsFilter<"Payment"> | $Enums.Terms
    amount?: IntFilter<"Payment"> | number
    schoolid?: StringFilter<"Payment"> | string
    studentid?: StringFilter<"Payment"> | string
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updateAt?: DateTimeFilter<"Payment"> | Date | string
    school?: XOR<SchoolScalarRelationFilter, SchoolWhereInput>
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }, "id">

  export type PaymentOrderByWithAggregationInput = {
    id?: SortOrder
    session?: SortOrder
    term?: SortOrder
    amount?: SortOrder
    schoolid?: SortOrder
    studentid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    _count?: PaymentCountOrderByAggregateInput
    _avg?: PaymentAvgOrderByAggregateInput
    _max?: PaymentMaxOrderByAggregateInput
    _min?: PaymentMinOrderByAggregateInput
    _sum?: PaymentSumOrderByAggregateInput
  }

  export type PaymentScalarWhereWithAggregatesInput = {
    AND?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    OR?: PaymentScalarWhereWithAggregatesInput[]
    NOT?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Payment"> | string
    session?: StringWithAggregatesFilter<"Payment"> | string
    term?: EnumTermsWithAggregatesFilter<"Payment"> | $Enums.Terms
    amount?: IntWithAggregatesFilter<"Payment"> | number
    schoolid?: StringWithAggregatesFilter<"Payment"> | string
    studentid?: StringWithAggregatesFilter<"Payment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
  }

  export type AssignmentWhereInput = {
    AND?: AssignmentWhereInput | AssignmentWhereInput[]
    OR?: AssignmentWhereInput[]
    NOT?: AssignmentWhereInput | AssignmentWhereInput[]
    id?: StringFilter<"Assignment"> | string
    title?: StringFilter<"Assignment"> | string
    text?: StringFilter<"Assignment"> | string
    file?: StringFilter<"Assignment"> | string
    duedate?: DateTimeFilter<"Assignment"> | Date | string
    graded?: BoolFilter<"Assignment"> | boolean
    subjectid?: StringFilter<"Assignment"> | string
    teacherid?: StringFilter<"Assignment"> | string
    createdAt?: DateTimeFilter<"Assignment"> | Date | string
    updateAt?: DateTimeFilter<"Assignment"> | Date | string
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
    teacher?: XOR<TeacherScalarRelationFilter, TeacherWhereInput>
    submissions?: SubmissionListRelationFilter
    students?: StudentListRelationFilter
  }

  export type AssignmentOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    text?: SortOrder
    file?: SortOrder
    duedate?: SortOrder
    graded?: SortOrder
    subjectid?: SortOrder
    teacherid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    subject?: SubjectOrderByWithRelationInput
    teacher?: TeacherOrderByWithRelationInput
    submissions?: SubmissionOrderByRelationAggregateInput
    students?: StudentOrderByRelationAggregateInput
  }

  export type AssignmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AssignmentWhereInput | AssignmentWhereInput[]
    OR?: AssignmentWhereInput[]
    NOT?: AssignmentWhereInput | AssignmentWhereInput[]
    title?: StringFilter<"Assignment"> | string
    text?: StringFilter<"Assignment"> | string
    file?: StringFilter<"Assignment"> | string
    duedate?: DateTimeFilter<"Assignment"> | Date | string
    graded?: BoolFilter<"Assignment"> | boolean
    subjectid?: StringFilter<"Assignment"> | string
    teacherid?: StringFilter<"Assignment"> | string
    createdAt?: DateTimeFilter<"Assignment"> | Date | string
    updateAt?: DateTimeFilter<"Assignment"> | Date | string
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
    teacher?: XOR<TeacherScalarRelationFilter, TeacherWhereInput>
    submissions?: SubmissionListRelationFilter
    students?: StudentListRelationFilter
  }, "id">

  export type AssignmentOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    text?: SortOrder
    file?: SortOrder
    duedate?: SortOrder
    graded?: SortOrder
    subjectid?: SortOrder
    teacherid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    _count?: AssignmentCountOrderByAggregateInput
    _max?: AssignmentMaxOrderByAggregateInput
    _min?: AssignmentMinOrderByAggregateInput
  }

  export type AssignmentScalarWhereWithAggregatesInput = {
    AND?: AssignmentScalarWhereWithAggregatesInput | AssignmentScalarWhereWithAggregatesInput[]
    OR?: AssignmentScalarWhereWithAggregatesInput[]
    NOT?: AssignmentScalarWhereWithAggregatesInput | AssignmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Assignment"> | string
    title?: StringWithAggregatesFilter<"Assignment"> | string
    text?: StringWithAggregatesFilter<"Assignment"> | string
    file?: StringWithAggregatesFilter<"Assignment"> | string
    duedate?: DateTimeWithAggregatesFilter<"Assignment"> | Date | string
    graded?: BoolWithAggregatesFilter<"Assignment"> | boolean
    subjectid?: StringWithAggregatesFilter<"Assignment"> | string
    teacherid?: StringWithAggregatesFilter<"Assignment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Assignment"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"Assignment"> | Date | string
  }

  export type TestWhereInput = {
    AND?: TestWhereInput | TestWhereInput[]
    OR?: TestWhereInput[]
    NOT?: TestWhereInput | TestWhereInput[]
    id?: StringFilter<"Test"> | string
    title?: StringFilter<"Test"> | string
    status?: EnumTestStatusFilter<"Test"> | $Enums.TestStatus
    instructions?: StringFilter<"Test"> | string
    duration?: IntFilter<"Test"> | number
    maxscore?: IntFilter<"Test"> | number
    open?: BoolFilter<"Test"> | boolean
    testdate?: DateTimeFilter<"Test"> | Date | string
    testtime?: DateTimeFilter<"Test"> | Date | string
    term?: StringFilter<"Test"> | string
    subjectid?: StringFilter<"Test"> | string
    teacherid?: StringFilter<"Test"> | string
    createdAt?: DateTimeFilter<"Test"> | Date | string
    updateAt?: DateTimeFilter<"Test"> | Date | string
    questions?: QuestionListRelationFilter
    answers?: AnswerListRelationFilter
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
    teacher?: XOR<TeacherScalarRelationFilter, TeacherWhereInput>
  }

  export type TestOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    status?: SortOrder
    instructions?: SortOrder
    duration?: SortOrder
    maxscore?: SortOrder
    open?: SortOrder
    testdate?: SortOrder
    testtime?: SortOrder
    term?: SortOrder
    subjectid?: SortOrder
    teacherid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    questions?: QuestionOrderByRelationAggregateInput
    answers?: AnswerOrderByRelationAggregateInput
    subject?: SubjectOrderByWithRelationInput
    teacher?: TeacherOrderByWithRelationInput
  }

  export type TestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TestWhereInput | TestWhereInput[]
    OR?: TestWhereInput[]
    NOT?: TestWhereInput | TestWhereInput[]
    title?: StringFilter<"Test"> | string
    status?: EnumTestStatusFilter<"Test"> | $Enums.TestStatus
    instructions?: StringFilter<"Test"> | string
    duration?: IntFilter<"Test"> | number
    maxscore?: IntFilter<"Test"> | number
    open?: BoolFilter<"Test"> | boolean
    testdate?: DateTimeFilter<"Test"> | Date | string
    testtime?: DateTimeFilter<"Test"> | Date | string
    term?: StringFilter<"Test"> | string
    subjectid?: StringFilter<"Test"> | string
    teacherid?: StringFilter<"Test"> | string
    createdAt?: DateTimeFilter<"Test"> | Date | string
    updateAt?: DateTimeFilter<"Test"> | Date | string
    questions?: QuestionListRelationFilter
    answers?: AnswerListRelationFilter
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
    teacher?: XOR<TeacherScalarRelationFilter, TeacherWhereInput>
  }, "id">

  export type TestOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    status?: SortOrder
    instructions?: SortOrder
    duration?: SortOrder
    maxscore?: SortOrder
    open?: SortOrder
    testdate?: SortOrder
    testtime?: SortOrder
    term?: SortOrder
    subjectid?: SortOrder
    teacherid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    _count?: TestCountOrderByAggregateInput
    _avg?: TestAvgOrderByAggregateInput
    _max?: TestMaxOrderByAggregateInput
    _min?: TestMinOrderByAggregateInput
    _sum?: TestSumOrderByAggregateInput
  }

  export type TestScalarWhereWithAggregatesInput = {
    AND?: TestScalarWhereWithAggregatesInput | TestScalarWhereWithAggregatesInput[]
    OR?: TestScalarWhereWithAggregatesInput[]
    NOT?: TestScalarWhereWithAggregatesInput | TestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Test"> | string
    title?: StringWithAggregatesFilter<"Test"> | string
    status?: EnumTestStatusWithAggregatesFilter<"Test"> | $Enums.TestStatus
    instructions?: StringWithAggregatesFilter<"Test"> | string
    duration?: IntWithAggregatesFilter<"Test"> | number
    maxscore?: IntWithAggregatesFilter<"Test"> | number
    open?: BoolWithAggregatesFilter<"Test"> | boolean
    testdate?: DateTimeWithAggregatesFilter<"Test"> | Date | string
    testtime?: DateTimeWithAggregatesFilter<"Test"> | Date | string
    term?: StringWithAggregatesFilter<"Test"> | string
    subjectid?: StringWithAggregatesFilter<"Test"> | string
    teacherid?: StringWithAggregatesFilter<"Test"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Test"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"Test"> | Date | string
  }

  export type QuestionWhereInput = {
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    id?: StringFilter<"Question"> | string
    text?: StringFilter<"Question"> | string
    options?: JsonFilter<"Question">
    answer?: StringFilter<"Question"> | string
    testid?: StringFilter<"Question"> | string
    test?: XOR<TestScalarRelationFilter, TestWhereInput>
  }

  export type QuestionOrderByWithRelationInput = {
    id?: SortOrder
    text?: SortOrder
    options?: SortOrder
    answer?: SortOrder
    testid?: SortOrder
    test?: TestOrderByWithRelationInput
  }

  export type QuestionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    text?: StringFilter<"Question"> | string
    options?: JsonFilter<"Question">
    answer?: StringFilter<"Question"> | string
    testid?: StringFilter<"Question"> | string
    test?: XOR<TestScalarRelationFilter, TestWhereInput>
  }, "id">

  export type QuestionOrderByWithAggregationInput = {
    id?: SortOrder
    text?: SortOrder
    options?: SortOrder
    answer?: SortOrder
    testid?: SortOrder
    _count?: QuestionCountOrderByAggregateInput
    _max?: QuestionMaxOrderByAggregateInput
    _min?: QuestionMinOrderByAggregateInput
  }

  export type QuestionScalarWhereWithAggregatesInput = {
    AND?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    OR?: QuestionScalarWhereWithAggregatesInput[]
    NOT?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Question"> | string
    text?: StringWithAggregatesFilter<"Question"> | string
    options?: JsonWithAggregatesFilter<"Question">
    answer?: StringWithAggregatesFilter<"Question"> | string
    testid?: StringWithAggregatesFilter<"Question"> | string
  }

  export type AnswerWhereInput = {
    AND?: AnswerWhereInput | AnswerWhereInput[]
    OR?: AnswerWhereInput[]
    NOT?: AnswerWhereInput | AnswerWhereInput[]
    id?: StringFilter<"Answer"> | string
    score?: IntFilter<"Answer"> | number
    testid?: StringFilter<"Answer"> | string
    studentid?: StringFilter<"Answer"> | string
    createdAt?: DateTimeFilter<"Answer"> | Date | string
    updateAt?: DateTimeFilter<"Answer"> | Date | string
    test?: XOR<TestScalarRelationFilter, TestWhereInput>
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }

  export type AnswerOrderByWithRelationInput = {
    id?: SortOrder
    score?: SortOrder
    testid?: SortOrder
    studentid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    test?: TestOrderByWithRelationInput
    student?: StudentOrderByWithRelationInput
  }

  export type AnswerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AnswerWhereInput | AnswerWhereInput[]
    OR?: AnswerWhereInput[]
    NOT?: AnswerWhereInput | AnswerWhereInput[]
    score?: IntFilter<"Answer"> | number
    testid?: StringFilter<"Answer"> | string
    studentid?: StringFilter<"Answer"> | string
    createdAt?: DateTimeFilter<"Answer"> | Date | string
    updateAt?: DateTimeFilter<"Answer"> | Date | string
    test?: XOR<TestScalarRelationFilter, TestWhereInput>
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }, "id">

  export type AnswerOrderByWithAggregationInput = {
    id?: SortOrder
    score?: SortOrder
    testid?: SortOrder
    studentid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    _count?: AnswerCountOrderByAggregateInput
    _avg?: AnswerAvgOrderByAggregateInput
    _max?: AnswerMaxOrderByAggregateInput
    _min?: AnswerMinOrderByAggregateInput
    _sum?: AnswerSumOrderByAggregateInput
  }

  export type AnswerScalarWhereWithAggregatesInput = {
    AND?: AnswerScalarWhereWithAggregatesInput | AnswerScalarWhereWithAggregatesInput[]
    OR?: AnswerScalarWhereWithAggregatesInput[]
    NOT?: AnswerScalarWhereWithAggregatesInput | AnswerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Answer"> | string
    score?: IntWithAggregatesFilter<"Answer"> | number
    testid?: StringWithAggregatesFilter<"Answer"> | string
    studentid?: StringWithAggregatesFilter<"Answer"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Answer"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"Answer"> | Date | string
  }

  export type SubmissionWhereInput = {
    AND?: SubmissionWhereInput | SubmissionWhereInput[]
    OR?: SubmissionWhereInput[]
    NOT?: SubmissionWhereInput | SubmissionWhereInput[]
    id?: StringFilter<"Submission"> | string
    answer?: StringFilter<"Submission"> | string
    feedback?: StringFilter<"Submission"> | string
    score?: IntFilter<"Submission"> | number
    file?: StringFilter<"Submission"> | string
    assignmentId?: StringNullableFilter<"Submission"> | string | null
    studentId?: StringFilter<"Submission"> | string
    createdAt?: DateTimeFilter<"Submission"> | Date | string
    updateAt?: DateTimeFilter<"Submission"> | Date | string
    assignment?: XOR<AssignmentNullableScalarRelationFilter, AssignmentWhereInput> | null
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }

  export type SubmissionOrderByWithRelationInput = {
    id?: SortOrder
    answer?: SortOrder
    feedback?: SortOrder
    score?: SortOrder
    file?: SortOrder
    assignmentId?: SortOrderInput | SortOrder
    studentId?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    assignment?: AssignmentOrderByWithRelationInput
    student?: StudentOrderByWithRelationInput
  }

  export type SubmissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SubmissionWhereInput | SubmissionWhereInput[]
    OR?: SubmissionWhereInput[]
    NOT?: SubmissionWhereInput | SubmissionWhereInput[]
    answer?: StringFilter<"Submission"> | string
    feedback?: StringFilter<"Submission"> | string
    score?: IntFilter<"Submission"> | number
    file?: StringFilter<"Submission"> | string
    assignmentId?: StringNullableFilter<"Submission"> | string | null
    studentId?: StringFilter<"Submission"> | string
    createdAt?: DateTimeFilter<"Submission"> | Date | string
    updateAt?: DateTimeFilter<"Submission"> | Date | string
    assignment?: XOR<AssignmentNullableScalarRelationFilter, AssignmentWhereInput> | null
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }, "id">

  export type SubmissionOrderByWithAggregationInput = {
    id?: SortOrder
    answer?: SortOrder
    feedback?: SortOrder
    score?: SortOrder
    file?: SortOrder
    assignmentId?: SortOrderInput | SortOrder
    studentId?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    _count?: SubmissionCountOrderByAggregateInput
    _avg?: SubmissionAvgOrderByAggregateInput
    _max?: SubmissionMaxOrderByAggregateInput
    _min?: SubmissionMinOrderByAggregateInput
    _sum?: SubmissionSumOrderByAggregateInput
  }

  export type SubmissionScalarWhereWithAggregatesInput = {
    AND?: SubmissionScalarWhereWithAggregatesInput | SubmissionScalarWhereWithAggregatesInput[]
    OR?: SubmissionScalarWhereWithAggregatesInput[]
    NOT?: SubmissionScalarWhereWithAggregatesInput | SubmissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Submission"> | string
    answer?: StringWithAggregatesFilter<"Submission"> | string
    feedback?: StringWithAggregatesFilter<"Submission"> | string
    score?: IntWithAggregatesFilter<"Submission"> | number
    file?: StringWithAggregatesFilter<"Submission"> | string
    assignmentId?: StringNullableWithAggregatesFilter<"Submission"> | string | null
    studentId?: StringWithAggregatesFilter<"Submission"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Submission"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"Submission"> | Date | string
  }

  export type GradeWhereInput = {
    AND?: GradeWhereInput | GradeWhereInput[]
    OR?: GradeWhereInput[]
    NOT?: GradeWhereInput | GradeWhereInput[]
    id?: StringFilter<"Grade"> | string
    title?: StringFilter<"Grade"> | string
    session?: StringFilter<"Grade"> | string
    term?: StringFilter<"Grade"> | string
    createdAt?: DateTimeFilter<"Grade"> | Date | string
    updateAt?: DateTimeFilter<"Grade"> | Date | string
    gradings?: ClassGradeListRelationFilter
    effective?: EffectiveDomainListRelationFilter
    psychomotive?: PsychomotiveDomainListRelationFilter
  }

  export type GradeOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    session?: SortOrder
    term?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    gradings?: ClassGradeOrderByRelationAggregateInput
    effective?: EffectiveDomainOrderByRelationAggregateInput
    psychomotive?: PsychomotiveDomainOrderByRelationAggregateInput
  }

  export type GradeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GradeWhereInput | GradeWhereInput[]
    OR?: GradeWhereInput[]
    NOT?: GradeWhereInput | GradeWhereInput[]
    title?: StringFilter<"Grade"> | string
    session?: StringFilter<"Grade"> | string
    term?: StringFilter<"Grade"> | string
    createdAt?: DateTimeFilter<"Grade"> | Date | string
    updateAt?: DateTimeFilter<"Grade"> | Date | string
    gradings?: ClassGradeListRelationFilter
    effective?: EffectiveDomainListRelationFilter
    psychomotive?: PsychomotiveDomainListRelationFilter
  }, "id">

  export type GradeOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    session?: SortOrder
    term?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
    _count?: GradeCountOrderByAggregateInput
    _max?: GradeMaxOrderByAggregateInput
    _min?: GradeMinOrderByAggregateInput
  }

  export type GradeScalarWhereWithAggregatesInput = {
    AND?: GradeScalarWhereWithAggregatesInput | GradeScalarWhereWithAggregatesInput[]
    OR?: GradeScalarWhereWithAggregatesInput[]
    NOT?: GradeScalarWhereWithAggregatesInput | GradeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Grade"> | string
    title?: StringWithAggregatesFilter<"Grade"> | string
    session?: StringWithAggregatesFilter<"Grade"> | string
    term?: StringWithAggregatesFilter<"Grade"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Grade"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"Grade"> | Date | string
  }

  export type ClassGradeWhereInput = {
    AND?: ClassGradeWhereInput | ClassGradeWhereInput[]
    OR?: ClassGradeWhereInput[]
    NOT?: ClassGradeWhereInput | ClassGradeWhereInput[]
    id?: StringFilter<"ClassGrade"> | string
    classid?: StringFilter<"ClassGrade"> | string
    gradeid?: StringFilter<"ClassGrade"> | string
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    grade?: XOR<GradeScalarRelationFilter, GradeWhereInput>
    subjects?: SubjectGradeListRelationFilter
  }

  export type ClassGradeOrderByWithRelationInput = {
    id?: SortOrder
    classid?: SortOrder
    gradeid?: SortOrder
    class?: ClassOrderByWithRelationInput
    grade?: GradeOrderByWithRelationInput
    subjects?: SubjectGradeOrderByRelationAggregateInput
  }

  export type ClassGradeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ClassGradeWhereInput | ClassGradeWhereInput[]
    OR?: ClassGradeWhereInput[]
    NOT?: ClassGradeWhereInput | ClassGradeWhereInput[]
    classid?: StringFilter<"ClassGrade"> | string
    gradeid?: StringFilter<"ClassGrade"> | string
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    grade?: XOR<GradeScalarRelationFilter, GradeWhereInput>
    subjects?: SubjectGradeListRelationFilter
  }, "id">

  export type ClassGradeOrderByWithAggregationInput = {
    id?: SortOrder
    classid?: SortOrder
    gradeid?: SortOrder
    _count?: ClassGradeCountOrderByAggregateInput
    _max?: ClassGradeMaxOrderByAggregateInput
    _min?: ClassGradeMinOrderByAggregateInput
  }

  export type ClassGradeScalarWhereWithAggregatesInput = {
    AND?: ClassGradeScalarWhereWithAggregatesInput | ClassGradeScalarWhereWithAggregatesInput[]
    OR?: ClassGradeScalarWhereWithAggregatesInput[]
    NOT?: ClassGradeScalarWhereWithAggregatesInput | ClassGradeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ClassGrade"> | string
    classid?: StringWithAggregatesFilter<"ClassGrade"> | string
    gradeid?: StringWithAggregatesFilter<"ClassGrade"> | string
  }

  export type SubjectGradeWhereInput = {
    AND?: SubjectGradeWhereInput | SubjectGradeWhereInput[]
    OR?: SubjectGradeWhereInput[]
    NOT?: SubjectGradeWhereInput | SubjectGradeWhereInput[]
    id?: StringFilter<"SubjectGrade"> | string
    subjectid?: StringFilter<"SubjectGrade"> | string
    classid?: StringFilter<"SubjectGrade"> | string
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
    class?: XOR<ClassGradeScalarRelationFilter, ClassGradeWhereInput>
    students?: StudentGradeListRelationFilter
  }

  export type SubjectGradeOrderByWithRelationInput = {
    id?: SortOrder
    subjectid?: SortOrder
    classid?: SortOrder
    subject?: SubjectOrderByWithRelationInput
    class?: ClassGradeOrderByWithRelationInput
    students?: StudentGradeOrderByRelationAggregateInput
  }

  export type SubjectGradeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SubjectGradeWhereInput | SubjectGradeWhereInput[]
    OR?: SubjectGradeWhereInput[]
    NOT?: SubjectGradeWhereInput | SubjectGradeWhereInput[]
    subjectid?: StringFilter<"SubjectGrade"> | string
    classid?: StringFilter<"SubjectGrade"> | string
    subject?: XOR<SubjectScalarRelationFilter, SubjectWhereInput>
    class?: XOR<ClassGradeScalarRelationFilter, ClassGradeWhereInput>
    students?: StudentGradeListRelationFilter
  }, "id">

  export type SubjectGradeOrderByWithAggregationInput = {
    id?: SortOrder
    subjectid?: SortOrder
    classid?: SortOrder
    _count?: SubjectGradeCountOrderByAggregateInput
    _max?: SubjectGradeMaxOrderByAggregateInput
    _min?: SubjectGradeMinOrderByAggregateInput
  }

  export type SubjectGradeScalarWhereWithAggregatesInput = {
    AND?: SubjectGradeScalarWhereWithAggregatesInput | SubjectGradeScalarWhereWithAggregatesInput[]
    OR?: SubjectGradeScalarWhereWithAggregatesInput[]
    NOT?: SubjectGradeScalarWhereWithAggregatesInput | SubjectGradeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SubjectGrade"> | string
    subjectid?: StringWithAggregatesFilter<"SubjectGrade"> | string
    classid?: StringWithAggregatesFilter<"SubjectGrade"> | string
  }

  export type StudentGradeWhereInput = {
    AND?: StudentGradeWhereInput | StudentGradeWhereInput[]
    OR?: StudentGradeWhereInput[]
    NOT?: StudentGradeWhereInput | StudentGradeWhereInput[]
    id?: StringFilter<"StudentGrade"> | string
    firstCa?: IntFilter<"StudentGrade"> | number
    secondCa?: IntFilter<"StudentGrade"> | number
    thirdCa?: IntFilter<"StudentGrade"> | number
    fourthCa?: IntFilter<"StudentGrade"> | number
    exams?: IntFilter<"StudentGrade"> | number
    score?: IntFilter<"StudentGrade"> | number
    grade?: IntFilter<"StudentGrade"> | number
    remark?: IntFilter<"StudentGrade"> | number
    studentid?: StringFilter<"StudentGrade"> | string
    subjectgradeid?: StringFilter<"StudentGrade"> | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    subjectGrade?: XOR<SubjectGradeScalarRelationFilter, SubjectGradeWhereInput>
  }

  export type StudentGradeOrderByWithRelationInput = {
    id?: SortOrder
    firstCa?: SortOrder
    secondCa?: SortOrder
    thirdCa?: SortOrder
    fourthCa?: SortOrder
    exams?: SortOrder
    score?: SortOrder
    grade?: SortOrder
    remark?: SortOrder
    studentid?: SortOrder
    subjectgradeid?: SortOrder
    student?: StudentOrderByWithRelationInput
    subjectGrade?: SubjectGradeOrderByWithRelationInput
  }

  export type StudentGradeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StudentGradeWhereInput | StudentGradeWhereInput[]
    OR?: StudentGradeWhereInput[]
    NOT?: StudentGradeWhereInput | StudentGradeWhereInput[]
    firstCa?: IntFilter<"StudentGrade"> | number
    secondCa?: IntFilter<"StudentGrade"> | number
    thirdCa?: IntFilter<"StudentGrade"> | number
    fourthCa?: IntFilter<"StudentGrade"> | number
    exams?: IntFilter<"StudentGrade"> | number
    score?: IntFilter<"StudentGrade"> | number
    grade?: IntFilter<"StudentGrade"> | number
    remark?: IntFilter<"StudentGrade"> | number
    studentid?: StringFilter<"StudentGrade"> | string
    subjectgradeid?: StringFilter<"StudentGrade"> | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    subjectGrade?: XOR<SubjectGradeScalarRelationFilter, SubjectGradeWhereInput>
  }, "id">

  export type StudentGradeOrderByWithAggregationInput = {
    id?: SortOrder
    firstCa?: SortOrder
    secondCa?: SortOrder
    thirdCa?: SortOrder
    fourthCa?: SortOrder
    exams?: SortOrder
    score?: SortOrder
    grade?: SortOrder
    remark?: SortOrder
    studentid?: SortOrder
    subjectgradeid?: SortOrder
    _count?: StudentGradeCountOrderByAggregateInput
    _avg?: StudentGradeAvgOrderByAggregateInput
    _max?: StudentGradeMaxOrderByAggregateInput
    _min?: StudentGradeMinOrderByAggregateInput
    _sum?: StudentGradeSumOrderByAggregateInput
  }

  export type StudentGradeScalarWhereWithAggregatesInput = {
    AND?: StudentGradeScalarWhereWithAggregatesInput | StudentGradeScalarWhereWithAggregatesInput[]
    OR?: StudentGradeScalarWhereWithAggregatesInput[]
    NOT?: StudentGradeScalarWhereWithAggregatesInput | StudentGradeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StudentGrade"> | string
    firstCa?: IntWithAggregatesFilter<"StudentGrade"> | number
    secondCa?: IntWithAggregatesFilter<"StudentGrade"> | number
    thirdCa?: IntWithAggregatesFilter<"StudentGrade"> | number
    fourthCa?: IntWithAggregatesFilter<"StudentGrade"> | number
    exams?: IntWithAggregatesFilter<"StudentGrade"> | number
    score?: IntWithAggregatesFilter<"StudentGrade"> | number
    grade?: IntWithAggregatesFilter<"StudentGrade"> | number
    remark?: IntWithAggregatesFilter<"StudentGrade"> | number
    studentid?: StringWithAggregatesFilter<"StudentGrade"> | string
    subjectgradeid?: StringWithAggregatesFilter<"StudentGrade"> | string
  }

  export type EffectiveDomainWhereInput = {
    AND?: EffectiveDomainWhereInput | EffectiveDomainWhereInput[]
    OR?: EffectiveDomainWhereInput[]
    NOT?: EffectiveDomainWhereInput | EffectiveDomainWhereInput[]
    id?: StringFilter<"EffectiveDomain"> | string
    classattendance?: IntFilter<"EffectiveDomain"> | number
    punctuality?: IntFilter<"EffectiveDomain"> | number
    initiative?: IntFilter<"EffectiveDomain"> | number
    responsibility?: IntFilter<"EffectiveDomain"> | number
    neatness?: IntFilter<"EffectiveDomain"> | number
    cooperation?: IntFilter<"EffectiveDomain"> | number
    organization?: IntFilter<"EffectiveDomain"> | number
    studentid?: StringFilter<"EffectiveDomain"> | string
    gradeid?: StringFilter<"EffectiveDomain"> | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    grade?: XOR<GradeScalarRelationFilter, GradeWhereInput>
  }

  export type EffectiveDomainOrderByWithRelationInput = {
    id?: SortOrder
    classattendance?: SortOrder
    punctuality?: SortOrder
    initiative?: SortOrder
    responsibility?: SortOrder
    neatness?: SortOrder
    cooperation?: SortOrder
    organization?: SortOrder
    studentid?: SortOrder
    gradeid?: SortOrder
    student?: StudentOrderByWithRelationInput
    grade?: GradeOrderByWithRelationInput
  }

  export type EffectiveDomainWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EffectiveDomainWhereInput | EffectiveDomainWhereInput[]
    OR?: EffectiveDomainWhereInput[]
    NOT?: EffectiveDomainWhereInput | EffectiveDomainWhereInput[]
    classattendance?: IntFilter<"EffectiveDomain"> | number
    punctuality?: IntFilter<"EffectiveDomain"> | number
    initiative?: IntFilter<"EffectiveDomain"> | number
    responsibility?: IntFilter<"EffectiveDomain"> | number
    neatness?: IntFilter<"EffectiveDomain"> | number
    cooperation?: IntFilter<"EffectiveDomain"> | number
    organization?: IntFilter<"EffectiveDomain"> | number
    studentid?: StringFilter<"EffectiveDomain"> | string
    gradeid?: StringFilter<"EffectiveDomain"> | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    grade?: XOR<GradeScalarRelationFilter, GradeWhereInput>
  }, "id">

  export type EffectiveDomainOrderByWithAggregationInput = {
    id?: SortOrder
    classattendance?: SortOrder
    punctuality?: SortOrder
    initiative?: SortOrder
    responsibility?: SortOrder
    neatness?: SortOrder
    cooperation?: SortOrder
    organization?: SortOrder
    studentid?: SortOrder
    gradeid?: SortOrder
    _count?: EffectiveDomainCountOrderByAggregateInput
    _avg?: EffectiveDomainAvgOrderByAggregateInput
    _max?: EffectiveDomainMaxOrderByAggregateInput
    _min?: EffectiveDomainMinOrderByAggregateInput
    _sum?: EffectiveDomainSumOrderByAggregateInput
  }

  export type EffectiveDomainScalarWhereWithAggregatesInput = {
    AND?: EffectiveDomainScalarWhereWithAggregatesInput | EffectiveDomainScalarWhereWithAggregatesInput[]
    OR?: EffectiveDomainScalarWhereWithAggregatesInput[]
    NOT?: EffectiveDomainScalarWhereWithAggregatesInput | EffectiveDomainScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EffectiveDomain"> | string
    classattendance?: IntWithAggregatesFilter<"EffectiveDomain"> | number
    punctuality?: IntWithAggregatesFilter<"EffectiveDomain"> | number
    initiative?: IntWithAggregatesFilter<"EffectiveDomain"> | number
    responsibility?: IntWithAggregatesFilter<"EffectiveDomain"> | number
    neatness?: IntWithAggregatesFilter<"EffectiveDomain"> | number
    cooperation?: IntWithAggregatesFilter<"EffectiveDomain"> | number
    organization?: IntWithAggregatesFilter<"EffectiveDomain"> | number
    studentid?: StringWithAggregatesFilter<"EffectiveDomain"> | string
    gradeid?: StringWithAggregatesFilter<"EffectiveDomain"> | string
  }

  export type PsychomotiveDomainWhereInput = {
    AND?: PsychomotiveDomainWhereInput | PsychomotiveDomainWhereInput[]
    OR?: PsychomotiveDomainWhereInput[]
    NOT?: PsychomotiveDomainWhereInput | PsychomotiveDomainWhereInput[]
    id?: StringFilter<"PsychomotiveDomain"> | string
    hardworking?: IntFilter<"PsychomotiveDomain"> | number
    sports?: IntFilter<"PsychomotiveDomain"> | number
    studentid?: StringFilter<"PsychomotiveDomain"> | string
    gradeid?: StringFilter<"PsychomotiveDomain"> | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    grade?: XOR<GradeScalarRelationFilter, GradeWhereInput>
  }

  export type PsychomotiveDomainOrderByWithRelationInput = {
    id?: SortOrder
    hardworking?: SortOrder
    sports?: SortOrder
    studentid?: SortOrder
    gradeid?: SortOrder
    student?: StudentOrderByWithRelationInput
    grade?: GradeOrderByWithRelationInput
  }

  export type PsychomotiveDomainWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PsychomotiveDomainWhereInput | PsychomotiveDomainWhereInput[]
    OR?: PsychomotiveDomainWhereInput[]
    NOT?: PsychomotiveDomainWhereInput | PsychomotiveDomainWhereInput[]
    hardworking?: IntFilter<"PsychomotiveDomain"> | number
    sports?: IntFilter<"PsychomotiveDomain"> | number
    studentid?: StringFilter<"PsychomotiveDomain"> | string
    gradeid?: StringFilter<"PsychomotiveDomain"> | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
    grade?: XOR<GradeScalarRelationFilter, GradeWhereInput>
  }, "id">

  export type PsychomotiveDomainOrderByWithAggregationInput = {
    id?: SortOrder
    hardworking?: SortOrder
    sports?: SortOrder
    studentid?: SortOrder
    gradeid?: SortOrder
    _count?: PsychomotiveDomainCountOrderByAggregateInput
    _avg?: PsychomotiveDomainAvgOrderByAggregateInput
    _max?: PsychomotiveDomainMaxOrderByAggregateInput
    _min?: PsychomotiveDomainMinOrderByAggregateInput
    _sum?: PsychomotiveDomainSumOrderByAggregateInput
  }

  export type PsychomotiveDomainScalarWhereWithAggregatesInput = {
    AND?: PsychomotiveDomainScalarWhereWithAggregatesInput | PsychomotiveDomainScalarWhereWithAggregatesInput[]
    OR?: PsychomotiveDomainScalarWhereWithAggregatesInput[]
    NOT?: PsychomotiveDomainScalarWhereWithAggregatesInput | PsychomotiveDomainScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PsychomotiveDomain"> | string
    hardworking?: IntWithAggregatesFilter<"PsychomotiveDomain"> | number
    sports?: IntWithAggregatesFilter<"PsychomotiveDomain"> | number
    studentid?: StringWithAggregatesFilter<"PsychomotiveDomain"> | string
    gradeid?: StringWithAggregatesFilter<"PsychomotiveDomain"> | string
  }

  export type AttendanceWhereInput = {
    AND?: AttendanceWhereInput | AttendanceWhereInput[]
    OR?: AttendanceWhereInput[]
    NOT?: AttendanceWhereInput | AttendanceWhereInput[]
    id?: IntFilter<"Attendance"> | number
    date?: DateTimeFilter<"Attendance"> | Date | string
    present?: BoolFilter<"Attendance"> | boolean
    studentId?: StringFilter<"Attendance"> | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }

  export type AttendanceOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    present?: SortOrder
    studentId?: SortOrder
    student?: StudentOrderByWithRelationInput
  }

  export type AttendanceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AttendanceWhereInput | AttendanceWhereInput[]
    OR?: AttendanceWhereInput[]
    NOT?: AttendanceWhereInput | AttendanceWhereInput[]
    date?: DateTimeFilter<"Attendance"> | Date | string
    present?: BoolFilter<"Attendance"> | boolean
    studentId?: StringFilter<"Attendance"> | string
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }, "id">

  export type AttendanceOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    present?: SortOrder
    studentId?: SortOrder
    _count?: AttendanceCountOrderByAggregateInput
    _avg?: AttendanceAvgOrderByAggregateInput
    _max?: AttendanceMaxOrderByAggregateInput
    _min?: AttendanceMinOrderByAggregateInput
    _sum?: AttendanceSumOrderByAggregateInput
  }

  export type AttendanceScalarWhereWithAggregatesInput = {
    AND?: AttendanceScalarWhereWithAggregatesInput | AttendanceScalarWhereWithAggregatesInput[]
    OR?: AttendanceScalarWhereWithAggregatesInput[]
    NOT?: AttendanceScalarWhereWithAggregatesInput | AttendanceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Attendance"> | number
    date?: DateTimeWithAggregatesFilter<"Attendance"> | Date | string
    present?: BoolWithAggregatesFilter<"Attendance"> | boolean
    studentId?: StringWithAggregatesFilter<"Attendance"> | string
  }

  export type EventWhereInput = {
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    id?: IntFilter<"Event"> | number
    title?: StringFilter<"Event"> | string
    description?: StringFilter<"Event"> | string
    startTime?: DateTimeFilter<"Event"> | Date | string
    endTime?: DateTimeFilter<"Event"> | Date | string
    classId?: StringNullableFilter<"Event"> | string | null
    class?: XOR<ClassNullableScalarRelationFilter, ClassWhereInput> | null
  }

  export type EventOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    classId?: SortOrderInput | SortOrder
    class?: ClassOrderByWithRelationInput
  }

  export type EventWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    title?: StringFilter<"Event"> | string
    description?: StringFilter<"Event"> | string
    startTime?: DateTimeFilter<"Event"> | Date | string
    endTime?: DateTimeFilter<"Event"> | Date | string
    classId?: StringNullableFilter<"Event"> | string | null
    class?: XOR<ClassNullableScalarRelationFilter, ClassWhereInput> | null
  }, "id">

  export type EventOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    classId?: SortOrderInput | SortOrder
    _count?: EventCountOrderByAggregateInput
    _avg?: EventAvgOrderByAggregateInput
    _max?: EventMaxOrderByAggregateInput
    _min?: EventMinOrderByAggregateInput
    _sum?: EventSumOrderByAggregateInput
  }

  export type EventScalarWhereWithAggregatesInput = {
    AND?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    OR?: EventScalarWhereWithAggregatesInput[]
    NOT?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Event"> | number
    title?: StringWithAggregatesFilter<"Event"> | string
    description?: StringWithAggregatesFilter<"Event"> | string
    startTime?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    endTime?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    classId?: StringNullableWithAggregatesFilter<"Event"> | string | null
  }

  export type AnnouncementWhereInput = {
    AND?: AnnouncementWhereInput | AnnouncementWhereInput[]
    OR?: AnnouncementWhereInput[]
    NOT?: AnnouncementWhereInput | AnnouncementWhereInput[]
    id?: IntFilter<"Announcement"> | number
    title?: StringFilter<"Announcement"> | string
    description?: StringFilter<"Announcement"> | string
    date?: DateTimeFilter<"Announcement"> | Date | string
    classId?: StringNullableFilter<"Announcement"> | string | null
    class?: XOR<ClassNullableScalarRelationFilter, ClassWhereInput> | null
  }

  export type AnnouncementOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    date?: SortOrder
    classId?: SortOrderInput | SortOrder
    class?: ClassOrderByWithRelationInput
  }

  export type AnnouncementWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AnnouncementWhereInput | AnnouncementWhereInput[]
    OR?: AnnouncementWhereInput[]
    NOT?: AnnouncementWhereInput | AnnouncementWhereInput[]
    title?: StringFilter<"Announcement"> | string
    description?: StringFilter<"Announcement"> | string
    date?: DateTimeFilter<"Announcement"> | Date | string
    classId?: StringNullableFilter<"Announcement"> | string | null
    class?: XOR<ClassNullableScalarRelationFilter, ClassWhereInput> | null
  }, "id">

  export type AnnouncementOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    date?: SortOrder
    classId?: SortOrderInput | SortOrder
    _count?: AnnouncementCountOrderByAggregateInput
    _avg?: AnnouncementAvgOrderByAggregateInput
    _max?: AnnouncementMaxOrderByAggregateInput
    _min?: AnnouncementMinOrderByAggregateInput
    _sum?: AnnouncementSumOrderByAggregateInput
  }

  export type AnnouncementScalarWhereWithAggregatesInput = {
    AND?: AnnouncementScalarWhereWithAggregatesInput | AnnouncementScalarWhereWithAggregatesInput[]
    OR?: AnnouncementScalarWhereWithAggregatesInput[]
    NOT?: AnnouncementScalarWhereWithAggregatesInput | AnnouncementScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Announcement"> | number
    title?: StringWithAggregatesFilter<"Announcement"> | string
    description?: StringWithAggregatesFilter<"Announcement"> | string
    date?: DateTimeWithAggregatesFilter<"Announcement"> | Date | string
    classId?: StringNullableWithAggregatesFilter<"Announcement"> | string | null
  }

  export type AdministrationCreateInput = {
    id?: string
    username: string
    email: string
    role: $Enums.Roles
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type AdministrationUncheckedCreateInput = {
    id?: string
    username: string
    email: string
    role: $Enums.Roles
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type AdministrationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRolesFieldUpdateOperationsInput | $Enums.Roles
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdministrationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRolesFieldUpdateOperationsInput | $Enums.Roles
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdministrationCreateManyInput = {
    id?: string
    username: string
    email: string
    role: $Enums.Roles
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type AdministrationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRolesFieldUpdateOperationsInput | $Enums.Roles
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdministrationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRolesFieldUpdateOperationsInput | $Enums.Roles
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchoolCreateInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    address: string
    logo?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    students?: StudentCreateNestedManyWithoutSchoolInput
    teachers?: TeacherCreateNestedManyWithoutSchoolInput
    subjects?: SubjectCreateNestedManyWithoutSchoolInput
    paymentsetups?: PaymentSetupCreateNestedManyWithoutSchoolInput
    payments?: PaymentCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    address: string
    logo?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    students?: StudentUncheckedCreateNestedManyWithoutSchoolInput
    teachers?: TeacherUncheckedCreateNestedManyWithoutSchoolInput
    subjects?: SubjectUncheckedCreateNestedManyWithoutSchoolInput
    paymentsetups?: PaymentSetupUncheckedCreateNestedManyWithoutSchoolInput
    payments?: PaymentUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    students?: StudentUpdateManyWithoutSchoolNestedInput
    teachers?: TeacherUpdateManyWithoutSchoolNestedInput
    subjects?: SubjectUpdateManyWithoutSchoolNestedInput
    paymentsetups?: PaymentSetupUpdateManyWithoutSchoolNestedInput
    payments?: PaymentUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    students?: StudentUncheckedUpdateManyWithoutSchoolNestedInput
    teachers?: TeacherUncheckedUpdateManyWithoutSchoolNestedInput
    subjects?: SubjectUncheckedUpdateManyWithoutSchoolNestedInput
    paymentsetups?: PaymentSetupUncheckedUpdateManyWithoutSchoolNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolCreateManyInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    address: string
    logo?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type SchoolUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchoolUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentCreateInput = {
    id?: string
    username: string
    admissionnumber: string
    firstname: string
    surname: string
    othername?: string | null
    birthday: Date | string
    gender: $Enums.UserSex
    religion?: string | null
    studenttype: string
    house: string
    bloodgroup: string
    admissiondate?: Date | string
    email: string
    phone?: string | null
    address: string
    state: string
    lga: string
    avarta?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    parent: ParentCreateNestedOneWithoutStudentsInput
    school: SchoolCreateNestedOneWithoutStudentsInput
    class: ClassCreateNestedOneWithoutStudentsInput
    attendances?: AttendanceCreateNestedManyWithoutStudentInput
    assignments?: AssignmentCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    answers?: AnswerCreateNestedManyWithoutStudentInput
    grades?: StudentGradeCreateNestedManyWithoutStudentInput
    effective?: EffectiveDomainCreateNestedManyWithoutStudentInput
    psychomotive?: PsychomotiveDomainCreateNestedManyWithoutStudentInput
    payments?: PaymentCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateInput = {
    id?: string
    username: string
    admissionnumber: string
    firstname: string
    surname: string
    othername?: string | null
    birthday: Date | string
    gender: $Enums.UserSex
    religion?: string | null
    studenttype: string
    house: string
    bloodgroup: string
    admissiondate?: Date | string
    email: string
    phone?: string | null
    address: string
    state: string
    lga: string
    avarta?: string | null
    parentid: string
    schoolid: string
    classid: string
    createdAt?: Date | string
    updateAt?: Date | string
    attendances?: AttendanceUncheckedCreateNestedManyWithoutStudentInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    answers?: AnswerUncheckedCreateNestedManyWithoutStudentInput
    grades?: StudentGradeUncheckedCreateNestedManyWithoutStudentInput
    effective?: EffectiveDomainUncheckedCreateNestedManyWithoutStudentInput
    psychomotive?: PsychomotiveDomainUncheckedCreateNestedManyWithoutStudentInput
    payments?: PaymentUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    admissionnumber?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    studenttype?: StringFieldUpdateOperationsInput | string
    house?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
    admissiondate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: ParentUpdateOneRequiredWithoutStudentsNestedInput
    school?: SchoolUpdateOneRequiredWithoutStudentsNestedInput
    class?: ClassUpdateOneRequiredWithoutStudentsNestedInput
    attendances?: AttendanceUpdateManyWithoutStudentNestedInput
    assignments?: AssignmentUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    answers?: AnswerUpdateManyWithoutStudentNestedInput
    grades?: StudentGradeUpdateManyWithoutStudentNestedInput
    effective?: EffectiveDomainUpdateManyWithoutStudentNestedInput
    psychomotive?: PsychomotiveDomainUpdateManyWithoutStudentNestedInput
    payments?: PaymentUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    admissionnumber?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    studenttype?: StringFieldUpdateOperationsInput | string
    house?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
    admissiondate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    parentid?: StringFieldUpdateOperationsInput | string
    schoolid?: StringFieldUpdateOperationsInput | string
    classid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendances?: AttendanceUncheckedUpdateManyWithoutStudentNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    answers?: AnswerUncheckedUpdateManyWithoutStudentNestedInput
    grades?: StudentGradeUncheckedUpdateManyWithoutStudentNestedInput
    effective?: EffectiveDomainUncheckedUpdateManyWithoutStudentNestedInput
    psychomotive?: PsychomotiveDomainUncheckedUpdateManyWithoutStudentNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentCreateManyInput = {
    id?: string
    username: string
    admissionnumber: string
    firstname: string
    surname: string
    othername?: string | null
    birthday: Date | string
    gender: $Enums.UserSex
    religion?: string | null
    studenttype: string
    house: string
    bloodgroup: string
    admissiondate?: Date | string
    email: string
    phone?: string | null
    address: string
    state: string
    lga: string
    avarta?: string | null
    parentid: string
    schoolid: string
    classid: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type StudentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    admissionnumber?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    studenttype?: StringFieldUpdateOperationsInput | string
    house?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
    admissiondate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    admissionnumber?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    studenttype?: StringFieldUpdateOperationsInput | string
    house?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
    admissiondate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    parentid?: StringFieldUpdateOperationsInput | string
    schoolid?: StringFieldUpdateOperationsInput | string
    classid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeacherCreateInput = {
    id?: string
    username: string
    title: string
    firstname: string
    surname: string
    othername?: string | null
    birthday?: Date | string | null
    bloodgroup?: string | null
    gender: $Enums.UserSex
    state: string
    lga: string
    email: string
    phone?: string | null
    address: string
    avarta?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    school: SchoolCreateNestedOneWithoutTeachersInput
    subjects?: SubjectCreateNestedManyWithoutTeachersInput
    classes?: ClassCreateNestedManyWithoutFormmasterInput
    assignments?: AssignmentCreateNestedManyWithoutTeacherInput
    tests?: TestCreateNestedManyWithoutTeacherInput
  }

  export type TeacherUncheckedCreateInput = {
    id?: string
    username: string
    title: string
    firstname: string
    surname: string
    othername?: string | null
    birthday?: Date | string | null
    bloodgroup?: string | null
    gender: $Enums.UserSex
    state: string
    lga: string
    email: string
    phone?: string | null
    address: string
    avarta?: string | null
    schoolid: string
    createdAt?: Date | string
    updateAt?: Date | string
    subjects?: SubjectUncheckedCreateNestedManyWithoutTeachersInput
    classes?: ClassUncheckedCreateNestedManyWithoutFormmasterInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutTeacherInput
    tests?: TestUncheckedCreateNestedManyWithoutTeacherInput
  }

  export type TeacherUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodgroup?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutTeachersNestedInput
    subjects?: SubjectUpdateManyWithoutTeachersNestedInput
    classes?: ClassUpdateManyWithoutFormmasterNestedInput
    assignments?: AssignmentUpdateManyWithoutTeacherNestedInput
    tests?: TestUpdateManyWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodgroup?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    schoolid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subjects?: SubjectUncheckedUpdateManyWithoutTeachersNestedInput
    classes?: ClassUncheckedUpdateManyWithoutFormmasterNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    tests?: TestUncheckedUpdateManyWithoutTeacherNestedInput
  }

  export type TeacherCreateManyInput = {
    id?: string
    username: string
    title: string
    firstname: string
    surname: string
    othername?: string | null
    birthday?: Date | string | null
    bloodgroup?: string | null
    gender: $Enums.UserSex
    state: string
    lga: string
    email: string
    phone?: string | null
    address: string
    avarta?: string | null
    schoolid: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type TeacherUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodgroup?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeacherUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodgroup?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    schoolid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParentCreateInput = {
    id?: string
    username: string
    title: string
    firstname: string
    surname: string
    othername?: string | null
    birthday?: Date | string | null
    bloodgroup?: string | null
    gender: $Enums.UserSex
    occupation: string
    religion: string
    state: string
    lga: string
    email: string
    phone: string
    address: string
    createdAt?: Date | string
    updateAt?: Date | string
    students?: StudentCreateNestedManyWithoutParentInput
  }

  export type ParentUncheckedCreateInput = {
    id?: string
    username: string
    title: string
    firstname: string
    surname: string
    othername?: string | null
    birthday?: Date | string | null
    bloodgroup?: string | null
    gender: $Enums.UserSex
    occupation: string
    religion: string
    state: string
    lga: string
    email: string
    phone: string
    address: string
    createdAt?: Date | string
    updateAt?: Date | string
    students?: StudentUncheckedCreateNestedManyWithoutParentInput
  }

  export type ParentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodgroup?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    occupation?: StringFieldUpdateOperationsInput | string
    religion?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    students?: StudentUpdateManyWithoutParentNestedInput
  }

  export type ParentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodgroup?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    occupation?: StringFieldUpdateOperationsInput | string
    religion?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    students?: StudentUncheckedUpdateManyWithoutParentNestedInput
  }

  export type ParentCreateManyInput = {
    id?: string
    username: string
    title: string
    firstname: string
    surname: string
    othername?: string | null
    birthday?: Date | string | null
    bloodgroup?: string | null
    gender: $Enums.UserSex
    occupation: string
    religion: string
    state: string
    lga: string
    email: string
    phone: string
    address: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type ParentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodgroup?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    occupation?: StringFieldUpdateOperationsInput | string
    religion?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodgroup?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    occupation?: StringFieldUpdateOperationsInput | string
    religion?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubjectCreateInput = {
    id?: string
    name: string
    category: string
    createdAt?: Date | string
    updateAt?: Date | string
    school: SchoolCreateNestedOneWithoutSubjectsInput
    teachers?: TeacherCreateNestedManyWithoutSubjectsInput
    assignments?: AssignmentCreateNestedManyWithoutSubjectInput
    grades?: SubjectGradeCreateNestedManyWithoutSubjectInput
    tests?: TestCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateInput = {
    id?: string
    name: string
    category: string
    schoolid: string
    createdAt?: Date | string
    updateAt?: Date | string
    teachers?: TeacherUncheckedCreateNestedManyWithoutSubjectsInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutSubjectInput
    grades?: SubjectGradeUncheckedCreateNestedManyWithoutSubjectInput
    tests?: TestUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutSubjectsNestedInput
    teachers?: TeacherUpdateManyWithoutSubjectsNestedInput
    assignments?: AssignmentUpdateManyWithoutSubjectNestedInput
    grades?: SubjectGradeUpdateManyWithoutSubjectNestedInput
    tests?: TestUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    schoolid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teachers?: TeacherUncheckedUpdateManyWithoutSubjectsNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutSubjectNestedInput
    grades?: SubjectGradeUncheckedUpdateManyWithoutSubjectNestedInput
    tests?: TestUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectCreateManyInput = {
    id?: string
    name: string
    category: string
    schoolid: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type SubjectUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubjectUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    schoolid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassCreateInput = {
    id?: string
    name: string
    category: string
    level: string
    capacity?: number | null
    createdAt?: Date | string
    updateAt?: Date | string
    formmaster?: TeacherCreateNestedOneWithoutClassesInput
    students?: StudentCreateNestedManyWithoutClassInput
    gradings?: ClassGradeCreateNestedManyWithoutClassInput
    events?: EventCreateNestedManyWithoutClassInput
    announcements?: AnnouncementCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateInput = {
    id?: string
    name: string
    category: string
    level: string
    capacity?: number | null
    formmasterid?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    students?: StudentUncheckedCreateNestedManyWithoutClassInput
    gradings?: ClassGradeUncheckedCreateNestedManyWithoutClassInput
    events?: EventUncheckedCreateNestedManyWithoutClassInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    formmaster?: TeacherUpdateOneWithoutClassesNestedInput
    students?: StudentUpdateManyWithoutClassNestedInput
    gradings?: ClassGradeUpdateManyWithoutClassNestedInput
    events?: EventUpdateManyWithoutClassNestedInput
    announcements?: AnnouncementUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    formmasterid?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    students?: StudentUncheckedUpdateManyWithoutClassNestedInput
    gradings?: ClassGradeUncheckedUpdateManyWithoutClassNestedInput
    events?: EventUncheckedUpdateManyWithoutClassNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassCreateManyInput = {
    id?: string
    name: string
    category: string
    level: string
    capacity?: number | null
    formmasterid?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type ClassUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    formmasterid?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentSetupCreateInput = {
    id?: string
    amount: number
    fees: number
    partpayment?: boolean
    session: string
    term: string
    createdAt?: Date | string
    updateAt?: Date | string
    school: SchoolCreateNestedOneWithoutPaymentsetupsInput
  }

  export type PaymentSetupUncheckedCreateInput = {
    id?: string
    amount: number
    fees: number
    partpayment?: boolean
    session: string
    term: string
    schoolid: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type PaymentSetupUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    fees?: IntFieldUpdateOperationsInput | number
    partpayment?: BoolFieldUpdateOperationsInput | boolean
    session?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutPaymentsetupsNestedInput
  }

  export type PaymentSetupUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    fees?: IntFieldUpdateOperationsInput | number
    partpayment?: BoolFieldUpdateOperationsInput | boolean
    session?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    schoolid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentSetupCreateManyInput = {
    id?: string
    amount: number
    fees: number
    partpayment?: boolean
    session: string
    term: string
    schoolid: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type PaymentSetupUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    fees?: IntFieldUpdateOperationsInput | number
    partpayment?: BoolFieldUpdateOperationsInput | boolean
    session?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentSetupUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    fees?: IntFieldUpdateOperationsInput | number
    partpayment?: BoolFieldUpdateOperationsInput | boolean
    session?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    schoolid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TermCreateInput = {
    id?: string
    start: Date | string
    end: Date | string
    nextterm: Date | string
    daysopen: number
    session: string
    term: $Enums.Terms
    status: $Enums.TermStatus
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type TermUncheckedCreateInput = {
    id?: string
    start: Date | string
    end: Date | string
    nextterm: Date | string
    daysopen: number
    session: string
    term: $Enums.Terms
    status: $Enums.TermStatus
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type TermUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    nextterm?: DateTimeFieldUpdateOperationsInput | Date | string
    daysopen?: IntFieldUpdateOperationsInput | number
    session?: StringFieldUpdateOperationsInput | string
    term?: EnumTermsFieldUpdateOperationsInput | $Enums.Terms
    status?: EnumTermStatusFieldUpdateOperationsInput | $Enums.TermStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TermUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    nextterm?: DateTimeFieldUpdateOperationsInput | Date | string
    daysopen?: IntFieldUpdateOperationsInput | number
    session?: StringFieldUpdateOperationsInput | string
    term?: EnumTermsFieldUpdateOperationsInput | $Enums.Terms
    status?: EnumTermStatusFieldUpdateOperationsInput | $Enums.TermStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TermCreateManyInput = {
    id?: string
    start: Date | string
    end: Date | string
    nextterm: Date | string
    daysopen: number
    session: string
    term: $Enums.Terms
    status: $Enums.TermStatus
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type TermUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    nextterm?: DateTimeFieldUpdateOperationsInput | Date | string
    daysopen?: IntFieldUpdateOperationsInput | number
    session?: StringFieldUpdateOperationsInput | string
    term?: EnumTermsFieldUpdateOperationsInput | $Enums.Terms
    status?: EnumTermStatusFieldUpdateOperationsInput | $Enums.TermStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TermUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    nextterm?: DateTimeFieldUpdateOperationsInput | Date | string
    daysopen?: IntFieldUpdateOperationsInput | number
    session?: StringFieldUpdateOperationsInput | string
    term?: EnumTermsFieldUpdateOperationsInput | $Enums.Terms
    status?: EnumTermStatusFieldUpdateOperationsInput | $Enums.TermStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateInput = {
    id?: string
    session: string
    term: $Enums.Terms
    amount: number
    createdAt?: Date | string
    updateAt?: Date | string
    school: SchoolCreateNestedOneWithoutPaymentsInput
    student: StudentCreateNestedOneWithoutPaymentsInput
  }

  export type PaymentUncheckedCreateInput = {
    id?: string
    session: string
    term: $Enums.Terms
    amount: number
    schoolid: string
    studentid: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type PaymentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    term?: EnumTermsFieldUpdateOperationsInput | $Enums.Terms
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutPaymentsNestedInput
    student?: StudentUpdateOneRequiredWithoutPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    term?: EnumTermsFieldUpdateOperationsInput | $Enums.Terms
    amount?: IntFieldUpdateOperationsInput | number
    schoolid?: StringFieldUpdateOperationsInput | string
    studentid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateManyInput = {
    id?: string
    session: string
    term: $Enums.Terms
    amount: number
    schoolid: string
    studentid: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type PaymentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    term?: EnumTermsFieldUpdateOperationsInput | $Enums.Terms
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    term?: EnumTermsFieldUpdateOperationsInput | $Enums.Terms
    amount?: IntFieldUpdateOperationsInput | number
    schoolid?: StringFieldUpdateOperationsInput | string
    studentid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssignmentCreateInput = {
    id?: string
    title: string
    text: string
    file: string
    duedate: Date | string
    graded: boolean
    createdAt?: Date | string
    updateAt?: Date | string
    subject: SubjectCreateNestedOneWithoutAssignmentsInput
    teacher: TeacherCreateNestedOneWithoutAssignmentsInput
    submissions?: SubmissionCreateNestedManyWithoutAssignmentInput
    students?: StudentCreateNestedManyWithoutAssignmentsInput
  }

  export type AssignmentUncheckedCreateInput = {
    id?: string
    title: string
    text: string
    file: string
    duedate: Date | string
    graded: boolean
    subjectid: string
    teacherid: string
    createdAt?: Date | string
    updateAt?: Date | string
    submissions?: SubmissionUncheckedCreateNestedManyWithoutAssignmentInput
    students?: StudentUncheckedCreateNestedManyWithoutAssignmentsInput
  }

  export type AssignmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    file?: StringFieldUpdateOperationsInput | string
    duedate?: DateTimeFieldUpdateOperationsInput | Date | string
    graded?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: SubjectUpdateOneRequiredWithoutAssignmentsNestedInput
    teacher?: TeacherUpdateOneRequiredWithoutAssignmentsNestedInput
    submissions?: SubmissionUpdateManyWithoutAssignmentNestedInput
    students?: StudentUpdateManyWithoutAssignmentsNestedInput
  }

  export type AssignmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    file?: StringFieldUpdateOperationsInput | string
    duedate?: DateTimeFieldUpdateOperationsInput | Date | string
    graded?: BoolFieldUpdateOperationsInput | boolean
    subjectid?: StringFieldUpdateOperationsInput | string
    teacherid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissions?: SubmissionUncheckedUpdateManyWithoutAssignmentNestedInput
    students?: StudentUncheckedUpdateManyWithoutAssignmentsNestedInput
  }

  export type AssignmentCreateManyInput = {
    id?: string
    title: string
    text: string
    file: string
    duedate: Date | string
    graded: boolean
    subjectid: string
    teacherid: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type AssignmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    file?: StringFieldUpdateOperationsInput | string
    duedate?: DateTimeFieldUpdateOperationsInput | Date | string
    graded?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssignmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    file?: StringFieldUpdateOperationsInput | string
    duedate?: DateTimeFieldUpdateOperationsInput | Date | string
    graded?: BoolFieldUpdateOperationsInput | boolean
    subjectid?: StringFieldUpdateOperationsInput | string
    teacherid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestCreateInput = {
    id?: string
    title: string
    status: $Enums.TestStatus
    instructions: string
    duration: number
    maxscore: number
    open: boolean
    testdate: Date | string
    testtime: Date | string
    term: string
    createdAt?: Date | string
    updateAt?: Date | string
    questions?: QuestionCreateNestedManyWithoutTestInput
    answers?: AnswerCreateNestedManyWithoutTestInput
    subject: SubjectCreateNestedOneWithoutTestsInput
    teacher: TeacherCreateNestedOneWithoutTestsInput
  }

  export type TestUncheckedCreateInput = {
    id?: string
    title: string
    status: $Enums.TestStatus
    instructions: string
    duration: number
    maxscore: number
    open: boolean
    testdate: Date | string
    testtime: Date | string
    term: string
    subjectid: string
    teacherid: string
    createdAt?: Date | string
    updateAt?: Date | string
    questions?: QuestionUncheckedCreateNestedManyWithoutTestInput
    answers?: AnswerUncheckedCreateNestedManyWithoutTestInput
  }

  export type TestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    instructions?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    maxscore?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    testdate?: DateTimeFieldUpdateOperationsInput | Date | string
    testtime?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: QuestionUpdateManyWithoutTestNestedInput
    answers?: AnswerUpdateManyWithoutTestNestedInput
    subject?: SubjectUpdateOneRequiredWithoutTestsNestedInput
    teacher?: TeacherUpdateOneRequiredWithoutTestsNestedInput
  }

  export type TestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    instructions?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    maxscore?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    testdate?: DateTimeFieldUpdateOperationsInput | Date | string
    testtime?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: StringFieldUpdateOperationsInput | string
    subjectid?: StringFieldUpdateOperationsInput | string
    teacherid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: QuestionUncheckedUpdateManyWithoutTestNestedInput
    answers?: AnswerUncheckedUpdateManyWithoutTestNestedInput
  }

  export type TestCreateManyInput = {
    id?: string
    title: string
    status: $Enums.TestStatus
    instructions: string
    duration: number
    maxscore: number
    open: boolean
    testdate: Date | string
    testtime: Date | string
    term: string
    subjectid: string
    teacherid: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type TestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    instructions?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    maxscore?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    testdate?: DateTimeFieldUpdateOperationsInput | Date | string
    testtime?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    instructions?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    maxscore?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    testdate?: DateTimeFieldUpdateOperationsInput | Date | string
    testtime?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: StringFieldUpdateOperationsInput | string
    subjectid?: StringFieldUpdateOperationsInput | string
    teacherid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionCreateInput = {
    id?: string
    text: string
    options: JsonNullValueInput | InputJsonValue
    answer: string
    test: TestCreateNestedOneWithoutQuestionsInput
  }

  export type QuestionUncheckedCreateInput = {
    id?: string
    text: string
    options: JsonNullValueInput | InputJsonValue
    answer: string
    testid: string
  }

  export type QuestionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    options?: JsonNullValueInput | InputJsonValue
    answer?: StringFieldUpdateOperationsInput | string
    test?: TestUpdateOneRequiredWithoutQuestionsNestedInput
  }

  export type QuestionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    options?: JsonNullValueInput | InputJsonValue
    answer?: StringFieldUpdateOperationsInput | string
    testid?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionCreateManyInput = {
    id?: string
    text: string
    options: JsonNullValueInput | InputJsonValue
    answer: string
    testid: string
  }

  export type QuestionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    options?: JsonNullValueInput | InputJsonValue
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    options?: JsonNullValueInput | InputJsonValue
    answer?: StringFieldUpdateOperationsInput | string
    testid?: StringFieldUpdateOperationsInput | string
  }

  export type AnswerCreateInput = {
    id?: string
    score: number
    createdAt?: Date | string
    updateAt?: Date | string
    test: TestCreateNestedOneWithoutAnswersInput
    student: StudentCreateNestedOneWithoutAnswersInput
  }

  export type AnswerUncheckedCreateInput = {
    id?: string
    score: number
    testid: string
    studentid: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type AnswerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    test?: TestUpdateOneRequiredWithoutAnswersNestedInput
    student?: StudentUpdateOneRequiredWithoutAnswersNestedInput
  }

  export type AnswerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    testid?: StringFieldUpdateOperationsInput | string
    studentid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnswerCreateManyInput = {
    id?: string
    score: number
    testid: string
    studentid: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type AnswerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnswerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    testid?: StringFieldUpdateOperationsInput | string
    studentid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionCreateInput = {
    id?: string
    answer: string
    feedback: string
    score: number
    file: string
    createdAt?: Date | string
    updateAt?: Date | string
    assignment?: AssignmentCreateNestedOneWithoutSubmissionsInput
    student: StudentCreateNestedOneWithoutSubmissionsInput
  }

  export type SubmissionUncheckedCreateInput = {
    id?: string
    answer: string
    feedback: string
    score: number
    file: string
    assignmentId?: string | null
    studentId: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type SubmissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    file?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignment?: AssignmentUpdateOneWithoutSubmissionsNestedInput
    student?: StudentUpdateOneRequiredWithoutSubmissionsNestedInput
  }

  export type SubmissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    file?: StringFieldUpdateOperationsInput | string
    assignmentId?: NullableStringFieldUpdateOperationsInput | string | null
    studentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionCreateManyInput = {
    id?: string
    answer: string
    feedback: string
    score: number
    file: string
    assignmentId?: string | null
    studentId: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type SubmissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    file?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    file?: StringFieldUpdateOperationsInput | string
    assignmentId?: NullableStringFieldUpdateOperationsInput | string | null
    studentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GradeCreateInput = {
    id?: string
    title: string
    session: string
    term: string
    createdAt?: Date | string
    updateAt?: Date | string
    gradings?: ClassGradeCreateNestedManyWithoutGradeInput
    effective?: EffectiveDomainCreateNestedManyWithoutGradeInput
    psychomotive?: PsychomotiveDomainCreateNestedManyWithoutGradeInput
  }

  export type GradeUncheckedCreateInput = {
    id?: string
    title: string
    session: string
    term: string
    createdAt?: Date | string
    updateAt?: Date | string
    gradings?: ClassGradeUncheckedCreateNestedManyWithoutGradeInput
    effective?: EffectiveDomainUncheckedCreateNestedManyWithoutGradeInput
    psychomotive?: PsychomotiveDomainUncheckedCreateNestedManyWithoutGradeInput
  }

  export type GradeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gradings?: ClassGradeUpdateManyWithoutGradeNestedInput
    effective?: EffectiveDomainUpdateManyWithoutGradeNestedInput
    psychomotive?: PsychomotiveDomainUpdateManyWithoutGradeNestedInput
  }

  export type GradeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gradings?: ClassGradeUncheckedUpdateManyWithoutGradeNestedInput
    effective?: EffectiveDomainUncheckedUpdateManyWithoutGradeNestedInput
    psychomotive?: PsychomotiveDomainUncheckedUpdateManyWithoutGradeNestedInput
  }

  export type GradeCreateManyInput = {
    id?: string
    title: string
    session: string
    term: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type GradeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GradeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassGradeCreateInput = {
    id?: string
    class: ClassCreateNestedOneWithoutGradingsInput
    grade: GradeCreateNestedOneWithoutGradingsInput
    subjects?: SubjectGradeCreateNestedManyWithoutClassInput
  }

  export type ClassGradeUncheckedCreateInput = {
    id?: string
    classid: string
    gradeid: string
    subjects?: SubjectGradeUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassGradeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    class?: ClassUpdateOneRequiredWithoutGradingsNestedInput
    grade?: GradeUpdateOneRequiredWithoutGradingsNestedInput
    subjects?: SubjectGradeUpdateManyWithoutClassNestedInput
  }

  export type ClassGradeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    classid?: StringFieldUpdateOperationsInput | string
    gradeid?: StringFieldUpdateOperationsInput | string
    subjects?: SubjectGradeUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassGradeCreateManyInput = {
    id?: string
    classid: string
    gradeid: string
  }

  export type ClassGradeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type ClassGradeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    classid?: StringFieldUpdateOperationsInput | string
    gradeid?: StringFieldUpdateOperationsInput | string
  }

  export type SubjectGradeCreateInput = {
    id?: string
    subject: SubjectCreateNestedOneWithoutGradesInput
    class: ClassGradeCreateNestedOneWithoutSubjectsInput
    students?: StudentGradeCreateNestedManyWithoutSubjectGradeInput
  }

  export type SubjectGradeUncheckedCreateInput = {
    id?: string
    subjectid: string
    classid: string
    students?: StudentGradeUncheckedCreateNestedManyWithoutSubjectGradeInput
  }

  export type SubjectGradeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: SubjectUpdateOneRequiredWithoutGradesNestedInput
    class?: ClassGradeUpdateOneRequiredWithoutSubjectsNestedInput
    students?: StudentGradeUpdateManyWithoutSubjectGradeNestedInput
  }

  export type SubjectGradeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subjectid?: StringFieldUpdateOperationsInput | string
    classid?: StringFieldUpdateOperationsInput | string
    students?: StudentGradeUncheckedUpdateManyWithoutSubjectGradeNestedInput
  }

  export type SubjectGradeCreateManyInput = {
    id?: string
    subjectid: string
    classid: string
  }

  export type SubjectGradeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type SubjectGradeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    subjectid?: StringFieldUpdateOperationsInput | string
    classid?: StringFieldUpdateOperationsInput | string
  }

  export type StudentGradeCreateInput = {
    id?: string
    firstCa: number
    secondCa: number
    thirdCa: number
    fourthCa: number
    exams: number
    score: number
    grade: number
    remark: number
    student: StudentCreateNestedOneWithoutGradesInput
    subjectGrade: SubjectGradeCreateNestedOneWithoutStudentsInput
  }

  export type StudentGradeUncheckedCreateInput = {
    id?: string
    firstCa: number
    secondCa: number
    thirdCa: number
    fourthCa: number
    exams: number
    score: number
    grade: number
    remark: number
    studentid: string
    subjectgradeid: string
  }

  export type StudentGradeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstCa?: IntFieldUpdateOperationsInput | number
    secondCa?: IntFieldUpdateOperationsInput | number
    thirdCa?: IntFieldUpdateOperationsInput | number
    fourthCa?: IntFieldUpdateOperationsInput | number
    exams?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    grade?: IntFieldUpdateOperationsInput | number
    remark?: IntFieldUpdateOperationsInput | number
    student?: StudentUpdateOneRequiredWithoutGradesNestedInput
    subjectGrade?: SubjectGradeUpdateOneRequiredWithoutStudentsNestedInput
  }

  export type StudentGradeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstCa?: IntFieldUpdateOperationsInput | number
    secondCa?: IntFieldUpdateOperationsInput | number
    thirdCa?: IntFieldUpdateOperationsInput | number
    fourthCa?: IntFieldUpdateOperationsInput | number
    exams?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    grade?: IntFieldUpdateOperationsInput | number
    remark?: IntFieldUpdateOperationsInput | number
    studentid?: StringFieldUpdateOperationsInput | string
    subjectgradeid?: StringFieldUpdateOperationsInput | string
  }

  export type StudentGradeCreateManyInput = {
    id?: string
    firstCa: number
    secondCa: number
    thirdCa: number
    fourthCa: number
    exams: number
    score: number
    grade: number
    remark: number
    studentid: string
    subjectgradeid: string
  }

  export type StudentGradeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstCa?: IntFieldUpdateOperationsInput | number
    secondCa?: IntFieldUpdateOperationsInput | number
    thirdCa?: IntFieldUpdateOperationsInput | number
    fourthCa?: IntFieldUpdateOperationsInput | number
    exams?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    grade?: IntFieldUpdateOperationsInput | number
    remark?: IntFieldUpdateOperationsInput | number
  }

  export type StudentGradeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstCa?: IntFieldUpdateOperationsInput | number
    secondCa?: IntFieldUpdateOperationsInput | number
    thirdCa?: IntFieldUpdateOperationsInput | number
    fourthCa?: IntFieldUpdateOperationsInput | number
    exams?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    grade?: IntFieldUpdateOperationsInput | number
    remark?: IntFieldUpdateOperationsInput | number
    studentid?: StringFieldUpdateOperationsInput | string
    subjectgradeid?: StringFieldUpdateOperationsInput | string
  }

  export type EffectiveDomainCreateInput = {
    id?: string
    classattendance: number
    punctuality: number
    initiative: number
    responsibility: number
    neatness: number
    cooperation: number
    organization: number
    student: StudentCreateNestedOneWithoutEffectiveInput
    grade: GradeCreateNestedOneWithoutEffectiveInput
  }

  export type EffectiveDomainUncheckedCreateInput = {
    id?: string
    classattendance: number
    punctuality: number
    initiative: number
    responsibility: number
    neatness: number
    cooperation: number
    organization: number
    studentid: string
    gradeid: string
  }

  export type EffectiveDomainUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    classattendance?: IntFieldUpdateOperationsInput | number
    punctuality?: IntFieldUpdateOperationsInput | number
    initiative?: IntFieldUpdateOperationsInput | number
    responsibility?: IntFieldUpdateOperationsInput | number
    neatness?: IntFieldUpdateOperationsInput | number
    cooperation?: IntFieldUpdateOperationsInput | number
    organization?: IntFieldUpdateOperationsInput | number
    student?: StudentUpdateOneRequiredWithoutEffectiveNestedInput
    grade?: GradeUpdateOneRequiredWithoutEffectiveNestedInput
  }

  export type EffectiveDomainUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    classattendance?: IntFieldUpdateOperationsInput | number
    punctuality?: IntFieldUpdateOperationsInput | number
    initiative?: IntFieldUpdateOperationsInput | number
    responsibility?: IntFieldUpdateOperationsInput | number
    neatness?: IntFieldUpdateOperationsInput | number
    cooperation?: IntFieldUpdateOperationsInput | number
    organization?: IntFieldUpdateOperationsInput | number
    studentid?: StringFieldUpdateOperationsInput | string
    gradeid?: StringFieldUpdateOperationsInput | string
  }

  export type EffectiveDomainCreateManyInput = {
    id?: string
    classattendance: number
    punctuality: number
    initiative: number
    responsibility: number
    neatness: number
    cooperation: number
    organization: number
    studentid: string
    gradeid: string
  }

  export type EffectiveDomainUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    classattendance?: IntFieldUpdateOperationsInput | number
    punctuality?: IntFieldUpdateOperationsInput | number
    initiative?: IntFieldUpdateOperationsInput | number
    responsibility?: IntFieldUpdateOperationsInput | number
    neatness?: IntFieldUpdateOperationsInput | number
    cooperation?: IntFieldUpdateOperationsInput | number
    organization?: IntFieldUpdateOperationsInput | number
  }

  export type EffectiveDomainUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    classattendance?: IntFieldUpdateOperationsInput | number
    punctuality?: IntFieldUpdateOperationsInput | number
    initiative?: IntFieldUpdateOperationsInput | number
    responsibility?: IntFieldUpdateOperationsInput | number
    neatness?: IntFieldUpdateOperationsInput | number
    cooperation?: IntFieldUpdateOperationsInput | number
    organization?: IntFieldUpdateOperationsInput | number
    studentid?: StringFieldUpdateOperationsInput | string
    gradeid?: StringFieldUpdateOperationsInput | string
  }

  export type PsychomotiveDomainCreateInput = {
    id?: string
    hardworking: number
    sports: number
    student: StudentCreateNestedOneWithoutPsychomotiveInput
    grade: GradeCreateNestedOneWithoutPsychomotiveInput
  }

  export type PsychomotiveDomainUncheckedCreateInput = {
    id?: string
    hardworking: number
    sports: number
    studentid: string
    gradeid: string
  }

  export type PsychomotiveDomainUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    hardworking?: IntFieldUpdateOperationsInput | number
    sports?: IntFieldUpdateOperationsInput | number
    student?: StudentUpdateOneRequiredWithoutPsychomotiveNestedInput
    grade?: GradeUpdateOneRequiredWithoutPsychomotiveNestedInput
  }

  export type PsychomotiveDomainUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    hardworking?: IntFieldUpdateOperationsInput | number
    sports?: IntFieldUpdateOperationsInput | number
    studentid?: StringFieldUpdateOperationsInput | string
    gradeid?: StringFieldUpdateOperationsInput | string
  }

  export type PsychomotiveDomainCreateManyInput = {
    id?: string
    hardworking: number
    sports: number
    studentid: string
    gradeid: string
  }

  export type PsychomotiveDomainUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    hardworking?: IntFieldUpdateOperationsInput | number
    sports?: IntFieldUpdateOperationsInput | number
  }

  export type PsychomotiveDomainUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    hardworking?: IntFieldUpdateOperationsInput | number
    sports?: IntFieldUpdateOperationsInput | number
    studentid?: StringFieldUpdateOperationsInput | string
    gradeid?: StringFieldUpdateOperationsInput | string
  }

  export type AttendanceCreateInput = {
    date: Date | string
    present: boolean
    student: StudentCreateNestedOneWithoutAttendancesInput
  }

  export type AttendanceUncheckedCreateInput = {
    id?: number
    date: Date | string
    present: boolean
    studentId: string
  }

  export type AttendanceUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    present?: BoolFieldUpdateOperationsInput | boolean
    student?: StudentUpdateOneRequiredWithoutAttendancesNestedInput
  }

  export type AttendanceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    present?: BoolFieldUpdateOperationsInput | boolean
    studentId?: StringFieldUpdateOperationsInput | string
  }

  export type AttendanceCreateManyInput = {
    id?: number
    date: Date | string
    present: boolean
    studentId: string
  }

  export type AttendanceUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    present?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AttendanceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    present?: BoolFieldUpdateOperationsInput | boolean
    studentId?: StringFieldUpdateOperationsInput | string
  }

  export type EventCreateInput = {
    title: string
    description: string
    startTime: Date | string
    endTime: Date | string
    class?: ClassCreateNestedOneWithoutEventsInput
  }

  export type EventUncheckedCreateInput = {
    id?: number
    title: string
    description: string
    startTime: Date | string
    endTime: Date | string
    classId?: string | null
  }

  export type EventUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassUpdateOneWithoutEventsNestedInput
  }

  export type EventUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    classId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventCreateManyInput = {
    id?: number
    title: string
    description: string
    startTime: Date | string
    endTime: Date | string
    classId?: string | null
  }

  export type EventUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    classId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AnnouncementCreateInput = {
    title: string
    description: string
    date: Date | string
    class?: ClassCreateNestedOneWithoutAnnouncementsInput
  }

  export type AnnouncementUncheckedCreateInput = {
    id?: number
    title: string
    description: string
    date: Date | string
    classId?: string | null
  }

  export type AnnouncementUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassUpdateOneWithoutAnnouncementsNestedInput
  }

  export type AnnouncementUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    classId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AnnouncementCreateManyInput = {
    id?: number
    title: string
    description: string
    date: Date | string
    classId?: string | null
  }

  export type AnnouncementUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnnouncementUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    classId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRolesFilter<$PrismaModel = never> = {
    equals?: $Enums.Roles | EnumRolesFieldRefInput<$PrismaModel>
    in?: $Enums.Roles[] | ListEnumRolesFieldRefInput<$PrismaModel>
    notIn?: $Enums.Roles[] | ListEnumRolesFieldRefInput<$PrismaModel>
    not?: NestedEnumRolesFilter<$PrismaModel> | $Enums.Roles
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AdministrationCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type AdministrationMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type AdministrationMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRolesWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Roles | EnumRolesFieldRefInput<$PrismaModel>
    in?: $Enums.Roles[] | ListEnumRolesFieldRefInput<$PrismaModel>
    notIn?: $Enums.Roles[] | ListEnumRolesFieldRefInput<$PrismaModel>
    not?: NestedEnumRolesWithAggregatesFilter<$PrismaModel> | $Enums.Roles
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRolesFilter<$PrismaModel>
    _max?: NestedEnumRolesFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type StudentListRelationFilter = {
    every?: StudentWhereInput
    some?: StudentWhereInput
    none?: StudentWhereInput
  }

  export type TeacherListRelationFilter = {
    every?: TeacherWhereInput
    some?: TeacherWhereInput
    none?: TeacherWhereInput
  }

  export type SubjectListRelationFilter = {
    every?: SubjectWhereInput
    some?: SubjectWhereInput
    none?: SubjectWhereInput
  }

  export type PaymentSetupListRelationFilter = {
    every?: PaymentSetupWhereInput
    some?: PaymentSetupWhereInput
    none?: PaymentSetupWhereInput
  }

  export type PaymentListRelationFilter = {
    every?: PaymentWhereInput
    some?: PaymentWhereInput
    none?: PaymentWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type StudentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeacherOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PaymentSetupOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SchoolCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    logo?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type SchoolMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    logo?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type SchoolMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    logo?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumUserSexFilter<$PrismaModel = never> = {
    equals?: $Enums.UserSex | EnumUserSexFieldRefInput<$PrismaModel>
    in?: $Enums.UserSex[] | ListEnumUserSexFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserSex[] | ListEnumUserSexFieldRefInput<$PrismaModel>
    not?: NestedEnumUserSexFilter<$PrismaModel> | $Enums.UserSex
  }

  export type ParentScalarRelationFilter = {
    is?: ParentWhereInput
    isNot?: ParentWhereInput
  }

  export type SchoolScalarRelationFilter = {
    is?: SchoolWhereInput
    isNot?: SchoolWhereInput
  }

  export type ClassScalarRelationFilter = {
    is?: ClassWhereInput
    isNot?: ClassWhereInput
  }

  export type AttendanceListRelationFilter = {
    every?: AttendanceWhereInput
    some?: AttendanceWhereInput
    none?: AttendanceWhereInput
  }

  export type AssignmentListRelationFilter = {
    every?: AssignmentWhereInput
    some?: AssignmentWhereInput
    none?: AssignmentWhereInput
  }

  export type SubmissionListRelationFilter = {
    every?: SubmissionWhereInput
    some?: SubmissionWhereInput
    none?: SubmissionWhereInput
  }

  export type AnswerListRelationFilter = {
    every?: AnswerWhereInput
    some?: AnswerWhereInput
    none?: AnswerWhereInput
  }

  export type StudentGradeListRelationFilter = {
    every?: StudentGradeWhereInput
    some?: StudentGradeWhereInput
    none?: StudentGradeWhereInput
  }

  export type EffectiveDomainListRelationFilter = {
    every?: EffectiveDomainWhereInput
    some?: EffectiveDomainWhereInput
    none?: EffectiveDomainWhereInput
  }

  export type PsychomotiveDomainListRelationFilter = {
    every?: PsychomotiveDomainWhereInput
    some?: PsychomotiveDomainWhereInput
    none?: PsychomotiveDomainWhereInput
  }

  export type AttendanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AssignmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubmissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AnswerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentGradeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EffectiveDomainOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PsychomotiveDomainOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    admissionnumber?: SortOrder
    firstname?: SortOrder
    surname?: SortOrder
    othername?: SortOrder
    birthday?: SortOrder
    gender?: SortOrder
    religion?: SortOrder
    studenttype?: SortOrder
    house?: SortOrder
    bloodgroup?: SortOrder
    admissiondate?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    state?: SortOrder
    lga?: SortOrder
    avarta?: SortOrder
    parentid?: SortOrder
    schoolid?: SortOrder
    classid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type StudentMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    admissionnumber?: SortOrder
    firstname?: SortOrder
    surname?: SortOrder
    othername?: SortOrder
    birthday?: SortOrder
    gender?: SortOrder
    religion?: SortOrder
    studenttype?: SortOrder
    house?: SortOrder
    bloodgroup?: SortOrder
    admissiondate?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    state?: SortOrder
    lga?: SortOrder
    avarta?: SortOrder
    parentid?: SortOrder
    schoolid?: SortOrder
    classid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type StudentMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    admissionnumber?: SortOrder
    firstname?: SortOrder
    surname?: SortOrder
    othername?: SortOrder
    birthday?: SortOrder
    gender?: SortOrder
    religion?: SortOrder
    studenttype?: SortOrder
    house?: SortOrder
    bloodgroup?: SortOrder
    admissiondate?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    state?: SortOrder
    lga?: SortOrder
    avarta?: SortOrder
    parentid?: SortOrder
    schoolid?: SortOrder
    classid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type EnumUserSexWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserSex | EnumUserSexFieldRefInput<$PrismaModel>
    in?: $Enums.UserSex[] | ListEnumUserSexFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserSex[] | ListEnumUserSexFieldRefInput<$PrismaModel>
    not?: NestedEnumUserSexWithAggregatesFilter<$PrismaModel> | $Enums.UserSex
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserSexFilter<$PrismaModel>
    _max?: NestedEnumUserSexFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ClassListRelationFilter = {
    every?: ClassWhereInput
    some?: ClassWhereInput
    none?: ClassWhereInput
  }

  export type TestListRelationFilter = {
    every?: TestWhereInput
    some?: TestWhereInput
    none?: TestWhereInput
  }

  export type ClassOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeacherCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    title?: SortOrder
    firstname?: SortOrder
    surname?: SortOrder
    othername?: SortOrder
    birthday?: SortOrder
    bloodgroup?: SortOrder
    gender?: SortOrder
    state?: SortOrder
    lga?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    avarta?: SortOrder
    schoolid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type TeacherMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    title?: SortOrder
    firstname?: SortOrder
    surname?: SortOrder
    othername?: SortOrder
    birthday?: SortOrder
    bloodgroup?: SortOrder
    gender?: SortOrder
    state?: SortOrder
    lga?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    avarta?: SortOrder
    schoolid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type TeacherMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    title?: SortOrder
    firstname?: SortOrder
    surname?: SortOrder
    othername?: SortOrder
    birthday?: SortOrder
    bloodgroup?: SortOrder
    gender?: SortOrder
    state?: SortOrder
    lga?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    avarta?: SortOrder
    schoolid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type ParentCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    title?: SortOrder
    firstname?: SortOrder
    surname?: SortOrder
    othername?: SortOrder
    birthday?: SortOrder
    bloodgroup?: SortOrder
    gender?: SortOrder
    occupation?: SortOrder
    religion?: SortOrder
    state?: SortOrder
    lga?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type ParentMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    title?: SortOrder
    firstname?: SortOrder
    surname?: SortOrder
    othername?: SortOrder
    birthday?: SortOrder
    bloodgroup?: SortOrder
    gender?: SortOrder
    occupation?: SortOrder
    religion?: SortOrder
    state?: SortOrder
    lga?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type ParentMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    title?: SortOrder
    firstname?: SortOrder
    surname?: SortOrder
    othername?: SortOrder
    birthday?: SortOrder
    bloodgroup?: SortOrder
    gender?: SortOrder
    occupation?: SortOrder
    religion?: SortOrder
    state?: SortOrder
    lga?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type SubjectGradeListRelationFilter = {
    every?: SubjectGradeWhereInput
    some?: SubjectGradeWhereInput
    none?: SubjectGradeWhereInput
  }

  export type SubjectGradeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubjectCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    schoolid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type SubjectMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    schoolid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type SubjectMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    schoolid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type TeacherNullableScalarRelationFilter = {
    is?: TeacherWhereInput | null
    isNot?: TeacherWhereInput | null
  }

  export type ClassGradeListRelationFilter = {
    every?: ClassGradeWhereInput
    some?: ClassGradeWhereInput
    none?: ClassGradeWhereInput
  }

  export type EventListRelationFilter = {
    every?: EventWhereInput
    some?: EventWhereInput
    none?: EventWhereInput
  }

  export type AnnouncementListRelationFilter = {
    every?: AnnouncementWhereInput
    some?: AnnouncementWhereInput
    none?: AnnouncementWhereInput
  }

  export type ClassGradeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AnnouncementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClassCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    level?: SortOrder
    capacity?: SortOrder
    formmasterid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type ClassAvgOrderByAggregateInput = {
    capacity?: SortOrder
  }

  export type ClassMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    level?: SortOrder
    capacity?: SortOrder
    formmasterid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type ClassMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    level?: SortOrder
    capacity?: SortOrder
    formmasterid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type ClassSumOrderByAggregateInput = {
    capacity?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type PaymentSetupCountOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    fees?: SortOrder
    partpayment?: SortOrder
    session?: SortOrder
    term?: SortOrder
    schoolid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type PaymentSetupAvgOrderByAggregateInput = {
    amount?: SortOrder
    fees?: SortOrder
  }

  export type PaymentSetupMaxOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    fees?: SortOrder
    partpayment?: SortOrder
    session?: SortOrder
    term?: SortOrder
    schoolid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type PaymentSetupMinOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    fees?: SortOrder
    partpayment?: SortOrder
    session?: SortOrder
    term?: SortOrder
    schoolid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type PaymentSetupSumOrderByAggregateInput = {
    amount?: SortOrder
    fees?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumTermsFilter<$PrismaModel = never> = {
    equals?: $Enums.Terms | EnumTermsFieldRefInput<$PrismaModel>
    in?: $Enums.Terms[] | ListEnumTermsFieldRefInput<$PrismaModel>
    notIn?: $Enums.Terms[] | ListEnumTermsFieldRefInput<$PrismaModel>
    not?: NestedEnumTermsFilter<$PrismaModel> | $Enums.Terms
  }

  export type EnumTermStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TermStatus | EnumTermStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TermStatus[] | ListEnumTermStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TermStatus[] | ListEnumTermStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTermStatusFilter<$PrismaModel> | $Enums.TermStatus
  }

  export type TermCountOrderByAggregateInput = {
    id?: SortOrder
    start?: SortOrder
    end?: SortOrder
    nextterm?: SortOrder
    daysopen?: SortOrder
    session?: SortOrder
    term?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type TermAvgOrderByAggregateInput = {
    daysopen?: SortOrder
  }

  export type TermMaxOrderByAggregateInput = {
    id?: SortOrder
    start?: SortOrder
    end?: SortOrder
    nextterm?: SortOrder
    daysopen?: SortOrder
    session?: SortOrder
    term?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type TermMinOrderByAggregateInput = {
    id?: SortOrder
    start?: SortOrder
    end?: SortOrder
    nextterm?: SortOrder
    daysopen?: SortOrder
    session?: SortOrder
    term?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type TermSumOrderByAggregateInput = {
    daysopen?: SortOrder
  }

  export type EnumTermsWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Terms | EnumTermsFieldRefInput<$PrismaModel>
    in?: $Enums.Terms[] | ListEnumTermsFieldRefInput<$PrismaModel>
    notIn?: $Enums.Terms[] | ListEnumTermsFieldRefInput<$PrismaModel>
    not?: NestedEnumTermsWithAggregatesFilter<$PrismaModel> | $Enums.Terms
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTermsFilter<$PrismaModel>
    _max?: NestedEnumTermsFilter<$PrismaModel>
  }

  export type EnumTermStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TermStatus | EnumTermStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TermStatus[] | ListEnumTermStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TermStatus[] | ListEnumTermStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTermStatusWithAggregatesFilter<$PrismaModel> | $Enums.TermStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTermStatusFilter<$PrismaModel>
    _max?: NestedEnumTermStatusFilter<$PrismaModel>
  }

  export type StudentScalarRelationFilter = {
    is?: StudentWhereInput
    isNot?: StudentWhereInput
  }

  export type PaymentCountOrderByAggregateInput = {
    id?: SortOrder
    session?: SortOrder
    term?: SortOrder
    amount?: SortOrder
    schoolid?: SortOrder
    studentid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type PaymentAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type PaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    session?: SortOrder
    term?: SortOrder
    amount?: SortOrder
    schoolid?: SortOrder
    studentid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type PaymentMinOrderByAggregateInput = {
    id?: SortOrder
    session?: SortOrder
    term?: SortOrder
    amount?: SortOrder
    schoolid?: SortOrder
    studentid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type PaymentSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type SubjectScalarRelationFilter = {
    is?: SubjectWhereInput
    isNot?: SubjectWhereInput
  }

  export type TeacherScalarRelationFilter = {
    is?: TeacherWhereInput
    isNot?: TeacherWhereInput
  }

  export type AssignmentCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    text?: SortOrder
    file?: SortOrder
    duedate?: SortOrder
    graded?: SortOrder
    subjectid?: SortOrder
    teacherid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type AssignmentMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    text?: SortOrder
    file?: SortOrder
    duedate?: SortOrder
    graded?: SortOrder
    subjectid?: SortOrder
    teacherid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type AssignmentMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    text?: SortOrder
    file?: SortOrder
    duedate?: SortOrder
    graded?: SortOrder
    subjectid?: SortOrder
    teacherid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type EnumTestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TestStatus | EnumTestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TestStatus[] | ListEnumTestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TestStatus[] | ListEnumTestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTestStatusFilter<$PrismaModel> | $Enums.TestStatus
  }

  export type QuestionListRelationFilter = {
    every?: QuestionWhereInput
    some?: QuestionWhereInput
    none?: QuestionWhereInput
  }

  export type QuestionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TestCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    status?: SortOrder
    instructions?: SortOrder
    duration?: SortOrder
    maxscore?: SortOrder
    open?: SortOrder
    testdate?: SortOrder
    testtime?: SortOrder
    term?: SortOrder
    subjectid?: SortOrder
    teacherid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type TestAvgOrderByAggregateInput = {
    duration?: SortOrder
    maxscore?: SortOrder
  }

  export type TestMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    status?: SortOrder
    instructions?: SortOrder
    duration?: SortOrder
    maxscore?: SortOrder
    open?: SortOrder
    testdate?: SortOrder
    testtime?: SortOrder
    term?: SortOrder
    subjectid?: SortOrder
    teacherid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type TestMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    status?: SortOrder
    instructions?: SortOrder
    duration?: SortOrder
    maxscore?: SortOrder
    open?: SortOrder
    testdate?: SortOrder
    testtime?: SortOrder
    term?: SortOrder
    subjectid?: SortOrder
    teacherid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type TestSumOrderByAggregateInput = {
    duration?: SortOrder
    maxscore?: SortOrder
  }

  export type EnumTestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TestStatus | EnumTestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TestStatus[] | ListEnumTestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TestStatus[] | ListEnumTestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTestStatusWithAggregatesFilter<$PrismaModel> | $Enums.TestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTestStatusFilter<$PrismaModel>
    _max?: NestedEnumTestStatusFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type TestScalarRelationFilter = {
    is?: TestWhereInput
    isNot?: TestWhereInput
  }

  export type QuestionCountOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    options?: SortOrder
    answer?: SortOrder
    testid?: SortOrder
  }

  export type QuestionMaxOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    answer?: SortOrder
    testid?: SortOrder
  }

  export type QuestionMinOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    answer?: SortOrder
    testid?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type AnswerCountOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    testid?: SortOrder
    studentid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type AnswerAvgOrderByAggregateInput = {
    score?: SortOrder
  }

  export type AnswerMaxOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    testid?: SortOrder
    studentid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type AnswerMinOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    testid?: SortOrder
    studentid?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type AnswerSumOrderByAggregateInput = {
    score?: SortOrder
  }

  export type AssignmentNullableScalarRelationFilter = {
    is?: AssignmentWhereInput | null
    isNot?: AssignmentWhereInput | null
  }

  export type SubmissionCountOrderByAggregateInput = {
    id?: SortOrder
    answer?: SortOrder
    feedback?: SortOrder
    score?: SortOrder
    file?: SortOrder
    assignmentId?: SortOrder
    studentId?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type SubmissionAvgOrderByAggregateInput = {
    score?: SortOrder
  }

  export type SubmissionMaxOrderByAggregateInput = {
    id?: SortOrder
    answer?: SortOrder
    feedback?: SortOrder
    score?: SortOrder
    file?: SortOrder
    assignmentId?: SortOrder
    studentId?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type SubmissionMinOrderByAggregateInput = {
    id?: SortOrder
    answer?: SortOrder
    feedback?: SortOrder
    score?: SortOrder
    file?: SortOrder
    assignmentId?: SortOrder
    studentId?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type SubmissionSumOrderByAggregateInput = {
    score?: SortOrder
  }

  export type GradeCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    session?: SortOrder
    term?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type GradeMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    session?: SortOrder
    term?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type GradeMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    session?: SortOrder
    term?: SortOrder
    createdAt?: SortOrder
    updateAt?: SortOrder
  }

  export type GradeScalarRelationFilter = {
    is?: GradeWhereInput
    isNot?: GradeWhereInput
  }

  export type ClassGradeCountOrderByAggregateInput = {
    id?: SortOrder
    classid?: SortOrder
    gradeid?: SortOrder
  }

  export type ClassGradeMaxOrderByAggregateInput = {
    id?: SortOrder
    classid?: SortOrder
    gradeid?: SortOrder
  }

  export type ClassGradeMinOrderByAggregateInput = {
    id?: SortOrder
    classid?: SortOrder
    gradeid?: SortOrder
  }

  export type ClassGradeScalarRelationFilter = {
    is?: ClassGradeWhereInput
    isNot?: ClassGradeWhereInput
  }

  export type SubjectGradeCountOrderByAggregateInput = {
    id?: SortOrder
    subjectid?: SortOrder
    classid?: SortOrder
  }

  export type SubjectGradeMaxOrderByAggregateInput = {
    id?: SortOrder
    subjectid?: SortOrder
    classid?: SortOrder
  }

  export type SubjectGradeMinOrderByAggregateInput = {
    id?: SortOrder
    subjectid?: SortOrder
    classid?: SortOrder
  }

  export type SubjectGradeScalarRelationFilter = {
    is?: SubjectGradeWhereInput
    isNot?: SubjectGradeWhereInput
  }

  export type StudentGradeCountOrderByAggregateInput = {
    id?: SortOrder
    firstCa?: SortOrder
    secondCa?: SortOrder
    thirdCa?: SortOrder
    fourthCa?: SortOrder
    exams?: SortOrder
    score?: SortOrder
    grade?: SortOrder
    remark?: SortOrder
    studentid?: SortOrder
    subjectgradeid?: SortOrder
  }

  export type StudentGradeAvgOrderByAggregateInput = {
    firstCa?: SortOrder
    secondCa?: SortOrder
    thirdCa?: SortOrder
    fourthCa?: SortOrder
    exams?: SortOrder
    score?: SortOrder
    grade?: SortOrder
    remark?: SortOrder
  }

  export type StudentGradeMaxOrderByAggregateInput = {
    id?: SortOrder
    firstCa?: SortOrder
    secondCa?: SortOrder
    thirdCa?: SortOrder
    fourthCa?: SortOrder
    exams?: SortOrder
    score?: SortOrder
    grade?: SortOrder
    remark?: SortOrder
    studentid?: SortOrder
    subjectgradeid?: SortOrder
  }

  export type StudentGradeMinOrderByAggregateInput = {
    id?: SortOrder
    firstCa?: SortOrder
    secondCa?: SortOrder
    thirdCa?: SortOrder
    fourthCa?: SortOrder
    exams?: SortOrder
    score?: SortOrder
    grade?: SortOrder
    remark?: SortOrder
    studentid?: SortOrder
    subjectgradeid?: SortOrder
  }

  export type StudentGradeSumOrderByAggregateInput = {
    firstCa?: SortOrder
    secondCa?: SortOrder
    thirdCa?: SortOrder
    fourthCa?: SortOrder
    exams?: SortOrder
    score?: SortOrder
    grade?: SortOrder
    remark?: SortOrder
  }

  export type EffectiveDomainCountOrderByAggregateInput = {
    id?: SortOrder
    classattendance?: SortOrder
    punctuality?: SortOrder
    initiative?: SortOrder
    responsibility?: SortOrder
    neatness?: SortOrder
    cooperation?: SortOrder
    organization?: SortOrder
    studentid?: SortOrder
    gradeid?: SortOrder
  }

  export type EffectiveDomainAvgOrderByAggregateInput = {
    classattendance?: SortOrder
    punctuality?: SortOrder
    initiative?: SortOrder
    responsibility?: SortOrder
    neatness?: SortOrder
    cooperation?: SortOrder
    organization?: SortOrder
  }

  export type EffectiveDomainMaxOrderByAggregateInput = {
    id?: SortOrder
    classattendance?: SortOrder
    punctuality?: SortOrder
    initiative?: SortOrder
    responsibility?: SortOrder
    neatness?: SortOrder
    cooperation?: SortOrder
    organization?: SortOrder
    studentid?: SortOrder
    gradeid?: SortOrder
  }

  export type EffectiveDomainMinOrderByAggregateInput = {
    id?: SortOrder
    classattendance?: SortOrder
    punctuality?: SortOrder
    initiative?: SortOrder
    responsibility?: SortOrder
    neatness?: SortOrder
    cooperation?: SortOrder
    organization?: SortOrder
    studentid?: SortOrder
    gradeid?: SortOrder
  }

  export type EffectiveDomainSumOrderByAggregateInput = {
    classattendance?: SortOrder
    punctuality?: SortOrder
    initiative?: SortOrder
    responsibility?: SortOrder
    neatness?: SortOrder
    cooperation?: SortOrder
    organization?: SortOrder
  }

  export type PsychomotiveDomainCountOrderByAggregateInput = {
    id?: SortOrder
    hardworking?: SortOrder
    sports?: SortOrder
    studentid?: SortOrder
    gradeid?: SortOrder
  }

  export type PsychomotiveDomainAvgOrderByAggregateInput = {
    hardworking?: SortOrder
    sports?: SortOrder
  }

  export type PsychomotiveDomainMaxOrderByAggregateInput = {
    id?: SortOrder
    hardworking?: SortOrder
    sports?: SortOrder
    studentid?: SortOrder
    gradeid?: SortOrder
  }

  export type PsychomotiveDomainMinOrderByAggregateInput = {
    id?: SortOrder
    hardworking?: SortOrder
    sports?: SortOrder
    studentid?: SortOrder
    gradeid?: SortOrder
  }

  export type PsychomotiveDomainSumOrderByAggregateInput = {
    hardworking?: SortOrder
    sports?: SortOrder
  }

  export type AttendanceCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    present?: SortOrder
    studentId?: SortOrder
  }

  export type AttendanceAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AttendanceMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    present?: SortOrder
    studentId?: SortOrder
  }

  export type AttendanceMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    present?: SortOrder
    studentId?: SortOrder
  }

  export type AttendanceSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ClassNullableScalarRelationFilter = {
    is?: ClassWhereInput | null
    isNot?: ClassWhereInput | null
  }

  export type EventCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    classId?: SortOrder
  }

  export type EventAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EventMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    classId?: SortOrder
  }

  export type EventMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    classId?: SortOrder
  }

  export type EventSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AnnouncementCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    date?: SortOrder
    classId?: SortOrder
  }

  export type AnnouncementAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AnnouncementMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    date?: SortOrder
    classId?: SortOrder
  }

  export type AnnouncementMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    date?: SortOrder
    classId?: SortOrder
  }

  export type AnnouncementSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRolesFieldUpdateOperationsInput = {
    set?: $Enums.Roles
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StudentCreateNestedManyWithoutSchoolInput = {
    create?: XOR<StudentCreateWithoutSchoolInput, StudentUncheckedCreateWithoutSchoolInput> | StudentCreateWithoutSchoolInput[] | StudentUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutSchoolInput | StudentCreateOrConnectWithoutSchoolInput[]
    createMany?: StudentCreateManySchoolInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type TeacherCreateNestedManyWithoutSchoolInput = {
    create?: XOR<TeacherCreateWithoutSchoolInput, TeacherUncheckedCreateWithoutSchoolInput> | TeacherCreateWithoutSchoolInput[] | TeacherUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutSchoolInput | TeacherCreateOrConnectWithoutSchoolInput[]
    createMany?: TeacherCreateManySchoolInputEnvelope
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
  }

  export type SubjectCreateNestedManyWithoutSchoolInput = {
    create?: XOR<SubjectCreateWithoutSchoolInput, SubjectUncheckedCreateWithoutSchoolInput> | SubjectCreateWithoutSchoolInput[] | SubjectUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutSchoolInput | SubjectCreateOrConnectWithoutSchoolInput[]
    createMany?: SubjectCreateManySchoolInputEnvelope
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
  }

  export type PaymentSetupCreateNestedManyWithoutSchoolInput = {
    create?: XOR<PaymentSetupCreateWithoutSchoolInput, PaymentSetupUncheckedCreateWithoutSchoolInput> | PaymentSetupCreateWithoutSchoolInput[] | PaymentSetupUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: PaymentSetupCreateOrConnectWithoutSchoolInput | PaymentSetupCreateOrConnectWithoutSchoolInput[]
    createMany?: PaymentSetupCreateManySchoolInputEnvelope
    connect?: PaymentSetupWhereUniqueInput | PaymentSetupWhereUniqueInput[]
  }

  export type PaymentCreateNestedManyWithoutSchoolInput = {
    create?: XOR<PaymentCreateWithoutSchoolInput, PaymentUncheckedCreateWithoutSchoolInput> | PaymentCreateWithoutSchoolInput[] | PaymentUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutSchoolInput | PaymentCreateOrConnectWithoutSchoolInput[]
    createMany?: PaymentCreateManySchoolInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type StudentUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<StudentCreateWithoutSchoolInput, StudentUncheckedCreateWithoutSchoolInput> | StudentCreateWithoutSchoolInput[] | StudentUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutSchoolInput | StudentCreateOrConnectWithoutSchoolInput[]
    createMany?: StudentCreateManySchoolInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type TeacherUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<TeacherCreateWithoutSchoolInput, TeacherUncheckedCreateWithoutSchoolInput> | TeacherCreateWithoutSchoolInput[] | TeacherUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutSchoolInput | TeacherCreateOrConnectWithoutSchoolInput[]
    createMany?: TeacherCreateManySchoolInputEnvelope
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
  }

  export type SubjectUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<SubjectCreateWithoutSchoolInput, SubjectUncheckedCreateWithoutSchoolInput> | SubjectCreateWithoutSchoolInput[] | SubjectUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutSchoolInput | SubjectCreateOrConnectWithoutSchoolInput[]
    createMany?: SubjectCreateManySchoolInputEnvelope
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
  }

  export type PaymentSetupUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<PaymentSetupCreateWithoutSchoolInput, PaymentSetupUncheckedCreateWithoutSchoolInput> | PaymentSetupCreateWithoutSchoolInput[] | PaymentSetupUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: PaymentSetupCreateOrConnectWithoutSchoolInput | PaymentSetupCreateOrConnectWithoutSchoolInput[]
    createMany?: PaymentSetupCreateManySchoolInputEnvelope
    connect?: PaymentSetupWhereUniqueInput | PaymentSetupWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<PaymentCreateWithoutSchoolInput, PaymentUncheckedCreateWithoutSchoolInput> | PaymentCreateWithoutSchoolInput[] | PaymentUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutSchoolInput | PaymentCreateOrConnectWithoutSchoolInput[]
    createMany?: PaymentCreateManySchoolInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type StudentUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<StudentCreateWithoutSchoolInput, StudentUncheckedCreateWithoutSchoolInput> | StudentCreateWithoutSchoolInput[] | StudentUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutSchoolInput | StudentCreateOrConnectWithoutSchoolInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutSchoolInput | StudentUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: StudentCreateManySchoolInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutSchoolInput | StudentUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutSchoolInput | StudentUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type TeacherUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<TeacherCreateWithoutSchoolInput, TeacherUncheckedCreateWithoutSchoolInput> | TeacherCreateWithoutSchoolInput[] | TeacherUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutSchoolInput | TeacherCreateOrConnectWithoutSchoolInput[]
    upsert?: TeacherUpsertWithWhereUniqueWithoutSchoolInput | TeacherUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: TeacherCreateManySchoolInputEnvelope
    set?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    disconnect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    delete?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    update?: TeacherUpdateWithWhereUniqueWithoutSchoolInput | TeacherUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: TeacherUpdateManyWithWhereWithoutSchoolInput | TeacherUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: TeacherScalarWhereInput | TeacherScalarWhereInput[]
  }

  export type SubjectUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<SubjectCreateWithoutSchoolInput, SubjectUncheckedCreateWithoutSchoolInput> | SubjectCreateWithoutSchoolInput[] | SubjectUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutSchoolInput | SubjectCreateOrConnectWithoutSchoolInput[]
    upsert?: SubjectUpsertWithWhereUniqueWithoutSchoolInput | SubjectUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: SubjectCreateManySchoolInputEnvelope
    set?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    disconnect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    delete?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    update?: SubjectUpdateWithWhereUniqueWithoutSchoolInput | SubjectUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: SubjectUpdateManyWithWhereWithoutSchoolInput | SubjectUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
  }

  export type PaymentSetupUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<PaymentSetupCreateWithoutSchoolInput, PaymentSetupUncheckedCreateWithoutSchoolInput> | PaymentSetupCreateWithoutSchoolInput[] | PaymentSetupUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: PaymentSetupCreateOrConnectWithoutSchoolInput | PaymentSetupCreateOrConnectWithoutSchoolInput[]
    upsert?: PaymentSetupUpsertWithWhereUniqueWithoutSchoolInput | PaymentSetupUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: PaymentSetupCreateManySchoolInputEnvelope
    set?: PaymentSetupWhereUniqueInput | PaymentSetupWhereUniqueInput[]
    disconnect?: PaymentSetupWhereUniqueInput | PaymentSetupWhereUniqueInput[]
    delete?: PaymentSetupWhereUniqueInput | PaymentSetupWhereUniqueInput[]
    connect?: PaymentSetupWhereUniqueInput | PaymentSetupWhereUniqueInput[]
    update?: PaymentSetupUpdateWithWhereUniqueWithoutSchoolInput | PaymentSetupUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: PaymentSetupUpdateManyWithWhereWithoutSchoolInput | PaymentSetupUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: PaymentSetupScalarWhereInput | PaymentSetupScalarWhereInput[]
  }

  export type PaymentUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<PaymentCreateWithoutSchoolInput, PaymentUncheckedCreateWithoutSchoolInput> | PaymentCreateWithoutSchoolInput[] | PaymentUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutSchoolInput | PaymentCreateOrConnectWithoutSchoolInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutSchoolInput | PaymentUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: PaymentCreateManySchoolInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutSchoolInput | PaymentUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutSchoolInput | PaymentUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type StudentUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<StudentCreateWithoutSchoolInput, StudentUncheckedCreateWithoutSchoolInput> | StudentCreateWithoutSchoolInput[] | StudentUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutSchoolInput | StudentCreateOrConnectWithoutSchoolInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutSchoolInput | StudentUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: StudentCreateManySchoolInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutSchoolInput | StudentUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutSchoolInput | StudentUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type TeacherUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<TeacherCreateWithoutSchoolInput, TeacherUncheckedCreateWithoutSchoolInput> | TeacherCreateWithoutSchoolInput[] | TeacherUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutSchoolInput | TeacherCreateOrConnectWithoutSchoolInput[]
    upsert?: TeacherUpsertWithWhereUniqueWithoutSchoolInput | TeacherUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: TeacherCreateManySchoolInputEnvelope
    set?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    disconnect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    delete?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    update?: TeacherUpdateWithWhereUniqueWithoutSchoolInput | TeacherUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: TeacherUpdateManyWithWhereWithoutSchoolInput | TeacherUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: TeacherScalarWhereInput | TeacherScalarWhereInput[]
  }

  export type SubjectUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<SubjectCreateWithoutSchoolInput, SubjectUncheckedCreateWithoutSchoolInput> | SubjectCreateWithoutSchoolInput[] | SubjectUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutSchoolInput | SubjectCreateOrConnectWithoutSchoolInput[]
    upsert?: SubjectUpsertWithWhereUniqueWithoutSchoolInput | SubjectUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: SubjectCreateManySchoolInputEnvelope
    set?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    disconnect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    delete?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    update?: SubjectUpdateWithWhereUniqueWithoutSchoolInput | SubjectUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: SubjectUpdateManyWithWhereWithoutSchoolInput | SubjectUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
  }

  export type PaymentSetupUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<PaymentSetupCreateWithoutSchoolInput, PaymentSetupUncheckedCreateWithoutSchoolInput> | PaymentSetupCreateWithoutSchoolInput[] | PaymentSetupUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: PaymentSetupCreateOrConnectWithoutSchoolInput | PaymentSetupCreateOrConnectWithoutSchoolInput[]
    upsert?: PaymentSetupUpsertWithWhereUniqueWithoutSchoolInput | PaymentSetupUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: PaymentSetupCreateManySchoolInputEnvelope
    set?: PaymentSetupWhereUniqueInput | PaymentSetupWhereUniqueInput[]
    disconnect?: PaymentSetupWhereUniqueInput | PaymentSetupWhereUniqueInput[]
    delete?: PaymentSetupWhereUniqueInput | PaymentSetupWhereUniqueInput[]
    connect?: PaymentSetupWhereUniqueInput | PaymentSetupWhereUniqueInput[]
    update?: PaymentSetupUpdateWithWhereUniqueWithoutSchoolInput | PaymentSetupUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: PaymentSetupUpdateManyWithWhereWithoutSchoolInput | PaymentSetupUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: PaymentSetupScalarWhereInput | PaymentSetupScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<PaymentCreateWithoutSchoolInput, PaymentUncheckedCreateWithoutSchoolInput> | PaymentCreateWithoutSchoolInput[] | PaymentUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutSchoolInput | PaymentCreateOrConnectWithoutSchoolInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutSchoolInput | PaymentUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: PaymentCreateManySchoolInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutSchoolInput | PaymentUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutSchoolInput | PaymentUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type ParentCreateNestedOneWithoutStudentsInput = {
    create?: XOR<ParentCreateWithoutStudentsInput, ParentUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: ParentCreateOrConnectWithoutStudentsInput
    connect?: ParentWhereUniqueInput
  }

  export type SchoolCreateNestedOneWithoutStudentsInput = {
    create?: XOR<SchoolCreateWithoutStudentsInput, SchoolUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutStudentsInput
    connect?: SchoolWhereUniqueInput
  }

  export type ClassCreateNestedOneWithoutStudentsInput = {
    create?: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutStudentsInput
    connect?: ClassWhereUniqueInput
  }

  export type AttendanceCreateNestedManyWithoutStudentInput = {
    create?: XOR<AttendanceCreateWithoutStudentInput, AttendanceUncheckedCreateWithoutStudentInput> | AttendanceCreateWithoutStudentInput[] | AttendanceUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutStudentInput | AttendanceCreateOrConnectWithoutStudentInput[]
    createMany?: AttendanceCreateManyStudentInputEnvelope
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
  }

  export type AssignmentCreateNestedManyWithoutStudentsInput = {
    create?: XOR<AssignmentCreateWithoutStudentsInput, AssignmentUncheckedCreateWithoutStudentsInput> | AssignmentCreateWithoutStudentsInput[] | AssignmentUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutStudentsInput | AssignmentCreateOrConnectWithoutStudentsInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
  }

  export type SubmissionCreateNestedManyWithoutStudentInput = {
    create?: XOR<SubmissionCreateWithoutStudentInput, SubmissionUncheckedCreateWithoutStudentInput> | SubmissionCreateWithoutStudentInput[] | SubmissionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutStudentInput | SubmissionCreateOrConnectWithoutStudentInput[]
    createMany?: SubmissionCreateManyStudentInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type AnswerCreateNestedManyWithoutStudentInput = {
    create?: XOR<AnswerCreateWithoutStudentInput, AnswerUncheckedCreateWithoutStudentInput> | AnswerCreateWithoutStudentInput[] | AnswerUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AnswerCreateOrConnectWithoutStudentInput | AnswerCreateOrConnectWithoutStudentInput[]
    createMany?: AnswerCreateManyStudentInputEnvelope
    connect?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
  }

  export type StudentGradeCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentGradeCreateWithoutStudentInput, StudentGradeUncheckedCreateWithoutStudentInput> | StudentGradeCreateWithoutStudentInput[] | StudentGradeUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentGradeCreateOrConnectWithoutStudentInput | StudentGradeCreateOrConnectWithoutStudentInput[]
    createMany?: StudentGradeCreateManyStudentInputEnvelope
    connect?: StudentGradeWhereUniqueInput | StudentGradeWhereUniqueInput[]
  }

  export type EffectiveDomainCreateNestedManyWithoutStudentInput = {
    create?: XOR<EffectiveDomainCreateWithoutStudentInput, EffectiveDomainUncheckedCreateWithoutStudentInput> | EffectiveDomainCreateWithoutStudentInput[] | EffectiveDomainUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: EffectiveDomainCreateOrConnectWithoutStudentInput | EffectiveDomainCreateOrConnectWithoutStudentInput[]
    createMany?: EffectiveDomainCreateManyStudentInputEnvelope
    connect?: EffectiveDomainWhereUniqueInput | EffectiveDomainWhereUniqueInput[]
  }

  export type PsychomotiveDomainCreateNestedManyWithoutStudentInput = {
    create?: XOR<PsychomotiveDomainCreateWithoutStudentInput, PsychomotiveDomainUncheckedCreateWithoutStudentInput> | PsychomotiveDomainCreateWithoutStudentInput[] | PsychomotiveDomainUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: PsychomotiveDomainCreateOrConnectWithoutStudentInput | PsychomotiveDomainCreateOrConnectWithoutStudentInput[]
    createMany?: PsychomotiveDomainCreateManyStudentInputEnvelope
    connect?: PsychomotiveDomainWhereUniqueInput | PsychomotiveDomainWhereUniqueInput[]
  }

  export type PaymentCreateNestedManyWithoutStudentInput = {
    create?: XOR<PaymentCreateWithoutStudentInput, PaymentUncheckedCreateWithoutStudentInput> | PaymentCreateWithoutStudentInput[] | PaymentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutStudentInput | PaymentCreateOrConnectWithoutStudentInput[]
    createMany?: PaymentCreateManyStudentInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type AttendanceUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<AttendanceCreateWithoutStudentInput, AttendanceUncheckedCreateWithoutStudentInput> | AttendanceCreateWithoutStudentInput[] | AttendanceUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutStudentInput | AttendanceCreateOrConnectWithoutStudentInput[]
    createMany?: AttendanceCreateManyStudentInputEnvelope
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
  }

  export type AssignmentUncheckedCreateNestedManyWithoutStudentsInput = {
    create?: XOR<AssignmentCreateWithoutStudentsInput, AssignmentUncheckedCreateWithoutStudentsInput> | AssignmentCreateWithoutStudentsInput[] | AssignmentUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutStudentsInput | AssignmentCreateOrConnectWithoutStudentsInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
  }

  export type SubmissionUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<SubmissionCreateWithoutStudentInput, SubmissionUncheckedCreateWithoutStudentInput> | SubmissionCreateWithoutStudentInput[] | SubmissionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutStudentInput | SubmissionCreateOrConnectWithoutStudentInput[]
    createMany?: SubmissionCreateManyStudentInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type AnswerUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<AnswerCreateWithoutStudentInput, AnswerUncheckedCreateWithoutStudentInput> | AnswerCreateWithoutStudentInput[] | AnswerUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AnswerCreateOrConnectWithoutStudentInput | AnswerCreateOrConnectWithoutStudentInput[]
    createMany?: AnswerCreateManyStudentInputEnvelope
    connect?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
  }

  export type StudentGradeUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentGradeCreateWithoutStudentInput, StudentGradeUncheckedCreateWithoutStudentInput> | StudentGradeCreateWithoutStudentInput[] | StudentGradeUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentGradeCreateOrConnectWithoutStudentInput | StudentGradeCreateOrConnectWithoutStudentInput[]
    createMany?: StudentGradeCreateManyStudentInputEnvelope
    connect?: StudentGradeWhereUniqueInput | StudentGradeWhereUniqueInput[]
  }

  export type EffectiveDomainUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<EffectiveDomainCreateWithoutStudentInput, EffectiveDomainUncheckedCreateWithoutStudentInput> | EffectiveDomainCreateWithoutStudentInput[] | EffectiveDomainUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: EffectiveDomainCreateOrConnectWithoutStudentInput | EffectiveDomainCreateOrConnectWithoutStudentInput[]
    createMany?: EffectiveDomainCreateManyStudentInputEnvelope
    connect?: EffectiveDomainWhereUniqueInput | EffectiveDomainWhereUniqueInput[]
  }

  export type PsychomotiveDomainUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<PsychomotiveDomainCreateWithoutStudentInput, PsychomotiveDomainUncheckedCreateWithoutStudentInput> | PsychomotiveDomainCreateWithoutStudentInput[] | PsychomotiveDomainUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: PsychomotiveDomainCreateOrConnectWithoutStudentInput | PsychomotiveDomainCreateOrConnectWithoutStudentInput[]
    createMany?: PsychomotiveDomainCreateManyStudentInputEnvelope
    connect?: PsychomotiveDomainWhereUniqueInput | PsychomotiveDomainWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<PaymentCreateWithoutStudentInput, PaymentUncheckedCreateWithoutStudentInput> | PaymentCreateWithoutStudentInput[] | PaymentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutStudentInput | PaymentCreateOrConnectWithoutStudentInput[]
    createMany?: PaymentCreateManyStudentInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type EnumUserSexFieldUpdateOperationsInput = {
    set?: $Enums.UserSex
  }

  export type ParentUpdateOneRequiredWithoutStudentsNestedInput = {
    create?: XOR<ParentCreateWithoutStudentsInput, ParentUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: ParentCreateOrConnectWithoutStudentsInput
    upsert?: ParentUpsertWithoutStudentsInput
    connect?: ParentWhereUniqueInput
    update?: XOR<XOR<ParentUpdateToOneWithWhereWithoutStudentsInput, ParentUpdateWithoutStudentsInput>, ParentUncheckedUpdateWithoutStudentsInput>
  }

  export type SchoolUpdateOneRequiredWithoutStudentsNestedInput = {
    create?: XOR<SchoolCreateWithoutStudentsInput, SchoolUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutStudentsInput
    upsert?: SchoolUpsertWithoutStudentsInput
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutStudentsInput, SchoolUpdateWithoutStudentsInput>, SchoolUncheckedUpdateWithoutStudentsInput>
  }

  export type ClassUpdateOneRequiredWithoutStudentsNestedInput = {
    create?: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutStudentsInput
    upsert?: ClassUpsertWithoutStudentsInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutStudentsInput, ClassUpdateWithoutStudentsInput>, ClassUncheckedUpdateWithoutStudentsInput>
  }

  export type AttendanceUpdateManyWithoutStudentNestedInput = {
    create?: XOR<AttendanceCreateWithoutStudentInput, AttendanceUncheckedCreateWithoutStudentInput> | AttendanceCreateWithoutStudentInput[] | AttendanceUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutStudentInput | AttendanceCreateOrConnectWithoutStudentInput[]
    upsert?: AttendanceUpsertWithWhereUniqueWithoutStudentInput | AttendanceUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: AttendanceCreateManyStudentInputEnvelope
    set?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    disconnect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    delete?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    update?: AttendanceUpdateWithWhereUniqueWithoutStudentInput | AttendanceUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: AttendanceUpdateManyWithWhereWithoutStudentInput | AttendanceUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
  }

  export type AssignmentUpdateManyWithoutStudentsNestedInput = {
    create?: XOR<AssignmentCreateWithoutStudentsInput, AssignmentUncheckedCreateWithoutStudentsInput> | AssignmentCreateWithoutStudentsInput[] | AssignmentUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutStudentsInput | AssignmentCreateOrConnectWithoutStudentsInput[]
    upsert?: AssignmentUpsertWithWhereUniqueWithoutStudentsInput | AssignmentUpsertWithWhereUniqueWithoutStudentsInput[]
    set?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    disconnect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    delete?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    update?: AssignmentUpdateWithWhereUniqueWithoutStudentsInput | AssignmentUpdateWithWhereUniqueWithoutStudentsInput[]
    updateMany?: AssignmentUpdateManyWithWhereWithoutStudentsInput | AssignmentUpdateManyWithWhereWithoutStudentsInput[]
    deleteMany?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
  }

  export type SubmissionUpdateManyWithoutStudentNestedInput = {
    create?: XOR<SubmissionCreateWithoutStudentInput, SubmissionUncheckedCreateWithoutStudentInput> | SubmissionCreateWithoutStudentInput[] | SubmissionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutStudentInput | SubmissionCreateOrConnectWithoutStudentInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutStudentInput | SubmissionUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: SubmissionCreateManyStudentInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutStudentInput | SubmissionUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutStudentInput | SubmissionUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type AnswerUpdateManyWithoutStudentNestedInput = {
    create?: XOR<AnswerCreateWithoutStudentInput, AnswerUncheckedCreateWithoutStudentInput> | AnswerCreateWithoutStudentInput[] | AnswerUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AnswerCreateOrConnectWithoutStudentInput | AnswerCreateOrConnectWithoutStudentInput[]
    upsert?: AnswerUpsertWithWhereUniqueWithoutStudentInput | AnswerUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: AnswerCreateManyStudentInputEnvelope
    set?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
    disconnect?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
    delete?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
    connect?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
    update?: AnswerUpdateWithWhereUniqueWithoutStudentInput | AnswerUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: AnswerUpdateManyWithWhereWithoutStudentInput | AnswerUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: AnswerScalarWhereInput | AnswerScalarWhereInput[]
  }

  export type StudentGradeUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentGradeCreateWithoutStudentInput, StudentGradeUncheckedCreateWithoutStudentInput> | StudentGradeCreateWithoutStudentInput[] | StudentGradeUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentGradeCreateOrConnectWithoutStudentInput | StudentGradeCreateOrConnectWithoutStudentInput[]
    upsert?: StudentGradeUpsertWithWhereUniqueWithoutStudentInput | StudentGradeUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentGradeCreateManyStudentInputEnvelope
    set?: StudentGradeWhereUniqueInput | StudentGradeWhereUniqueInput[]
    disconnect?: StudentGradeWhereUniqueInput | StudentGradeWhereUniqueInput[]
    delete?: StudentGradeWhereUniqueInput | StudentGradeWhereUniqueInput[]
    connect?: StudentGradeWhereUniqueInput | StudentGradeWhereUniqueInput[]
    update?: StudentGradeUpdateWithWhereUniqueWithoutStudentInput | StudentGradeUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentGradeUpdateManyWithWhereWithoutStudentInput | StudentGradeUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentGradeScalarWhereInput | StudentGradeScalarWhereInput[]
  }

  export type EffectiveDomainUpdateManyWithoutStudentNestedInput = {
    create?: XOR<EffectiveDomainCreateWithoutStudentInput, EffectiveDomainUncheckedCreateWithoutStudentInput> | EffectiveDomainCreateWithoutStudentInput[] | EffectiveDomainUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: EffectiveDomainCreateOrConnectWithoutStudentInput | EffectiveDomainCreateOrConnectWithoutStudentInput[]
    upsert?: EffectiveDomainUpsertWithWhereUniqueWithoutStudentInput | EffectiveDomainUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: EffectiveDomainCreateManyStudentInputEnvelope
    set?: EffectiveDomainWhereUniqueInput | EffectiveDomainWhereUniqueInput[]
    disconnect?: EffectiveDomainWhereUniqueInput | EffectiveDomainWhereUniqueInput[]
    delete?: EffectiveDomainWhereUniqueInput | EffectiveDomainWhereUniqueInput[]
    connect?: EffectiveDomainWhereUniqueInput | EffectiveDomainWhereUniqueInput[]
    update?: EffectiveDomainUpdateWithWhereUniqueWithoutStudentInput | EffectiveDomainUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: EffectiveDomainUpdateManyWithWhereWithoutStudentInput | EffectiveDomainUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: EffectiveDomainScalarWhereInput | EffectiveDomainScalarWhereInput[]
  }

  export type PsychomotiveDomainUpdateManyWithoutStudentNestedInput = {
    create?: XOR<PsychomotiveDomainCreateWithoutStudentInput, PsychomotiveDomainUncheckedCreateWithoutStudentInput> | PsychomotiveDomainCreateWithoutStudentInput[] | PsychomotiveDomainUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: PsychomotiveDomainCreateOrConnectWithoutStudentInput | PsychomotiveDomainCreateOrConnectWithoutStudentInput[]
    upsert?: PsychomotiveDomainUpsertWithWhereUniqueWithoutStudentInput | PsychomotiveDomainUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: PsychomotiveDomainCreateManyStudentInputEnvelope
    set?: PsychomotiveDomainWhereUniqueInput | PsychomotiveDomainWhereUniqueInput[]
    disconnect?: PsychomotiveDomainWhereUniqueInput | PsychomotiveDomainWhereUniqueInput[]
    delete?: PsychomotiveDomainWhereUniqueInput | PsychomotiveDomainWhereUniqueInput[]
    connect?: PsychomotiveDomainWhereUniqueInput | PsychomotiveDomainWhereUniqueInput[]
    update?: PsychomotiveDomainUpdateWithWhereUniqueWithoutStudentInput | PsychomotiveDomainUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: PsychomotiveDomainUpdateManyWithWhereWithoutStudentInput | PsychomotiveDomainUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: PsychomotiveDomainScalarWhereInput | PsychomotiveDomainScalarWhereInput[]
  }

  export type PaymentUpdateManyWithoutStudentNestedInput = {
    create?: XOR<PaymentCreateWithoutStudentInput, PaymentUncheckedCreateWithoutStudentInput> | PaymentCreateWithoutStudentInput[] | PaymentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutStudentInput | PaymentCreateOrConnectWithoutStudentInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutStudentInput | PaymentUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: PaymentCreateManyStudentInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutStudentInput | PaymentUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutStudentInput | PaymentUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type AttendanceUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<AttendanceCreateWithoutStudentInput, AttendanceUncheckedCreateWithoutStudentInput> | AttendanceCreateWithoutStudentInput[] | AttendanceUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AttendanceCreateOrConnectWithoutStudentInput | AttendanceCreateOrConnectWithoutStudentInput[]
    upsert?: AttendanceUpsertWithWhereUniqueWithoutStudentInput | AttendanceUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: AttendanceCreateManyStudentInputEnvelope
    set?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    disconnect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    delete?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    connect?: AttendanceWhereUniqueInput | AttendanceWhereUniqueInput[]
    update?: AttendanceUpdateWithWhereUniqueWithoutStudentInput | AttendanceUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: AttendanceUpdateManyWithWhereWithoutStudentInput | AttendanceUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
  }

  export type AssignmentUncheckedUpdateManyWithoutStudentsNestedInput = {
    create?: XOR<AssignmentCreateWithoutStudentsInput, AssignmentUncheckedCreateWithoutStudentsInput> | AssignmentCreateWithoutStudentsInput[] | AssignmentUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutStudentsInput | AssignmentCreateOrConnectWithoutStudentsInput[]
    upsert?: AssignmentUpsertWithWhereUniqueWithoutStudentsInput | AssignmentUpsertWithWhereUniqueWithoutStudentsInput[]
    set?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    disconnect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    delete?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    update?: AssignmentUpdateWithWhereUniqueWithoutStudentsInput | AssignmentUpdateWithWhereUniqueWithoutStudentsInput[]
    updateMany?: AssignmentUpdateManyWithWhereWithoutStudentsInput | AssignmentUpdateManyWithWhereWithoutStudentsInput[]
    deleteMany?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
  }

  export type SubmissionUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<SubmissionCreateWithoutStudentInput, SubmissionUncheckedCreateWithoutStudentInput> | SubmissionCreateWithoutStudentInput[] | SubmissionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutStudentInput | SubmissionCreateOrConnectWithoutStudentInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutStudentInput | SubmissionUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: SubmissionCreateManyStudentInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutStudentInput | SubmissionUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutStudentInput | SubmissionUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type AnswerUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<AnswerCreateWithoutStudentInput, AnswerUncheckedCreateWithoutStudentInput> | AnswerCreateWithoutStudentInput[] | AnswerUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AnswerCreateOrConnectWithoutStudentInput | AnswerCreateOrConnectWithoutStudentInput[]
    upsert?: AnswerUpsertWithWhereUniqueWithoutStudentInput | AnswerUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: AnswerCreateManyStudentInputEnvelope
    set?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
    disconnect?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
    delete?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
    connect?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
    update?: AnswerUpdateWithWhereUniqueWithoutStudentInput | AnswerUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: AnswerUpdateManyWithWhereWithoutStudentInput | AnswerUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: AnswerScalarWhereInput | AnswerScalarWhereInput[]
  }

  export type StudentGradeUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentGradeCreateWithoutStudentInput, StudentGradeUncheckedCreateWithoutStudentInput> | StudentGradeCreateWithoutStudentInput[] | StudentGradeUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentGradeCreateOrConnectWithoutStudentInput | StudentGradeCreateOrConnectWithoutStudentInput[]
    upsert?: StudentGradeUpsertWithWhereUniqueWithoutStudentInput | StudentGradeUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentGradeCreateManyStudentInputEnvelope
    set?: StudentGradeWhereUniqueInput | StudentGradeWhereUniqueInput[]
    disconnect?: StudentGradeWhereUniqueInput | StudentGradeWhereUniqueInput[]
    delete?: StudentGradeWhereUniqueInput | StudentGradeWhereUniqueInput[]
    connect?: StudentGradeWhereUniqueInput | StudentGradeWhereUniqueInput[]
    update?: StudentGradeUpdateWithWhereUniqueWithoutStudentInput | StudentGradeUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentGradeUpdateManyWithWhereWithoutStudentInput | StudentGradeUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentGradeScalarWhereInput | StudentGradeScalarWhereInput[]
  }

  export type EffectiveDomainUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<EffectiveDomainCreateWithoutStudentInput, EffectiveDomainUncheckedCreateWithoutStudentInput> | EffectiveDomainCreateWithoutStudentInput[] | EffectiveDomainUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: EffectiveDomainCreateOrConnectWithoutStudentInput | EffectiveDomainCreateOrConnectWithoutStudentInput[]
    upsert?: EffectiveDomainUpsertWithWhereUniqueWithoutStudentInput | EffectiveDomainUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: EffectiveDomainCreateManyStudentInputEnvelope
    set?: EffectiveDomainWhereUniqueInput | EffectiveDomainWhereUniqueInput[]
    disconnect?: EffectiveDomainWhereUniqueInput | EffectiveDomainWhereUniqueInput[]
    delete?: EffectiveDomainWhereUniqueInput | EffectiveDomainWhereUniqueInput[]
    connect?: EffectiveDomainWhereUniqueInput | EffectiveDomainWhereUniqueInput[]
    update?: EffectiveDomainUpdateWithWhereUniqueWithoutStudentInput | EffectiveDomainUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: EffectiveDomainUpdateManyWithWhereWithoutStudentInput | EffectiveDomainUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: EffectiveDomainScalarWhereInput | EffectiveDomainScalarWhereInput[]
  }

  export type PsychomotiveDomainUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<PsychomotiveDomainCreateWithoutStudentInput, PsychomotiveDomainUncheckedCreateWithoutStudentInput> | PsychomotiveDomainCreateWithoutStudentInput[] | PsychomotiveDomainUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: PsychomotiveDomainCreateOrConnectWithoutStudentInput | PsychomotiveDomainCreateOrConnectWithoutStudentInput[]
    upsert?: PsychomotiveDomainUpsertWithWhereUniqueWithoutStudentInput | PsychomotiveDomainUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: PsychomotiveDomainCreateManyStudentInputEnvelope
    set?: PsychomotiveDomainWhereUniqueInput | PsychomotiveDomainWhereUniqueInput[]
    disconnect?: PsychomotiveDomainWhereUniqueInput | PsychomotiveDomainWhereUniqueInput[]
    delete?: PsychomotiveDomainWhereUniqueInput | PsychomotiveDomainWhereUniqueInput[]
    connect?: PsychomotiveDomainWhereUniqueInput | PsychomotiveDomainWhereUniqueInput[]
    update?: PsychomotiveDomainUpdateWithWhereUniqueWithoutStudentInput | PsychomotiveDomainUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: PsychomotiveDomainUpdateManyWithWhereWithoutStudentInput | PsychomotiveDomainUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: PsychomotiveDomainScalarWhereInput | PsychomotiveDomainScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<PaymentCreateWithoutStudentInput, PaymentUncheckedCreateWithoutStudentInput> | PaymentCreateWithoutStudentInput[] | PaymentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutStudentInput | PaymentCreateOrConnectWithoutStudentInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutStudentInput | PaymentUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: PaymentCreateManyStudentInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutStudentInput | PaymentUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutStudentInput | PaymentUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type SchoolCreateNestedOneWithoutTeachersInput = {
    create?: XOR<SchoolCreateWithoutTeachersInput, SchoolUncheckedCreateWithoutTeachersInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutTeachersInput
    connect?: SchoolWhereUniqueInput
  }

  export type SubjectCreateNestedManyWithoutTeachersInput = {
    create?: XOR<SubjectCreateWithoutTeachersInput, SubjectUncheckedCreateWithoutTeachersInput> | SubjectCreateWithoutTeachersInput[] | SubjectUncheckedCreateWithoutTeachersInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutTeachersInput | SubjectCreateOrConnectWithoutTeachersInput[]
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
  }

  export type ClassCreateNestedManyWithoutFormmasterInput = {
    create?: XOR<ClassCreateWithoutFormmasterInput, ClassUncheckedCreateWithoutFormmasterInput> | ClassCreateWithoutFormmasterInput[] | ClassUncheckedCreateWithoutFormmasterInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutFormmasterInput | ClassCreateOrConnectWithoutFormmasterInput[]
    createMany?: ClassCreateManyFormmasterInputEnvelope
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
  }

  export type AssignmentCreateNestedManyWithoutTeacherInput = {
    create?: XOR<AssignmentCreateWithoutTeacherInput, AssignmentUncheckedCreateWithoutTeacherInput> | AssignmentCreateWithoutTeacherInput[] | AssignmentUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutTeacherInput | AssignmentCreateOrConnectWithoutTeacherInput[]
    createMany?: AssignmentCreateManyTeacherInputEnvelope
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
  }

  export type TestCreateNestedManyWithoutTeacherInput = {
    create?: XOR<TestCreateWithoutTeacherInput, TestUncheckedCreateWithoutTeacherInput> | TestCreateWithoutTeacherInput[] | TestUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: TestCreateOrConnectWithoutTeacherInput | TestCreateOrConnectWithoutTeacherInput[]
    createMany?: TestCreateManyTeacherInputEnvelope
    connect?: TestWhereUniqueInput | TestWhereUniqueInput[]
  }

  export type SubjectUncheckedCreateNestedManyWithoutTeachersInput = {
    create?: XOR<SubjectCreateWithoutTeachersInput, SubjectUncheckedCreateWithoutTeachersInput> | SubjectCreateWithoutTeachersInput[] | SubjectUncheckedCreateWithoutTeachersInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutTeachersInput | SubjectCreateOrConnectWithoutTeachersInput[]
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
  }

  export type ClassUncheckedCreateNestedManyWithoutFormmasterInput = {
    create?: XOR<ClassCreateWithoutFormmasterInput, ClassUncheckedCreateWithoutFormmasterInput> | ClassCreateWithoutFormmasterInput[] | ClassUncheckedCreateWithoutFormmasterInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutFormmasterInput | ClassCreateOrConnectWithoutFormmasterInput[]
    createMany?: ClassCreateManyFormmasterInputEnvelope
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
  }

  export type AssignmentUncheckedCreateNestedManyWithoutTeacherInput = {
    create?: XOR<AssignmentCreateWithoutTeacherInput, AssignmentUncheckedCreateWithoutTeacherInput> | AssignmentCreateWithoutTeacherInput[] | AssignmentUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutTeacherInput | AssignmentCreateOrConnectWithoutTeacherInput[]
    createMany?: AssignmentCreateManyTeacherInputEnvelope
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
  }

  export type TestUncheckedCreateNestedManyWithoutTeacherInput = {
    create?: XOR<TestCreateWithoutTeacherInput, TestUncheckedCreateWithoutTeacherInput> | TestCreateWithoutTeacherInput[] | TestUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: TestCreateOrConnectWithoutTeacherInput | TestCreateOrConnectWithoutTeacherInput[]
    createMany?: TestCreateManyTeacherInputEnvelope
    connect?: TestWhereUniqueInput | TestWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type SchoolUpdateOneRequiredWithoutTeachersNestedInput = {
    create?: XOR<SchoolCreateWithoutTeachersInput, SchoolUncheckedCreateWithoutTeachersInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutTeachersInput
    upsert?: SchoolUpsertWithoutTeachersInput
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutTeachersInput, SchoolUpdateWithoutTeachersInput>, SchoolUncheckedUpdateWithoutTeachersInput>
  }

  export type SubjectUpdateManyWithoutTeachersNestedInput = {
    create?: XOR<SubjectCreateWithoutTeachersInput, SubjectUncheckedCreateWithoutTeachersInput> | SubjectCreateWithoutTeachersInput[] | SubjectUncheckedCreateWithoutTeachersInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutTeachersInput | SubjectCreateOrConnectWithoutTeachersInput[]
    upsert?: SubjectUpsertWithWhereUniqueWithoutTeachersInput | SubjectUpsertWithWhereUniqueWithoutTeachersInput[]
    set?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    disconnect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    delete?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    update?: SubjectUpdateWithWhereUniqueWithoutTeachersInput | SubjectUpdateWithWhereUniqueWithoutTeachersInput[]
    updateMany?: SubjectUpdateManyWithWhereWithoutTeachersInput | SubjectUpdateManyWithWhereWithoutTeachersInput[]
    deleteMany?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
  }

  export type ClassUpdateManyWithoutFormmasterNestedInput = {
    create?: XOR<ClassCreateWithoutFormmasterInput, ClassUncheckedCreateWithoutFormmasterInput> | ClassCreateWithoutFormmasterInput[] | ClassUncheckedCreateWithoutFormmasterInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutFormmasterInput | ClassCreateOrConnectWithoutFormmasterInput[]
    upsert?: ClassUpsertWithWhereUniqueWithoutFormmasterInput | ClassUpsertWithWhereUniqueWithoutFormmasterInput[]
    createMany?: ClassCreateManyFormmasterInputEnvelope
    set?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    disconnect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    delete?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    update?: ClassUpdateWithWhereUniqueWithoutFormmasterInput | ClassUpdateWithWhereUniqueWithoutFormmasterInput[]
    updateMany?: ClassUpdateManyWithWhereWithoutFormmasterInput | ClassUpdateManyWithWhereWithoutFormmasterInput[]
    deleteMany?: ClassScalarWhereInput | ClassScalarWhereInput[]
  }

  export type AssignmentUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<AssignmentCreateWithoutTeacherInput, AssignmentUncheckedCreateWithoutTeacherInput> | AssignmentCreateWithoutTeacherInput[] | AssignmentUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutTeacherInput | AssignmentCreateOrConnectWithoutTeacherInput[]
    upsert?: AssignmentUpsertWithWhereUniqueWithoutTeacherInput | AssignmentUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: AssignmentCreateManyTeacherInputEnvelope
    set?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    disconnect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    delete?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    update?: AssignmentUpdateWithWhereUniqueWithoutTeacherInput | AssignmentUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: AssignmentUpdateManyWithWhereWithoutTeacherInput | AssignmentUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
  }

  export type TestUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<TestCreateWithoutTeacherInput, TestUncheckedCreateWithoutTeacherInput> | TestCreateWithoutTeacherInput[] | TestUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: TestCreateOrConnectWithoutTeacherInput | TestCreateOrConnectWithoutTeacherInput[]
    upsert?: TestUpsertWithWhereUniqueWithoutTeacherInput | TestUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: TestCreateManyTeacherInputEnvelope
    set?: TestWhereUniqueInput | TestWhereUniqueInput[]
    disconnect?: TestWhereUniqueInput | TestWhereUniqueInput[]
    delete?: TestWhereUniqueInput | TestWhereUniqueInput[]
    connect?: TestWhereUniqueInput | TestWhereUniqueInput[]
    update?: TestUpdateWithWhereUniqueWithoutTeacherInput | TestUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: TestUpdateManyWithWhereWithoutTeacherInput | TestUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: TestScalarWhereInput | TestScalarWhereInput[]
  }

  export type SubjectUncheckedUpdateManyWithoutTeachersNestedInput = {
    create?: XOR<SubjectCreateWithoutTeachersInput, SubjectUncheckedCreateWithoutTeachersInput> | SubjectCreateWithoutTeachersInput[] | SubjectUncheckedCreateWithoutTeachersInput[]
    connectOrCreate?: SubjectCreateOrConnectWithoutTeachersInput | SubjectCreateOrConnectWithoutTeachersInput[]
    upsert?: SubjectUpsertWithWhereUniqueWithoutTeachersInput | SubjectUpsertWithWhereUniqueWithoutTeachersInput[]
    set?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    disconnect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    delete?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    connect?: SubjectWhereUniqueInput | SubjectWhereUniqueInput[]
    update?: SubjectUpdateWithWhereUniqueWithoutTeachersInput | SubjectUpdateWithWhereUniqueWithoutTeachersInput[]
    updateMany?: SubjectUpdateManyWithWhereWithoutTeachersInput | SubjectUpdateManyWithWhereWithoutTeachersInput[]
    deleteMany?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
  }

  export type ClassUncheckedUpdateManyWithoutFormmasterNestedInput = {
    create?: XOR<ClassCreateWithoutFormmasterInput, ClassUncheckedCreateWithoutFormmasterInput> | ClassCreateWithoutFormmasterInput[] | ClassUncheckedCreateWithoutFormmasterInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutFormmasterInput | ClassCreateOrConnectWithoutFormmasterInput[]
    upsert?: ClassUpsertWithWhereUniqueWithoutFormmasterInput | ClassUpsertWithWhereUniqueWithoutFormmasterInput[]
    createMany?: ClassCreateManyFormmasterInputEnvelope
    set?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    disconnect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    delete?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    update?: ClassUpdateWithWhereUniqueWithoutFormmasterInput | ClassUpdateWithWhereUniqueWithoutFormmasterInput[]
    updateMany?: ClassUpdateManyWithWhereWithoutFormmasterInput | ClassUpdateManyWithWhereWithoutFormmasterInput[]
    deleteMany?: ClassScalarWhereInput | ClassScalarWhereInput[]
  }

  export type AssignmentUncheckedUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<AssignmentCreateWithoutTeacherInput, AssignmentUncheckedCreateWithoutTeacherInput> | AssignmentCreateWithoutTeacherInput[] | AssignmentUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutTeacherInput | AssignmentCreateOrConnectWithoutTeacherInput[]
    upsert?: AssignmentUpsertWithWhereUniqueWithoutTeacherInput | AssignmentUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: AssignmentCreateManyTeacherInputEnvelope
    set?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    disconnect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    delete?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    update?: AssignmentUpdateWithWhereUniqueWithoutTeacherInput | AssignmentUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: AssignmentUpdateManyWithWhereWithoutTeacherInput | AssignmentUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
  }

  export type TestUncheckedUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<TestCreateWithoutTeacherInput, TestUncheckedCreateWithoutTeacherInput> | TestCreateWithoutTeacherInput[] | TestUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: TestCreateOrConnectWithoutTeacherInput | TestCreateOrConnectWithoutTeacherInput[]
    upsert?: TestUpsertWithWhereUniqueWithoutTeacherInput | TestUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: TestCreateManyTeacherInputEnvelope
    set?: TestWhereUniqueInput | TestWhereUniqueInput[]
    disconnect?: TestWhereUniqueInput | TestWhereUniqueInput[]
    delete?: TestWhereUniqueInput | TestWhereUniqueInput[]
    connect?: TestWhereUniqueInput | TestWhereUniqueInput[]
    update?: TestUpdateWithWhereUniqueWithoutTeacherInput | TestUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: TestUpdateManyWithWhereWithoutTeacherInput | TestUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: TestScalarWhereInput | TestScalarWhereInput[]
  }

  export type StudentCreateNestedManyWithoutParentInput = {
    create?: XOR<StudentCreateWithoutParentInput, StudentUncheckedCreateWithoutParentInput> | StudentCreateWithoutParentInput[] | StudentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutParentInput | StudentCreateOrConnectWithoutParentInput[]
    createMany?: StudentCreateManyParentInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type StudentUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<StudentCreateWithoutParentInput, StudentUncheckedCreateWithoutParentInput> | StudentCreateWithoutParentInput[] | StudentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutParentInput | StudentCreateOrConnectWithoutParentInput[]
    createMany?: StudentCreateManyParentInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type StudentUpdateManyWithoutParentNestedInput = {
    create?: XOR<StudentCreateWithoutParentInput, StudentUncheckedCreateWithoutParentInput> | StudentCreateWithoutParentInput[] | StudentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutParentInput | StudentCreateOrConnectWithoutParentInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutParentInput | StudentUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: StudentCreateManyParentInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutParentInput | StudentUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutParentInput | StudentUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type StudentUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<StudentCreateWithoutParentInput, StudentUncheckedCreateWithoutParentInput> | StudentCreateWithoutParentInput[] | StudentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutParentInput | StudentCreateOrConnectWithoutParentInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutParentInput | StudentUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: StudentCreateManyParentInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutParentInput | StudentUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutParentInput | StudentUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type SchoolCreateNestedOneWithoutSubjectsInput = {
    create?: XOR<SchoolCreateWithoutSubjectsInput, SchoolUncheckedCreateWithoutSubjectsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutSubjectsInput
    connect?: SchoolWhereUniqueInput
  }

  export type TeacherCreateNestedManyWithoutSubjectsInput = {
    create?: XOR<TeacherCreateWithoutSubjectsInput, TeacherUncheckedCreateWithoutSubjectsInput> | TeacherCreateWithoutSubjectsInput[] | TeacherUncheckedCreateWithoutSubjectsInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutSubjectsInput | TeacherCreateOrConnectWithoutSubjectsInput[]
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
  }

  export type AssignmentCreateNestedManyWithoutSubjectInput = {
    create?: XOR<AssignmentCreateWithoutSubjectInput, AssignmentUncheckedCreateWithoutSubjectInput> | AssignmentCreateWithoutSubjectInput[] | AssignmentUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutSubjectInput | AssignmentCreateOrConnectWithoutSubjectInput[]
    createMany?: AssignmentCreateManySubjectInputEnvelope
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
  }

  export type SubjectGradeCreateNestedManyWithoutSubjectInput = {
    create?: XOR<SubjectGradeCreateWithoutSubjectInput, SubjectGradeUncheckedCreateWithoutSubjectInput> | SubjectGradeCreateWithoutSubjectInput[] | SubjectGradeUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: SubjectGradeCreateOrConnectWithoutSubjectInput | SubjectGradeCreateOrConnectWithoutSubjectInput[]
    createMany?: SubjectGradeCreateManySubjectInputEnvelope
    connect?: SubjectGradeWhereUniqueInput | SubjectGradeWhereUniqueInput[]
  }

  export type TestCreateNestedManyWithoutSubjectInput = {
    create?: XOR<TestCreateWithoutSubjectInput, TestUncheckedCreateWithoutSubjectInput> | TestCreateWithoutSubjectInput[] | TestUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: TestCreateOrConnectWithoutSubjectInput | TestCreateOrConnectWithoutSubjectInput[]
    createMany?: TestCreateManySubjectInputEnvelope
    connect?: TestWhereUniqueInput | TestWhereUniqueInput[]
  }

  export type TeacherUncheckedCreateNestedManyWithoutSubjectsInput = {
    create?: XOR<TeacherCreateWithoutSubjectsInput, TeacherUncheckedCreateWithoutSubjectsInput> | TeacherCreateWithoutSubjectsInput[] | TeacherUncheckedCreateWithoutSubjectsInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutSubjectsInput | TeacherCreateOrConnectWithoutSubjectsInput[]
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
  }

  export type AssignmentUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<AssignmentCreateWithoutSubjectInput, AssignmentUncheckedCreateWithoutSubjectInput> | AssignmentCreateWithoutSubjectInput[] | AssignmentUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutSubjectInput | AssignmentCreateOrConnectWithoutSubjectInput[]
    createMany?: AssignmentCreateManySubjectInputEnvelope
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
  }

  export type SubjectGradeUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<SubjectGradeCreateWithoutSubjectInput, SubjectGradeUncheckedCreateWithoutSubjectInput> | SubjectGradeCreateWithoutSubjectInput[] | SubjectGradeUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: SubjectGradeCreateOrConnectWithoutSubjectInput | SubjectGradeCreateOrConnectWithoutSubjectInput[]
    createMany?: SubjectGradeCreateManySubjectInputEnvelope
    connect?: SubjectGradeWhereUniqueInput | SubjectGradeWhereUniqueInput[]
  }

  export type TestUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<TestCreateWithoutSubjectInput, TestUncheckedCreateWithoutSubjectInput> | TestCreateWithoutSubjectInput[] | TestUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: TestCreateOrConnectWithoutSubjectInput | TestCreateOrConnectWithoutSubjectInput[]
    createMany?: TestCreateManySubjectInputEnvelope
    connect?: TestWhereUniqueInput | TestWhereUniqueInput[]
  }

  export type SchoolUpdateOneRequiredWithoutSubjectsNestedInput = {
    create?: XOR<SchoolCreateWithoutSubjectsInput, SchoolUncheckedCreateWithoutSubjectsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutSubjectsInput
    upsert?: SchoolUpsertWithoutSubjectsInput
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutSubjectsInput, SchoolUpdateWithoutSubjectsInput>, SchoolUncheckedUpdateWithoutSubjectsInput>
  }

  export type TeacherUpdateManyWithoutSubjectsNestedInput = {
    create?: XOR<TeacherCreateWithoutSubjectsInput, TeacherUncheckedCreateWithoutSubjectsInput> | TeacherCreateWithoutSubjectsInput[] | TeacherUncheckedCreateWithoutSubjectsInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutSubjectsInput | TeacherCreateOrConnectWithoutSubjectsInput[]
    upsert?: TeacherUpsertWithWhereUniqueWithoutSubjectsInput | TeacherUpsertWithWhereUniqueWithoutSubjectsInput[]
    set?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    disconnect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    delete?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    update?: TeacherUpdateWithWhereUniqueWithoutSubjectsInput | TeacherUpdateWithWhereUniqueWithoutSubjectsInput[]
    updateMany?: TeacherUpdateManyWithWhereWithoutSubjectsInput | TeacherUpdateManyWithWhereWithoutSubjectsInput[]
    deleteMany?: TeacherScalarWhereInput | TeacherScalarWhereInput[]
  }

  export type AssignmentUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<AssignmentCreateWithoutSubjectInput, AssignmentUncheckedCreateWithoutSubjectInput> | AssignmentCreateWithoutSubjectInput[] | AssignmentUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutSubjectInput | AssignmentCreateOrConnectWithoutSubjectInput[]
    upsert?: AssignmentUpsertWithWhereUniqueWithoutSubjectInput | AssignmentUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: AssignmentCreateManySubjectInputEnvelope
    set?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    disconnect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    delete?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    update?: AssignmentUpdateWithWhereUniqueWithoutSubjectInput | AssignmentUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: AssignmentUpdateManyWithWhereWithoutSubjectInput | AssignmentUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
  }

  export type SubjectGradeUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<SubjectGradeCreateWithoutSubjectInput, SubjectGradeUncheckedCreateWithoutSubjectInput> | SubjectGradeCreateWithoutSubjectInput[] | SubjectGradeUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: SubjectGradeCreateOrConnectWithoutSubjectInput | SubjectGradeCreateOrConnectWithoutSubjectInput[]
    upsert?: SubjectGradeUpsertWithWhereUniqueWithoutSubjectInput | SubjectGradeUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: SubjectGradeCreateManySubjectInputEnvelope
    set?: SubjectGradeWhereUniqueInput | SubjectGradeWhereUniqueInput[]
    disconnect?: SubjectGradeWhereUniqueInput | SubjectGradeWhereUniqueInput[]
    delete?: SubjectGradeWhereUniqueInput | SubjectGradeWhereUniqueInput[]
    connect?: SubjectGradeWhereUniqueInput | SubjectGradeWhereUniqueInput[]
    update?: SubjectGradeUpdateWithWhereUniqueWithoutSubjectInput | SubjectGradeUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: SubjectGradeUpdateManyWithWhereWithoutSubjectInput | SubjectGradeUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: SubjectGradeScalarWhereInput | SubjectGradeScalarWhereInput[]
  }

  export type TestUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<TestCreateWithoutSubjectInput, TestUncheckedCreateWithoutSubjectInput> | TestCreateWithoutSubjectInput[] | TestUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: TestCreateOrConnectWithoutSubjectInput | TestCreateOrConnectWithoutSubjectInput[]
    upsert?: TestUpsertWithWhereUniqueWithoutSubjectInput | TestUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: TestCreateManySubjectInputEnvelope
    set?: TestWhereUniqueInput | TestWhereUniqueInput[]
    disconnect?: TestWhereUniqueInput | TestWhereUniqueInput[]
    delete?: TestWhereUniqueInput | TestWhereUniqueInput[]
    connect?: TestWhereUniqueInput | TestWhereUniqueInput[]
    update?: TestUpdateWithWhereUniqueWithoutSubjectInput | TestUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: TestUpdateManyWithWhereWithoutSubjectInput | TestUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: TestScalarWhereInput | TestScalarWhereInput[]
  }

  export type TeacherUncheckedUpdateManyWithoutSubjectsNestedInput = {
    create?: XOR<TeacherCreateWithoutSubjectsInput, TeacherUncheckedCreateWithoutSubjectsInput> | TeacherCreateWithoutSubjectsInput[] | TeacherUncheckedCreateWithoutSubjectsInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutSubjectsInput | TeacherCreateOrConnectWithoutSubjectsInput[]
    upsert?: TeacherUpsertWithWhereUniqueWithoutSubjectsInput | TeacherUpsertWithWhereUniqueWithoutSubjectsInput[]
    set?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    disconnect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    delete?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    update?: TeacherUpdateWithWhereUniqueWithoutSubjectsInput | TeacherUpdateWithWhereUniqueWithoutSubjectsInput[]
    updateMany?: TeacherUpdateManyWithWhereWithoutSubjectsInput | TeacherUpdateManyWithWhereWithoutSubjectsInput[]
    deleteMany?: TeacherScalarWhereInput | TeacherScalarWhereInput[]
  }

  export type AssignmentUncheckedUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<AssignmentCreateWithoutSubjectInput, AssignmentUncheckedCreateWithoutSubjectInput> | AssignmentCreateWithoutSubjectInput[] | AssignmentUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutSubjectInput | AssignmentCreateOrConnectWithoutSubjectInput[]
    upsert?: AssignmentUpsertWithWhereUniqueWithoutSubjectInput | AssignmentUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: AssignmentCreateManySubjectInputEnvelope
    set?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    disconnect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    delete?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    update?: AssignmentUpdateWithWhereUniqueWithoutSubjectInput | AssignmentUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: AssignmentUpdateManyWithWhereWithoutSubjectInput | AssignmentUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
  }

  export type SubjectGradeUncheckedUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<SubjectGradeCreateWithoutSubjectInput, SubjectGradeUncheckedCreateWithoutSubjectInput> | SubjectGradeCreateWithoutSubjectInput[] | SubjectGradeUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: SubjectGradeCreateOrConnectWithoutSubjectInput | SubjectGradeCreateOrConnectWithoutSubjectInput[]
    upsert?: SubjectGradeUpsertWithWhereUniqueWithoutSubjectInput | SubjectGradeUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: SubjectGradeCreateManySubjectInputEnvelope
    set?: SubjectGradeWhereUniqueInput | SubjectGradeWhereUniqueInput[]
    disconnect?: SubjectGradeWhereUniqueInput | SubjectGradeWhereUniqueInput[]
    delete?: SubjectGradeWhereUniqueInput | SubjectGradeWhereUniqueInput[]
    connect?: SubjectGradeWhereUniqueInput | SubjectGradeWhereUniqueInput[]
    update?: SubjectGradeUpdateWithWhereUniqueWithoutSubjectInput | SubjectGradeUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: SubjectGradeUpdateManyWithWhereWithoutSubjectInput | SubjectGradeUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: SubjectGradeScalarWhereInput | SubjectGradeScalarWhereInput[]
  }

  export type TestUncheckedUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<TestCreateWithoutSubjectInput, TestUncheckedCreateWithoutSubjectInput> | TestCreateWithoutSubjectInput[] | TestUncheckedCreateWithoutSubjectInput[]
    connectOrCreate?: TestCreateOrConnectWithoutSubjectInput | TestCreateOrConnectWithoutSubjectInput[]
    upsert?: TestUpsertWithWhereUniqueWithoutSubjectInput | TestUpsertWithWhereUniqueWithoutSubjectInput[]
    createMany?: TestCreateManySubjectInputEnvelope
    set?: TestWhereUniqueInput | TestWhereUniqueInput[]
    disconnect?: TestWhereUniqueInput | TestWhereUniqueInput[]
    delete?: TestWhereUniqueInput | TestWhereUniqueInput[]
    connect?: TestWhereUniqueInput | TestWhereUniqueInput[]
    update?: TestUpdateWithWhereUniqueWithoutSubjectInput | TestUpdateWithWhereUniqueWithoutSubjectInput[]
    updateMany?: TestUpdateManyWithWhereWithoutSubjectInput | TestUpdateManyWithWhereWithoutSubjectInput[]
    deleteMany?: TestScalarWhereInput | TestScalarWhereInput[]
  }

  export type TeacherCreateNestedOneWithoutClassesInput = {
    create?: XOR<TeacherCreateWithoutClassesInput, TeacherUncheckedCreateWithoutClassesInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutClassesInput
    connect?: TeacherWhereUniqueInput
  }

  export type StudentCreateNestedManyWithoutClassInput = {
    create?: XOR<StudentCreateWithoutClassInput, StudentUncheckedCreateWithoutClassInput> | StudentCreateWithoutClassInput[] | StudentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutClassInput | StudentCreateOrConnectWithoutClassInput[]
    createMany?: StudentCreateManyClassInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type ClassGradeCreateNestedManyWithoutClassInput = {
    create?: XOR<ClassGradeCreateWithoutClassInput, ClassGradeUncheckedCreateWithoutClassInput> | ClassGradeCreateWithoutClassInput[] | ClassGradeUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ClassGradeCreateOrConnectWithoutClassInput | ClassGradeCreateOrConnectWithoutClassInput[]
    createMany?: ClassGradeCreateManyClassInputEnvelope
    connect?: ClassGradeWhereUniqueInput | ClassGradeWhereUniqueInput[]
  }

  export type EventCreateNestedManyWithoutClassInput = {
    create?: XOR<EventCreateWithoutClassInput, EventUncheckedCreateWithoutClassInput> | EventCreateWithoutClassInput[] | EventUncheckedCreateWithoutClassInput[]
    connectOrCreate?: EventCreateOrConnectWithoutClassInput | EventCreateOrConnectWithoutClassInput[]
    createMany?: EventCreateManyClassInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type AnnouncementCreateNestedManyWithoutClassInput = {
    create?: XOR<AnnouncementCreateWithoutClassInput, AnnouncementUncheckedCreateWithoutClassInput> | AnnouncementCreateWithoutClassInput[] | AnnouncementUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AnnouncementCreateOrConnectWithoutClassInput | AnnouncementCreateOrConnectWithoutClassInput[]
    createMany?: AnnouncementCreateManyClassInputEnvelope
    connect?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
  }

  export type StudentUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<StudentCreateWithoutClassInput, StudentUncheckedCreateWithoutClassInput> | StudentCreateWithoutClassInput[] | StudentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutClassInput | StudentCreateOrConnectWithoutClassInput[]
    createMany?: StudentCreateManyClassInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type ClassGradeUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<ClassGradeCreateWithoutClassInput, ClassGradeUncheckedCreateWithoutClassInput> | ClassGradeCreateWithoutClassInput[] | ClassGradeUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ClassGradeCreateOrConnectWithoutClassInput | ClassGradeCreateOrConnectWithoutClassInput[]
    createMany?: ClassGradeCreateManyClassInputEnvelope
    connect?: ClassGradeWhereUniqueInput | ClassGradeWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<EventCreateWithoutClassInput, EventUncheckedCreateWithoutClassInput> | EventCreateWithoutClassInput[] | EventUncheckedCreateWithoutClassInput[]
    connectOrCreate?: EventCreateOrConnectWithoutClassInput | EventCreateOrConnectWithoutClassInput[]
    createMany?: EventCreateManyClassInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type AnnouncementUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<AnnouncementCreateWithoutClassInput, AnnouncementUncheckedCreateWithoutClassInput> | AnnouncementCreateWithoutClassInput[] | AnnouncementUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AnnouncementCreateOrConnectWithoutClassInput | AnnouncementCreateOrConnectWithoutClassInput[]
    createMany?: AnnouncementCreateManyClassInputEnvelope
    connect?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TeacherUpdateOneWithoutClassesNestedInput = {
    create?: XOR<TeacherCreateWithoutClassesInput, TeacherUncheckedCreateWithoutClassesInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutClassesInput
    upsert?: TeacherUpsertWithoutClassesInput
    disconnect?: TeacherWhereInput | boolean
    delete?: TeacherWhereInput | boolean
    connect?: TeacherWhereUniqueInput
    update?: XOR<XOR<TeacherUpdateToOneWithWhereWithoutClassesInput, TeacherUpdateWithoutClassesInput>, TeacherUncheckedUpdateWithoutClassesInput>
  }

  export type StudentUpdateManyWithoutClassNestedInput = {
    create?: XOR<StudentCreateWithoutClassInput, StudentUncheckedCreateWithoutClassInput> | StudentCreateWithoutClassInput[] | StudentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutClassInput | StudentCreateOrConnectWithoutClassInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutClassInput | StudentUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: StudentCreateManyClassInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutClassInput | StudentUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutClassInput | StudentUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type ClassGradeUpdateManyWithoutClassNestedInput = {
    create?: XOR<ClassGradeCreateWithoutClassInput, ClassGradeUncheckedCreateWithoutClassInput> | ClassGradeCreateWithoutClassInput[] | ClassGradeUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ClassGradeCreateOrConnectWithoutClassInput | ClassGradeCreateOrConnectWithoutClassInput[]
    upsert?: ClassGradeUpsertWithWhereUniqueWithoutClassInput | ClassGradeUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: ClassGradeCreateManyClassInputEnvelope
    set?: ClassGradeWhereUniqueInput | ClassGradeWhereUniqueInput[]
    disconnect?: ClassGradeWhereUniqueInput | ClassGradeWhereUniqueInput[]
    delete?: ClassGradeWhereUniqueInput | ClassGradeWhereUniqueInput[]
    connect?: ClassGradeWhereUniqueInput | ClassGradeWhereUniqueInput[]
    update?: ClassGradeUpdateWithWhereUniqueWithoutClassInput | ClassGradeUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: ClassGradeUpdateManyWithWhereWithoutClassInput | ClassGradeUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: ClassGradeScalarWhereInput | ClassGradeScalarWhereInput[]
  }

  export type EventUpdateManyWithoutClassNestedInput = {
    create?: XOR<EventCreateWithoutClassInput, EventUncheckedCreateWithoutClassInput> | EventCreateWithoutClassInput[] | EventUncheckedCreateWithoutClassInput[]
    connectOrCreate?: EventCreateOrConnectWithoutClassInput | EventCreateOrConnectWithoutClassInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutClassInput | EventUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: EventCreateManyClassInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutClassInput | EventUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: EventUpdateManyWithWhereWithoutClassInput | EventUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type AnnouncementUpdateManyWithoutClassNestedInput = {
    create?: XOR<AnnouncementCreateWithoutClassInput, AnnouncementUncheckedCreateWithoutClassInput> | AnnouncementCreateWithoutClassInput[] | AnnouncementUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AnnouncementCreateOrConnectWithoutClassInput | AnnouncementCreateOrConnectWithoutClassInput[]
    upsert?: AnnouncementUpsertWithWhereUniqueWithoutClassInput | AnnouncementUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: AnnouncementCreateManyClassInputEnvelope
    set?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    disconnect?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    delete?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    connect?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    update?: AnnouncementUpdateWithWhereUniqueWithoutClassInput | AnnouncementUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: AnnouncementUpdateManyWithWhereWithoutClassInput | AnnouncementUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: AnnouncementScalarWhereInput | AnnouncementScalarWhereInput[]
  }

  export type StudentUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<StudentCreateWithoutClassInput, StudentUncheckedCreateWithoutClassInput> | StudentCreateWithoutClassInput[] | StudentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutClassInput | StudentCreateOrConnectWithoutClassInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutClassInput | StudentUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: StudentCreateManyClassInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutClassInput | StudentUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutClassInput | StudentUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type ClassGradeUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<ClassGradeCreateWithoutClassInput, ClassGradeUncheckedCreateWithoutClassInput> | ClassGradeCreateWithoutClassInput[] | ClassGradeUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ClassGradeCreateOrConnectWithoutClassInput | ClassGradeCreateOrConnectWithoutClassInput[]
    upsert?: ClassGradeUpsertWithWhereUniqueWithoutClassInput | ClassGradeUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: ClassGradeCreateManyClassInputEnvelope
    set?: ClassGradeWhereUniqueInput | ClassGradeWhereUniqueInput[]
    disconnect?: ClassGradeWhereUniqueInput | ClassGradeWhereUniqueInput[]
    delete?: ClassGradeWhereUniqueInput | ClassGradeWhereUniqueInput[]
    connect?: ClassGradeWhereUniqueInput | ClassGradeWhereUniqueInput[]
    update?: ClassGradeUpdateWithWhereUniqueWithoutClassInput | ClassGradeUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: ClassGradeUpdateManyWithWhereWithoutClassInput | ClassGradeUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: ClassGradeScalarWhereInput | ClassGradeScalarWhereInput[]
  }

  export type EventUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<EventCreateWithoutClassInput, EventUncheckedCreateWithoutClassInput> | EventCreateWithoutClassInput[] | EventUncheckedCreateWithoutClassInput[]
    connectOrCreate?: EventCreateOrConnectWithoutClassInput | EventCreateOrConnectWithoutClassInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutClassInput | EventUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: EventCreateManyClassInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutClassInput | EventUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: EventUpdateManyWithWhereWithoutClassInput | EventUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type AnnouncementUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<AnnouncementCreateWithoutClassInput, AnnouncementUncheckedCreateWithoutClassInput> | AnnouncementCreateWithoutClassInput[] | AnnouncementUncheckedCreateWithoutClassInput[]
    connectOrCreate?: AnnouncementCreateOrConnectWithoutClassInput | AnnouncementCreateOrConnectWithoutClassInput[]
    upsert?: AnnouncementUpsertWithWhereUniqueWithoutClassInput | AnnouncementUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: AnnouncementCreateManyClassInputEnvelope
    set?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    disconnect?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    delete?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    connect?: AnnouncementWhereUniqueInput | AnnouncementWhereUniqueInput[]
    update?: AnnouncementUpdateWithWhereUniqueWithoutClassInput | AnnouncementUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: AnnouncementUpdateManyWithWhereWithoutClassInput | AnnouncementUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: AnnouncementScalarWhereInput | AnnouncementScalarWhereInput[]
  }

  export type SchoolCreateNestedOneWithoutPaymentsetupsInput = {
    create?: XOR<SchoolCreateWithoutPaymentsetupsInput, SchoolUncheckedCreateWithoutPaymentsetupsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutPaymentsetupsInput
    connect?: SchoolWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type SchoolUpdateOneRequiredWithoutPaymentsetupsNestedInput = {
    create?: XOR<SchoolCreateWithoutPaymentsetupsInput, SchoolUncheckedCreateWithoutPaymentsetupsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutPaymentsetupsInput
    upsert?: SchoolUpsertWithoutPaymentsetupsInput
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutPaymentsetupsInput, SchoolUpdateWithoutPaymentsetupsInput>, SchoolUncheckedUpdateWithoutPaymentsetupsInput>
  }

  export type EnumTermsFieldUpdateOperationsInput = {
    set?: $Enums.Terms
  }

  export type EnumTermStatusFieldUpdateOperationsInput = {
    set?: $Enums.TermStatus
  }

  export type SchoolCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<SchoolCreateWithoutPaymentsInput, SchoolUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutPaymentsInput
    connect?: SchoolWhereUniqueInput
  }

  export type StudentCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<StudentCreateWithoutPaymentsInput, StudentUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutPaymentsInput
    connect?: StudentWhereUniqueInput
  }

  export type SchoolUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<SchoolCreateWithoutPaymentsInput, SchoolUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutPaymentsInput
    upsert?: SchoolUpsertWithoutPaymentsInput
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutPaymentsInput, SchoolUpdateWithoutPaymentsInput>, SchoolUncheckedUpdateWithoutPaymentsInput>
  }

  export type StudentUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<StudentCreateWithoutPaymentsInput, StudentUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutPaymentsInput
    upsert?: StudentUpsertWithoutPaymentsInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutPaymentsInput, StudentUpdateWithoutPaymentsInput>, StudentUncheckedUpdateWithoutPaymentsInput>
  }

  export type SubjectCreateNestedOneWithoutAssignmentsInput = {
    create?: XOR<SubjectCreateWithoutAssignmentsInput, SubjectUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutAssignmentsInput
    connect?: SubjectWhereUniqueInput
  }

  export type TeacherCreateNestedOneWithoutAssignmentsInput = {
    create?: XOR<TeacherCreateWithoutAssignmentsInput, TeacherUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutAssignmentsInput
    connect?: TeacherWhereUniqueInput
  }

  export type SubmissionCreateNestedManyWithoutAssignmentInput = {
    create?: XOR<SubmissionCreateWithoutAssignmentInput, SubmissionUncheckedCreateWithoutAssignmentInput> | SubmissionCreateWithoutAssignmentInput[] | SubmissionUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutAssignmentInput | SubmissionCreateOrConnectWithoutAssignmentInput[]
    createMany?: SubmissionCreateManyAssignmentInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type StudentCreateNestedManyWithoutAssignmentsInput = {
    create?: XOR<StudentCreateWithoutAssignmentsInput, StudentUncheckedCreateWithoutAssignmentsInput> | StudentCreateWithoutAssignmentsInput[] | StudentUncheckedCreateWithoutAssignmentsInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutAssignmentsInput | StudentCreateOrConnectWithoutAssignmentsInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type SubmissionUncheckedCreateNestedManyWithoutAssignmentInput = {
    create?: XOR<SubmissionCreateWithoutAssignmentInput, SubmissionUncheckedCreateWithoutAssignmentInput> | SubmissionCreateWithoutAssignmentInput[] | SubmissionUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutAssignmentInput | SubmissionCreateOrConnectWithoutAssignmentInput[]
    createMany?: SubmissionCreateManyAssignmentInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type StudentUncheckedCreateNestedManyWithoutAssignmentsInput = {
    create?: XOR<StudentCreateWithoutAssignmentsInput, StudentUncheckedCreateWithoutAssignmentsInput> | StudentCreateWithoutAssignmentsInput[] | StudentUncheckedCreateWithoutAssignmentsInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutAssignmentsInput | StudentCreateOrConnectWithoutAssignmentsInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type SubjectUpdateOneRequiredWithoutAssignmentsNestedInput = {
    create?: XOR<SubjectCreateWithoutAssignmentsInput, SubjectUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutAssignmentsInput
    upsert?: SubjectUpsertWithoutAssignmentsInput
    connect?: SubjectWhereUniqueInput
    update?: XOR<XOR<SubjectUpdateToOneWithWhereWithoutAssignmentsInput, SubjectUpdateWithoutAssignmentsInput>, SubjectUncheckedUpdateWithoutAssignmentsInput>
  }

  export type TeacherUpdateOneRequiredWithoutAssignmentsNestedInput = {
    create?: XOR<TeacherCreateWithoutAssignmentsInput, TeacherUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutAssignmentsInput
    upsert?: TeacherUpsertWithoutAssignmentsInput
    connect?: TeacherWhereUniqueInput
    update?: XOR<XOR<TeacherUpdateToOneWithWhereWithoutAssignmentsInput, TeacherUpdateWithoutAssignmentsInput>, TeacherUncheckedUpdateWithoutAssignmentsInput>
  }

  export type SubmissionUpdateManyWithoutAssignmentNestedInput = {
    create?: XOR<SubmissionCreateWithoutAssignmentInput, SubmissionUncheckedCreateWithoutAssignmentInput> | SubmissionCreateWithoutAssignmentInput[] | SubmissionUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutAssignmentInput | SubmissionCreateOrConnectWithoutAssignmentInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutAssignmentInput | SubmissionUpsertWithWhereUniqueWithoutAssignmentInput[]
    createMany?: SubmissionCreateManyAssignmentInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutAssignmentInput | SubmissionUpdateWithWhereUniqueWithoutAssignmentInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutAssignmentInput | SubmissionUpdateManyWithWhereWithoutAssignmentInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type StudentUpdateManyWithoutAssignmentsNestedInput = {
    create?: XOR<StudentCreateWithoutAssignmentsInput, StudentUncheckedCreateWithoutAssignmentsInput> | StudentCreateWithoutAssignmentsInput[] | StudentUncheckedCreateWithoutAssignmentsInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutAssignmentsInput | StudentCreateOrConnectWithoutAssignmentsInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutAssignmentsInput | StudentUpsertWithWhereUniqueWithoutAssignmentsInput[]
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutAssignmentsInput | StudentUpdateWithWhereUniqueWithoutAssignmentsInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutAssignmentsInput | StudentUpdateManyWithWhereWithoutAssignmentsInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type SubmissionUncheckedUpdateManyWithoutAssignmentNestedInput = {
    create?: XOR<SubmissionCreateWithoutAssignmentInput, SubmissionUncheckedCreateWithoutAssignmentInput> | SubmissionCreateWithoutAssignmentInput[] | SubmissionUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutAssignmentInput | SubmissionCreateOrConnectWithoutAssignmentInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutAssignmentInput | SubmissionUpsertWithWhereUniqueWithoutAssignmentInput[]
    createMany?: SubmissionCreateManyAssignmentInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutAssignmentInput | SubmissionUpdateWithWhereUniqueWithoutAssignmentInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutAssignmentInput | SubmissionUpdateManyWithWhereWithoutAssignmentInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type StudentUncheckedUpdateManyWithoutAssignmentsNestedInput = {
    create?: XOR<StudentCreateWithoutAssignmentsInput, StudentUncheckedCreateWithoutAssignmentsInput> | StudentCreateWithoutAssignmentsInput[] | StudentUncheckedCreateWithoutAssignmentsInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutAssignmentsInput | StudentCreateOrConnectWithoutAssignmentsInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutAssignmentsInput | StudentUpsertWithWhereUniqueWithoutAssignmentsInput[]
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutAssignmentsInput | StudentUpdateWithWhereUniqueWithoutAssignmentsInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutAssignmentsInput | StudentUpdateManyWithWhereWithoutAssignmentsInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type QuestionCreateNestedManyWithoutTestInput = {
    create?: XOR<QuestionCreateWithoutTestInput, QuestionUncheckedCreateWithoutTestInput> | QuestionCreateWithoutTestInput[] | QuestionUncheckedCreateWithoutTestInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutTestInput | QuestionCreateOrConnectWithoutTestInput[]
    createMany?: QuestionCreateManyTestInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type AnswerCreateNestedManyWithoutTestInput = {
    create?: XOR<AnswerCreateWithoutTestInput, AnswerUncheckedCreateWithoutTestInput> | AnswerCreateWithoutTestInput[] | AnswerUncheckedCreateWithoutTestInput[]
    connectOrCreate?: AnswerCreateOrConnectWithoutTestInput | AnswerCreateOrConnectWithoutTestInput[]
    createMany?: AnswerCreateManyTestInputEnvelope
    connect?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
  }

  export type SubjectCreateNestedOneWithoutTestsInput = {
    create?: XOR<SubjectCreateWithoutTestsInput, SubjectUncheckedCreateWithoutTestsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutTestsInput
    connect?: SubjectWhereUniqueInput
  }

  export type TeacherCreateNestedOneWithoutTestsInput = {
    create?: XOR<TeacherCreateWithoutTestsInput, TeacherUncheckedCreateWithoutTestsInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutTestsInput
    connect?: TeacherWhereUniqueInput
  }

  export type QuestionUncheckedCreateNestedManyWithoutTestInput = {
    create?: XOR<QuestionCreateWithoutTestInput, QuestionUncheckedCreateWithoutTestInput> | QuestionCreateWithoutTestInput[] | QuestionUncheckedCreateWithoutTestInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutTestInput | QuestionCreateOrConnectWithoutTestInput[]
    createMany?: QuestionCreateManyTestInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type AnswerUncheckedCreateNestedManyWithoutTestInput = {
    create?: XOR<AnswerCreateWithoutTestInput, AnswerUncheckedCreateWithoutTestInput> | AnswerCreateWithoutTestInput[] | AnswerUncheckedCreateWithoutTestInput[]
    connectOrCreate?: AnswerCreateOrConnectWithoutTestInput | AnswerCreateOrConnectWithoutTestInput[]
    createMany?: AnswerCreateManyTestInputEnvelope
    connect?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
  }

  export type EnumTestStatusFieldUpdateOperationsInput = {
    set?: $Enums.TestStatus
  }

  export type QuestionUpdateManyWithoutTestNestedInput = {
    create?: XOR<QuestionCreateWithoutTestInput, QuestionUncheckedCreateWithoutTestInput> | QuestionCreateWithoutTestInput[] | QuestionUncheckedCreateWithoutTestInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutTestInput | QuestionCreateOrConnectWithoutTestInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutTestInput | QuestionUpsertWithWhereUniqueWithoutTestInput[]
    createMany?: QuestionCreateManyTestInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutTestInput | QuestionUpdateWithWhereUniqueWithoutTestInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutTestInput | QuestionUpdateManyWithWhereWithoutTestInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type AnswerUpdateManyWithoutTestNestedInput = {
    create?: XOR<AnswerCreateWithoutTestInput, AnswerUncheckedCreateWithoutTestInput> | AnswerCreateWithoutTestInput[] | AnswerUncheckedCreateWithoutTestInput[]
    connectOrCreate?: AnswerCreateOrConnectWithoutTestInput | AnswerCreateOrConnectWithoutTestInput[]
    upsert?: AnswerUpsertWithWhereUniqueWithoutTestInput | AnswerUpsertWithWhereUniqueWithoutTestInput[]
    createMany?: AnswerCreateManyTestInputEnvelope
    set?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
    disconnect?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
    delete?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
    connect?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
    update?: AnswerUpdateWithWhereUniqueWithoutTestInput | AnswerUpdateWithWhereUniqueWithoutTestInput[]
    updateMany?: AnswerUpdateManyWithWhereWithoutTestInput | AnswerUpdateManyWithWhereWithoutTestInput[]
    deleteMany?: AnswerScalarWhereInput | AnswerScalarWhereInput[]
  }

  export type SubjectUpdateOneRequiredWithoutTestsNestedInput = {
    create?: XOR<SubjectCreateWithoutTestsInput, SubjectUncheckedCreateWithoutTestsInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutTestsInput
    upsert?: SubjectUpsertWithoutTestsInput
    connect?: SubjectWhereUniqueInput
    update?: XOR<XOR<SubjectUpdateToOneWithWhereWithoutTestsInput, SubjectUpdateWithoutTestsInput>, SubjectUncheckedUpdateWithoutTestsInput>
  }

  export type TeacherUpdateOneRequiredWithoutTestsNestedInput = {
    create?: XOR<TeacherCreateWithoutTestsInput, TeacherUncheckedCreateWithoutTestsInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutTestsInput
    upsert?: TeacherUpsertWithoutTestsInput
    connect?: TeacherWhereUniqueInput
    update?: XOR<XOR<TeacherUpdateToOneWithWhereWithoutTestsInput, TeacherUpdateWithoutTestsInput>, TeacherUncheckedUpdateWithoutTestsInput>
  }

  export type QuestionUncheckedUpdateManyWithoutTestNestedInput = {
    create?: XOR<QuestionCreateWithoutTestInput, QuestionUncheckedCreateWithoutTestInput> | QuestionCreateWithoutTestInput[] | QuestionUncheckedCreateWithoutTestInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutTestInput | QuestionCreateOrConnectWithoutTestInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutTestInput | QuestionUpsertWithWhereUniqueWithoutTestInput[]
    createMany?: QuestionCreateManyTestInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutTestInput | QuestionUpdateWithWhereUniqueWithoutTestInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutTestInput | QuestionUpdateManyWithWhereWithoutTestInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type AnswerUncheckedUpdateManyWithoutTestNestedInput = {
    create?: XOR<AnswerCreateWithoutTestInput, AnswerUncheckedCreateWithoutTestInput> | AnswerCreateWithoutTestInput[] | AnswerUncheckedCreateWithoutTestInput[]
    connectOrCreate?: AnswerCreateOrConnectWithoutTestInput | AnswerCreateOrConnectWithoutTestInput[]
    upsert?: AnswerUpsertWithWhereUniqueWithoutTestInput | AnswerUpsertWithWhereUniqueWithoutTestInput[]
    createMany?: AnswerCreateManyTestInputEnvelope
    set?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
    disconnect?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
    delete?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
    connect?: AnswerWhereUniqueInput | AnswerWhereUniqueInput[]
    update?: AnswerUpdateWithWhereUniqueWithoutTestInput | AnswerUpdateWithWhereUniqueWithoutTestInput[]
    updateMany?: AnswerUpdateManyWithWhereWithoutTestInput | AnswerUpdateManyWithWhereWithoutTestInput[]
    deleteMany?: AnswerScalarWhereInput | AnswerScalarWhereInput[]
  }

  export type TestCreateNestedOneWithoutQuestionsInput = {
    create?: XOR<TestCreateWithoutQuestionsInput, TestUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: TestCreateOrConnectWithoutQuestionsInput
    connect?: TestWhereUniqueInput
  }

  export type TestUpdateOneRequiredWithoutQuestionsNestedInput = {
    create?: XOR<TestCreateWithoutQuestionsInput, TestUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: TestCreateOrConnectWithoutQuestionsInput
    upsert?: TestUpsertWithoutQuestionsInput
    connect?: TestWhereUniqueInput
    update?: XOR<XOR<TestUpdateToOneWithWhereWithoutQuestionsInput, TestUpdateWithoutQuestionsInput>, TestUncheckedUpdateWithoutQuestionsInput>
  }

  export type TestCreateNestedOneWithoutAnswersInput = {
    create?: XOR<TestCreateWithoutAnswersInput, TestUncheckedCreateWithoutAnswersInput>
    connectOrCreate?: TestCreateOrConnectWithoutAnswersInput
    connect?: TestWhereUniqueInput
  }

  export type StudentCreateNestedOneWithoutAnswersInput = {
    create?: XOR<StudentCreateWithoutAnswersInput, StudentUncheckedCreateWithoutAnswersInput>
    connectOrCreate?: StudentCreateOrConnectWithoutAnswersInput
    connect?: StudentWhereUniqueInput
  }

  export type TestUpdateOneRequiredWithoutAnswersNestedInput = {
    create?: XOR<TestCreateWithoutAnswersInput, TestUncheckedCreateWithoutAnswersInput>
    connectOrCreate?: TestCreateOrConnectWithoutAnswersInput
    upsert?: TestUpsertWithoutAnswersInput
    connect?: TestWhereUniqueInput
    update?: XOR<XOR<TestUpdateToOneWithWhereWithoutAnswersInput, TestUpdateWithoutAnswersInput>, TestUncheckedUpdateWithoutAnswersInput>
  }

  export type StudentUpdateOneRequiredWithoutAnswersNestedInput = {
    create?: XOR<StudentCreateWithoutAnswersInput, StudentUncheckedCreateWithoutAnswersInput>
    connectOrCreate?: StudentCreateOrConnectWithoutAnswersInput
    upsert?: StudentUpsertWithoutAnswersInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutAnswersInput, StudentUpdateWithoutAnswersInput>, StudentUncheckedUpdateWithoutAnswersInput>
  }

  export type AssignmentCreateNestedOneWithoutSubmissionsInput = {
    create?: XOR<AssignmentCreateWithoutSubmissionsInput, AssignmentUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: AssignmentCreateOrConnectWithoutSubmissionsInput
    connect?: AssignmentWhereUniqueInput
  }

  export type StudentCreateNestedOneWithoutSubmissionsInput = {
    create?: XOR<StudentCreateWithoutSubmissionsInput, StudentUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutSubmissionsInput
    connect?: StudentWhereUniqueInput
  }

  export type AssignmentUpdateOneWithoutSubmissionsNestedInput = {
    create?: XOR<AssignmentCreateWithoutSubmissionsInput, AssignmentUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: AssignmentCreateOrConnectWithoutSubmissionsInput
    upsert?: AssignmentUpsertWithoutSubmissionsInput
    disconnect?: AssignmentWhereInput | boolean
    delete?: AssignmentWhereInput | boolean
    connect?: AssignmentWhereUniqueInput
    update?: XOR<XOR<AssignmentUpdateToOneWithWhereWithoutSubmissionsInput, AssignmentUpdateWithoutSubmissionsInput>, AssignmentUncheckedUpdateWithoutSubmissionsInput>
  }

  export type StudentUpdateOneRequiredWithoutSubmissionsNestedInput = {
    create?: XOR<StudentCreateWithoutSubmissionsInput, StudentUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutSubmissionsInput
    upsert?: StudentUpsertWithoutSubmissionsInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutSubmissionsInput, StudentUpdateWithoutSubmissionsInput>, StudentUncheckedUpdateWithoutSubmissionsInput>
  }

  export type ClassGradeCreateNestedManyWithoutGradeInput = {
    create?: XOR<ClassGradeCreateWithoutGradeInput, ClassGradeUncheckedCreateWithoutGradeInput> | ClassGradeCreateWithoutGradeInput[] | ClassGradeUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: ClassGradeCreateOrConnectWithoutGradeInput | ClassGradeCreateOrConnectWithoutGradeInput[]
    createMany?: ClassGradeCreateManyGradeInputEnvelope
    connect?: ClassGradeWhereUniqueInput | ClassGradeWhereUniqueInput[]
  }

  export type EffectiveDomainCreateNestedManyWithoutGradeInput = {
    create?: XOR<EffectiveDomainCreateWithoutGradeInput, EffectiveDomainUncheckedCreateWithoutGradeInput> | EffectiveDomainCreateWithoutGradeInput[] | EffectiveDomainUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: EffectiveDomainCreateOrConnectWithoutGradeInput | EffectiveDomainCreateOrConnectWithoutGradeInput[]
    createMany?: EffectiveDomainCreateManyGradeInputEnvelope
    connect?: EffectiveDomainWhereUniqueInput | EffectiveDomainWhereUniqueInput[]
  }

  export type PsychomotiveDomainCreateNestedManyWithoutGradeInput = {
    create?: XOR<PsychomotiveDomainCreateWithoutGradeInput, PsychomotiveDomainUncheckedCreateWithoutGradeInput> | PsychomotiveDomainCreateWithoutGradeInput[] | PsychomotiveDomainUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: PsychomotiveDomainCreateOrConnectWithoutGradeInput | PsychomotiveDomainCreateOrConnectWithoutGradeInput[]
    createMany?: PsychomotiveDomainCreateManyGradeInputEnvelope
    connect?: PsychomotiveDomainWhereUniqueInput | PsychomotiveDomainWhereUniqueInput[]
  }

  export type ClassGradeUncheckedCreateNestedManyWithoutGradeInput = {
    create?: XOR<ClassGradeCreateWithoutGradeInput, ClassGradeUncheckedCreateWithoutGradeInput> | ClassGradeCreateWithoutGradeInput[] | ClassGradeUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: ClassGradeCreateOrConnectWithoutGradeInput | ClassGradeCreateOrConnectWithoutGradeInput[]
    createMany?: ClassGradeCreateManyGradeInputEnvelope
    connect?: ClassGradeWhereUniqueInput | ClassGradeWhereUniqueInput[]
  }

  export type EffectiveDomainUncheckedCreateNestedManyWithoutGradeInput = {
    create?: XOR<EffectiveDomainCreateWithoutGradeInput, EffectiveDomainUncheckedCreateWithoutGradeInput> | EffectiveDomainCreateWithoutGradeInput[] | EffectiveDomainUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: EffectiveDomainCreateOrConnectWithoutGradeInput | EffectiveDomainCreateOrConnectWithoutGradeInput[]
    createMany?: EffectiveDomainCreateManyGradeInputEnvelope
    connect?: EffectiveDomainWhereUniqueInput | EffectiveDomainWhereUniqueInput[]
  }

  export type PsychomotiveDomainUncheckedCreateNestedManyWithoutGradeInput = {
    create?: XOR<PsychomotiveDomainCreateWithoutGradeInput, PsychomotiveDomainUncheckedCreateWithoutGradeInput> | PsychomotiveDomainCreateWithoutGradeInput[] | PsychomotiveDomainUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: PsychomotiveDomainCreateOrConnectWithoutGradeInput | PsychomotiveDomainCreateOrConnectWithoutGradeInput[]
    createMany?: PsychomotiveDomainCreateManyGradeInputEnvelope
    connect?: PsychomotiveDomainWhereUniqueInput | PsychomotiveDomainWhereUniqueInput[]
  }

  export type ClassGradeUpdateManyWithoutGradeNestedInput = {
    create?: XOR<ClassGradeCreateWithoutGradeInput, ClassGradeUncheckedCreateWithoutGradeInput> | ClassGradeCreateWithoutGradeInput[] | ClassGradeUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: ClassGradeCreateOrConnectWithoutGradeInput | ClassGradeCreateOrConnectWithoutGradeInput[]
    upsert?: ClassGradeUpsertWithWhereUniqueWithoutGradeInput | ClassGradeUpsertWithWhereUniqueWithoutGradeInput[]
    createMany?: ClassGradeCreateManyGradeInputEnvelope
    set?: ClassGradeWhereUniqueInput | ClassGradeWhereUniqueInput[]
    disconnect?: ClassGradeWhereUniqueInput | ClassGradeWhereUniqueInput[]
    delete?: ClassGradeWhereUniqueInput | ClassGradeWhereUniqueInput[]
    connect?: ClassGradeWhereUniqueInput | ClassGradeWhereUniqueInput[]
    update?: ClassGradeUpdateWithWhereUniqueWithoutGradeInput | ClassGradeUpdateWithWhereUniqueWithoutGradeInput[]
    updateMany?: ClassGradeUpdateManyWithWhereWithoutGradeInput | ClassGradeUpdateManyWithWhereWithoutGradeInput[]
    deleteMany?: ClassGradeScalarWhereInput | ClassGradeScalarWhereInput[]
  }

  export type EffectiveDomainUpdateManyWithoutGradeNestedInput = {
    create?: XOR<EffectiveDomainCreateWithoutGradeInput, EffectiveDomainUncheckedCreateWithoutGradeInput> | EffectiveDomainCreateWithoutGradeInput[] | EffectiveDomainUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: EffectiveDomainCreateOrConnectWithoutGradeInput | EffectiveDomainCreateOrConnectWithoutGradeInput[]
    upsert?: EffectiveDomainUpsertWithWhereUniqueWithoutGradeInput | EffectiveDomainUpsertWithWhereUniqueWithoutGradeInput[]
    createMany?: EffectiveDomainCreateManyGradeInputEnvelope
    set?: EffectiveDomainWhereUniqueInput | EffectiveDomainWhereUniqueInput[]
    disconnect?: EffectiveDomainWhereUniqueInput | EffectiveDomainWhereUniqueInput[]
    delete?: EffectiveDomainWhereUniqueInput | EffectiveDomainWhereUniqueInput[]
    connect?: EffectiveDomainWhereUniqueInput | EffectiveDomainWhereUniqueInput[]
    update?: EffectiveDomainUpdateWithWhereUniqueWithoutGradeInput | EffectiveDomainUpdateWithWhereUniqueWithoutGradeInput[]
    updateMany?: EffectiveDomainUpdateManyWithWhereWithoutGradeInput | EffectiveDomainUpdateManyWithWhereWithoutGradeInput[]
    deleteMany?: EffectiveDomainScalarWhereInput | EffectiveDomainScalarWhereInput[]
  }

  export type PsychomotiveDomainUpdateManyWithoutGradeNestedInput = {
    create?: XOR<PsychomotiveDomainCreateWithoutGradeInput, PsychomotiveDomainUncheckedCreateWithoutGradeInput> | PsychomotiveDomainCreateWithoutGradeInput[] | PsychomotiveDomainUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: PsychomotiveDomainCreateOrConnectWithoutGradeInput | PsychomotiveDomainCreateOrConnectWithoutGradeInput[]
    upsert?: PsychomotiveDomainUpsertWithWhereUniqueWithoutGradeInput | PsychomotiveDomainUpsertWithWhereUniqueWithoutGradeInput[]
    createMany?: PsychomotiveDomainCreateManyGradeInputEnvelope
    set?: PsychomotiveDomainWhereUniqueInput | PsychomotiveDomainWhereUniqueInput[]
    disconnect?: PsychomotiveDomainWhereUniqueInput | PsychomotiveDomainWhereUniqueInput[]
    delete?: PsychomotiveDomainWhereUniqueInput | PsychomotiveDomainWhereUniqueInput[]
    connect?: PsychomotiveDomainWhereUniqueInput | PsychomotiveDomainWhereUniqueInput[]
    update?: PsychomotiveDomainUpdateWithWhereUniqueWithoutGradeInput | PsychomotiveDomainUpdateWithWhereUniqueWithoutGradeInput[]
    updateMany?: PsychomotiveDomainUpdateManyWithWhereWithoutGradeInput | PsychomotiveDomainUpdateManyWithWhereWithoutGradeInput[]
    deleteMany?: PsychomotiveDomainScalarWhereInput | PsychomotiveDomainScalarWhereInput[]
  }

  export type ClassGradeUncheckedUpdateManyWithoutGradeNestedInput = {
    create?: XOR<ClassGradeCreateWithoutGradeInput, ClassGradeUncheckedCreateWithoutGradeInput> | ClassGradeCreateWithoutGradeInput[] | ClassGradeUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: ClassGradeCreateOrConnectWithoutGradeInput | ClassGradeCreateOrConnectWithoutGradeInput[]
    upsert?: ClassGradeUpsertWithWhereUniqueWithoutGradeInput | ClassGradeUpsertWithWhereUniqueWithoutGradeInput[]
    createMany?: ClassGradeCreateManyGradeInputEnvelope
    set?: ClassGradeWhereUniqueInput | ClassGradeWhereUniqueInput[]
    disconnect?: ClassGradeWhereUniqueInput | ClassGradeWhereUniqueInput[]
    delete?: ClassGradeWhereUniqueInput | ClassGradeWhereUniqueInput[]
    connect?: ClassGradeWhereUniqueInput | ClassGradeWhereUniqueInput[]
    update?: ClassGradeUpdateWithWhereUniqueWithoutGradeInput | ClassGradeUpdateWithWhereUniqueWithoutGradeInput[]
    updateMany?: ClassGradeUpdateManyWithWhereWithoutGradeInput | ClassGradeUpdateManyWithWhereWithoutGradeInput[]
    deleteMany?: ClassGradeScalarWhereInput | ClassGradeScalarWhereInput[]
  }

  export type EffectiveDomainUncheckedUpdateManyWithoutGradeNestedInput = {
    create?: XOR<EffectiveDomainCreateWithoutGradeInput, EffectiveDomainUncheckedCreateWithoutGradeInput> | EffectiveDomainCreateWithoutGradeInput[] | EffectiveDomainUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: EffectiveDomainCreateOrConnectWithoutGradeInput | EffectiveDomainCreateOrConnectWithoutGradeInput[]
    upsert?: EffectiveDomainUpsertWithWhereUniqueWithoutGradeInput | EffectiveDomainUpsertWithWhereUniqueWithoutGradeInput[]
    createMany?: EffectiveDomainCreateManyGradeInputEnvelope
    set?: EffectiveDomainWhereUniqueInput | EffectiveDomainWhereUniqueInput[]
    disconnect?: EffectiveDomainWhereUniqueInput | EffectiveDomainWhereUniqueInput[]
    delete?: EffectiveDomainWhereUniqueInput | EffectiveDomainWhereUniqueInput[]
    connect?: EffectiveDomainWhereUniqueInput | EffectiveDomainWhereUniqueInput[]
    update?: EffectiveDomainUpdateWithWhereUniqueWithoutGradeInput | EffectiveDomainUpdateWithWhereUniqueWithoutGradeInput[]
    updateMany?: EffectiveDomainUpdateManyWithWhereWithoutGradeInput | EffectiveDomainUpdateManyWithWhereWithoutGradeInput[]
    deleteMany?: EffectiveDomainScalarWhereInput | EffectiveDomainScalarWhereInput[]
  }

  export type PsychomotiveDomainUncheckedUpdateManyWithoutGradeNestedInput = {
    create?: XOR<PsychomotiveDomainCreateWithoutGradeInput, PsychomotiveDomainUncheckedCreateWithoutGradeInput> | PsychomotiveDomainCreateWithoutGradeInput[] | PsychomotiveDomainUncheckedCreateWithoutGradeInput[]
    connectOrCreate?: PsychomotiveDomainCreateOrConnectWithoutGradeInput | PsychomotiveDomainCreateOrConnectWithoutGradeInput[]
    upsert?: PsychomotiveDomainUpsertWithWhereUniqueWithoutGradeInput | PsychomotiveDomainUpsertWithWhereUniqueWithoutGradeInput[]
    createMany?: PsychomotiveDomainCreateManyGradeInputEnvelope
    set?: PsychomotiveDomainWhereUniqueInput | PsychomotiveDomainWhereUniqueInput[]
    disconnect?: PsychomotiveDomainWhereUniqueInput | PsychomotiveDomainWhereUniqueInput[]
    delete?: PsychomotiveDomainWhereUniqueInput | PsychomotiveDomainWhereUniqueInput[]
    connect?: PsychomotiveDomainWhereUniqueInput | PsychomotiveDomainWhereUniqueInput[]
    update?: PsychomotiveDomainUpdateWithWhereUniqueWithoutGradeInput | PsychomotiveDomainUpdateWithWhereUniqueWithoutGradeInput[]
    updateMany?: PsychomotiveDomainUpdateManyWithWhereWithoutGradeInput | PsychomotiveDomainUpdateManyWithWhereWithoutGradeInput[]
    deleteMany?: PsychomotiveDomainScalarWhereInput | PsychomotiveDomainScalarWhereInput[]
  }

  export type ClassCreateNestedOneWithoutGradingsInput = {
    create?: XOR<ClassCreateWithoutGradingsInput, ClassUncheckedCreateWithoutGradingsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutGradingsInput
    connect?: ClassWhereUniqueInput
  }

  export type GradeCreateNestedOneWithoutGradingsInput = {
    create?: XOR<GradeCreateWithoutGradingsInput, GradeUncheckedCreateWithoutGradingsInput>
    connectOrCreate?: GradeCreateOrConnectWithoutGradingsInput
    connect?: GradeWhereUniqueInput
  }

  export type SubjectGradeCreateNestedManyWithoutClassInput = {
    create?: XOR<SubjectGradeCreateWithoutClassInput, SubjectGradeUncheckedCreateWithoutClassInput> | SubjectGradeCreateWithoutClassInput[] | SubjectGradeUncheckedCreateWithoutClassInput[]
    connectOrCreate?: SubjectGradeCreateOrConnectWithoutClassInput | SubjectGradeCreateOrConnectWithoutClassInput[]
    createMany?: SubjectGradeCreateManyClassInputEnvelope
    connect?: SubjectGradeWhereUniqueInput | SubjectGradeWhereUniqueInput[]
  }

  export type SubjectGradeUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<SubjectGradeCreateWithoutClassInput, SubjectGradeUncheckedCreateWithoutClassInput> | SubjectGradeCreateWithoutClassInput[] | SubjectGradeUncheckedCreateWithoutClassInput[]
    connectOrCreate?: SubjectGradeCreateOrConnectWithoutClassInput | SubjectGradeCreateOrConnectWithoutClassInput[]
    createMany?: SubjectGradeCreateManyClassInputEnvelope
    connect?: SubjectGradeWhereUniqueInput | SubjectGradeWhereUniqueInput[]
  }

  export type ClassUpdateOneRequiredWithoutGradingsNestedInput = {
    create?: XOR<ClassCreateWithoutGradingsInput, ClassUncheckedCreateWithoutGradingsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutGradingsInput
    upsert?: ClassUpsertWithoutGradingsInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutGradingsInput, ClassUpdateWithoutGradingsInput>, ClassUncheckedUpdateWithoutGradingsInput>
  }

  export type GradeUpdateOneRequiredWithoutGradingsNestedInput = {
    create?: XOR<GradeCreateWithoutGradingsInput, GradeUncheckedCreateWithoutGradingsInput>
    connectOrCreate?: GradeCreateOrConnectWithoutGradingsInput
    upsert?: GradeUpsertWithoutGradingsInput
    connect?: GradeWhereUniqueInput
    update?: XOR<XOR<GradeUpdateToOneWithWhereWithoutGradingsInput, GradeUpdateWithoutGradingsInput>, GradeUncheckedUpdateWithoutGradingsInput>
  }

  export type SubjectGradeUpdateManyWithoutClassNestedInput = {
    create?: XOR<SubjectGradeCreateWithoutClassInput, SubjectGradeUncheckedCreateWithoutClassInput> | SubjectGradeCreateWithoutClassInput[] | SubjectGradeUncheckedCreateWithoutClassInput[]
    connectOrCreate?: SubjectGradeCreateOrConnectWithoutClassInput | SubjectGradeCreateOrConnectWithoutClassInput[]
    upsert?: SubjectGradeUpsertWithWhereUniqueWithoutClassInput | SubjectGradeUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: SubjectGradeCreateManyClassInputEnvelope
    set?: SubjectGradeWhereUniqueInput | SubjectGradeWhereUniqueInput[]
    disconnect?: SubjectGradeWhereUniqueInput | SubjectGradeWhereUniqueInput[]
    delete?: SubjectGradeWhereUniqueInput | SubjectGradeWhereUniqueInput[]
    connect?: SubjectGradeWhereUniqueInput | SubjectGradeWhereUniqueInput[]
    update?: SubjectGradeUpdateWithWhereUniqueWithoutClassInput | SubjectGradeUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: SubjectGradeUpdateManyWithWhereWithoutClassInput | SubjectGradeUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: SubjectGradeScalarWhereInput | SubjectGradeScalarWhereInput[]
  }

  export type SubjectGradeUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<SubjectGradeCreateWithoutClassInput, SubjectGradeUncheckedCreateWithoutClassInput> | SubjectGradeCreateWithoutClassInput[] | SubjectGradeUncheckedCreateWithoutClassInput[]
    connectOrCreate?: SubjectGradeCreateOrConnectWithoutClassInput | SubjectGradeCreateOrConnectWithoutClassInput[]
    upsert?: SubjectGradeUpsertWithWhereUniqueWithoutClassInput | SubjectGradeUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: SubjectGradeCreateManyClassInputEnvelope
    set?: SubjectGradeWhereUniqueInput | SubjectGradeWhereUniqueInput[]
    disconnect?: SubjectGradeWhereUniqueInput | SubjectGradeWhereUniqueInput[]
    delete?: SubjectGradeWhereUniqueInput | SubjectGradeWhereUniqueInput[]
    connect?: SubjectGradeWhereUniqueInput | SubjectGradeWhereUniqueInput[]
    update?: SubjectGradeUpdateWithWhereUniqueWithoutClassInput | SubjectGradeUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: SubjectGradeUpdateManyWithWhereWithoutClassInput | SubjectGradeUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: SubjectGradeScalarWhereInput | SubjectGradeScalarWhereInput[]
  }

  export type SubjectCreateNestedOneWithoutGradesInput = {
    create?: XOR<SubjectCreateWithoutGradesInput, SubjectUncheckedCreateWithoutGradesInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutGradesInput
    connect?: SubjectWhereUniqueInput
  }

  export type ClassGradeCreateNestedOneWithoutSubjectsInput = {
    create?: XOR<ClassGradeCreateWithoutSubjectsInput, ClassGradeUncheckedCreateWithoutSubjectsInput>
    connectOrCreate?: ClassGradeCreateOrConnectWithoutSubjectsInput
    connect?: ClassGradeWhereUniqueInput
  }

  export type StudentGradeCreateNestedManyWithoutSubjectGradeInput = {
    create?: XOR<StudentGradeCreateWithoutSubjectGradeInput, StudentGradeUncheckedCreateWithoutSubjectGradeInput> | StudentGradeCreateWithoutSubjectGradeInput[] | StudentGradeUncheckedCreateWithoutSubjectGradeInput[]
    connectOrCreate?: StudentGradeCreateOrConnectWithoutSubjectGradeInput | StudentGradeCreateOrConnectWithoutSubjectGradeInput[]
    createMany?: StudentGradeCreateManySubjectGradeInputEnvelope
    connect?: StudentGradeWhereUniqueInput | StudentGradeWhereUniqueInput[]
  }

  export type StudentGradeUncheckedCreateNestedManyWithoutSubjectGradeInput = {
    create?: XOR<StudentGradeCreateWithoutSubjectGradeInput, StudentGradeUncheckedCreateWithoutSubjectGradeInput> | StudentGradeCreateWithoutSubjectGradeInput[] | StudentGradeUncheckedCreateWithoutSubjectGradeInput[]
    connectOrCreate?: StudentGradeCreateOrConnectWithoutSubjectGradeInput | StudentGradeCreateOrConnectWithoutSubjectGradeInput[]
    createMany?: StudentGradeCreateManySubjectGradeInputEnvelope
    connect?: StudentGradeWhereUniqueInput | StudentGradeWhereUniqueInput[]
  }

  export type SubjectUpdateOneRequiredWithoutGradesNestedInput = {
    create?: XOR<SubjectCreateWithoutGradesInput, SubjectUncheckedCreateWithoutGradesInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutGradesInput
    upsert?: SubjectUpsertWithoutGradesInput
    connect?: SubjectWhereUniqueInput
    update?: XOR<XOR<SubjectUpdateToOneWithWhereWithoutGradesInput, SubjectUpdateWithoutGradesInput>, SubjectUncheckedUpdateWithoutGradesInput>
  }

  export type ClassGradeUpdateOneRequiredWithoutSubjectsNestedInput = {
    create?: XOR<ClassGradeCreateWithoutSubjectsInput, ClassGradeUncheckedCreateWithoutSubjectsInput>
    connectOrCreate?: ClassGradeCreateOrConnectWithoutSubjectsInput
    upsert?: ClassGradeUpsertWithoutSubjectsInput
    connect?: ClassGradeWhereUniqueInput
    update?: XOR<XOR<ClassGradeUpdateToOneWithWhereWithoutSubjectsInput, ClassGradeUpdateWithoutSubjectsInput>, ClassGradeUncheckedUpdateWithoutSubjectsInput>
  }

  export type StudentGradeUpdateManyWithoutSubjectGradeNestedInput = {
    create?: XOR<StudentGradeCreateWithoutSubjectGradeInput, StudentGradeUncheckedCreateWithoutSubjectGradeInput> | StudentGradeCreateWithoutSubjectGradeInput[] | StudentGradeUncheckedCreateWithoutSubjectGradeInput[]
    connectOrCreate?: StudentGradeCreateOrConnectWithoutSubjectGradeInput | StudentGradeCreateOrConnectWithoutSubjectGradeInput[]
    upsert?: StudentGradeUpsertWithWhereUniqueWithoutSubjectGradeInput | StudentGradeUpsertWithWhereUniqueWithoutSubjectGradeInput[]
    createMany?: StudentGradeCreateManySubjectGradeInputEnvelope
    set?: StudentGradeWhereUniqueInput | StudentGradeWhereUniqueInput[]
    disconnect?: StudentGradeWhereUniqueInput | StudentGradeWhereUniqueInput[]
    delete?: StudentGradeWhereUniqueInput | StudentGradeWhereUniqueInput[]
    connect?: StudentGradeWhereUniqueInput | StudentGradeWhereUniqueInput[]
    update?: StudentGradeUpdateWithWhereUniqueWithoutSubjectGradeInput | StudentGradeUpdateWithWhereUniqueWithoutSubjectGradeInput[]
    updateMany?: StudentGradeUpdateManyWithWhereWithoutSubjectGradeInput | StudentGradeUpdateManyWithWhereWithoutSubjectGradeInput[]
    deleteMany?: StudentGradeScalarWhereInput | StudentGradeScalarWhereInput[]
  }

  export type StudentGradeUncheckedUpdateManyWithoutSubjectGradeNestedInput = {
    create?: XOR<StudentGradeCreateWithoutSubjectGradeInput, StudentGradeUncheckedCreateWithoutSubjectGradeInput> | StudentGradeCreateWithoutSubjectGradeInput[] | StudentGradeUncheckedCreateWithoutSubjectGradeInput[]
    connectOrCreate?: StudentGradeCreateOrConnectWithoutSubjectGradeInput | StudentGradeCreateOrConnectWithoutSubjectGradeInput[]
    upsert?: StudentGradeUpsertWithWhereUniqueWithoutSubjectGradeInput | StudentGradeUpsertWithWhereUniqueWithoutSubjectGradeInput[]
    createMany?: StudentGradeCreateManySubjectGradeInputEnvelope
    set?: StudentGradeWhereUniqueInput | StudentGradeWhereUniqueInput[]
    disconnect?: StudentGradeWhereUniqueInput | StudentGradeWhereUniqueInput[]
    delete?: StudentGradeWhereUniqueInput | StudentGradeWhereUniqueInput[]
    connect?: StudentGradeWhereUniqueInput | StudentGradeWhereUniqueInput[]
    update?: StudentGradeUpdateWithWhereUniqueWithoutSubjectGradeInput | StudentGradeUpdateWithWhereUniqueWithoutSubjectGradeInput[]
    updateMany?: StudentGradeUpdateManyWithWhereWithoutSubjectGradeInput | StudentGradeUpdateManyWithWhereWithoutSubjectGradeInput[]
    deleteMany?: StudentGradeScalarWhereInput | StudentGradeScalarWhereInput[]
  }

  export type StudentCreateNestedOneWithoutGradesInput = {
    create?: XOR<StudentCreateWithoutGradesInput, StudentUncheckedCreateWithoutGradesInput>
    connectOrCreate?: StudentCreateOrConnectWithoutGradesInput
    connect?: StudentWhereUniqueInput
  }

  export type SubjectGradeCreateNestedOneWithoutStudentsInput = {
    create?: XOR<SubjectGradeCreateWithoutStudentsInput, SubjectGradeUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: SubjectGradeCreateOrConnectWithoutStudentsInput
    connect?: SubjectGradeWhereUniqueInput
  }

  export type StudentUpdateOneRequiredWithoutGradesNestedInput = {
    create?: XOR<StudentCreateWithoutGradesInput, StudentUncheckedCreateWithoutGradesInput>
    connectOrCreate?: StudentCreateOrConnectWithoutGradesInput
    upsert?: StudentUpsertWithoutGradesInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutGradesInput, StudentUpdateWithoutGradesInput>, StudentUncheckedUpdateWithoutGradesInput>
  }

  export type SubjectGradeUpdateOneRequiredWithoutStudentsNestedInput = {
    create?: XOR<SubjectGradeCreateWithoutStudentsInput, SubjectGradeUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: SubjectGradeCreateOrConnectWithoutStudentsInput
    upsert?: SubjectGradeUpsertWithoutStudentsInput
    connect?: SubjectGradeWhereUniqueInput
    update?: XOR<XOR<SubjectGradeUpdateToOneWithWhereWithoutStudentsInput, SubjectGradeUpdateWithoutStudentsInput>, SubjectGradeUncheckedUpdateWithoutStudentsInput>
  }

  export type StudentCreateNestedOneWithoutEffectiveInput = {
    create?: XOR<StudentCreateWithoutEffectiveInput, StudentUncheckedCreateWithoutEffectiveInput>
    connectOrCreate?: StudentCreateOrConnectWithoutEffectiveInput
    connect?: StudentWhereUniqueInput
  }

  export type GradeCreateNestedOneWithoutEffectiveInput = {
    create?: XOR<GradeCreateWithoutEffectiveInput, GradeUncheckedCreateWithoutEffectiveInput>
    connectOrCreate?: GradeCreateOrConnectWithoutEffectiveInput
    connect?: GradeWhereUniqueInput
  }

  export type StudentUpdateOneRequiredWithoutEffectiveNestedInput = {
    create?: XOR<StudentCreateWithoutEffectiveInput, StudentUncheckedCreateWithoutEffectiveInput>
    connectOrCreate?: StudentCreateOrConnectWithoutEffectiveInput
    upsert?: StudentUpsertWithoutEffectiveInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutEffectiveInput, StudentUpdateWithoutEffectiveInput>, StudentUncheckedUpdateWithoutEffectiveInput>
  }

  export type GradeUpdateOneRequiredWithoutEffectiveNestedInput = {
    create?: XOR<GradeCreateWithoutEffectiveInput, GradeUncheckedCreateWithoutEffectiveInput>
    connectOrCreate?: GradeCreateOrConnectWithoutEffectiveInput
    upsert?: GradeUpsertWithoutEffectiveInput
    connect?: GradeWhereUniqueInput
    update?: XOR<XOR<GradeUpdateToOneWithWhereWithoutEffectiveInput, GradeUpdateWithoutEffectiveInput>, GradeUncheckedUpdateWithoutEffectiveInput>
  }

  export type StudentCreateNestedOneWithoutPsychomotiveInput = {
    create?: XOR<StudentCreateWithoutPsychomotiveInput, StudentUncheckedCreateWithoutPsychomotiveInput>
    connectOrCreate?: StudentCreateOrConnectWithoutPsychomotiveInput
    connect?: StudentWhereUniqueInput
  }

  export type GradeCreateNestedOneWithoutPsychomotiveInput = {
    create?: XOR<GradeCreateWithoutPsychomotiveInput, GradeUncheckedCreateWithoutPsychomotiveInput>
    connectOrCreate?: GradeCreateOrConnectWithoutPsychomotiveInput
    connect?: GradeWhereUniqueInput
  }

  export type StudentUpdateOneRequiredWithoutPsychomotiveNestedInput = {
    create?: XOR<StudentCreateWithoutPsychomotiveInput, StudentUncheckedCreateWithoutPsychomotiveInput>
    connectOrCreate?: StudentCreateOrConnectWithoutPsychomotiveInput
    upsert?: StudentUpsertWithoutPsychomotiveInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutPsychomotiveInput, StudentUpdateWithoutPsychomotiveInput>, StudentUncheckedUpdateWithoutPsychomotiveInput>
  }

  export type GradeUpdateOneRequiredWithoutPsychomotiveNestedInput = {
    create?: XOR<GradeCreateWithoutPsychomotiveInput, GradeUncheckedCreateWithoutPsychomotiveInput>
    connectOrCreate?: GradeCreateOrConnectWithoutPsychomotiveInput
    upsert?: GradeUpsertWithoutPsychomotiveInput
    connect?: GradeWhereUniqueInput
    update?: XOR<XOR<GradeUpdateToOneWithWhereWithoutPsychomotiveInput, GradeUpdateWithoutPsychomotiveInput>, GradeUncheckedUpdateWithoutPsychomotiveInput>
  }

  export type StudentCreateNestedOneWithoutAttendancesInput = {
    create?: XOR<StudentCreateWithoutAttendancesInput, StudentUncheckedCreateWithoutAttendancesInput>
    connectOrCreate?: StudentCreateOrConnectWithoutAttendancesInput
    connect?: StudentWhereUniqueInput
  }

  export type StudentUpdateOneRequiredWithoutAttendancesNestedInput = {
    create?: XOR<StudentCreateWithoutAttendancesInput, StudentUncheckedCreateWithoutAttendancesInput>
    connectOrCreate?: StudentCreateOrConnectWithoutAttendancesInput
    upsert?: StudentUpsertWithoutAttendancesInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutAttendancesInput, StudentUpdateWithoutAttendancesInput>, StudentUncheckedUpdateWithoutAttendancesInput>
  }

  export type ClassCreateNestedOneWithoutEventsInput = {
    create?: XOR<ClassCreateWithoutEventsInput, ClassUncheckedCreateWithoutEventsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutEventsInput
    connect?: ClassWhereUniqueInput
  }

  export type ClassUpdateOneWithoutEventsNestedInput = {
    create?: XOR<ClassCreateWithoutEventsInput, ClassUncheckedCreateWithoutEventsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutEventsInput
    upsert?: ClassUpsertWithoutEventsInput
    disconnect?: ClassWhereInput | boolean
    delete?: ClassWhereInput | boolean
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutEventsInput, ClassUpdateWithoutEventsInput>, ClassUncheckedUpdateWithoutEventsInput>
  }

  export type ClassCreateNestedOneWithoutAnnouncementsInput = {
    create?: XOR<ClassCreateWithoutAnnouncementsInput, ClassUncheckedCreateWithoutAnnouncementsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutAnnouncementsInput
    connect?: ClassWhereUniqueInput
  }

  export type ClassUpdateOneWithoutAnnouncementsNestedInput = {
    create?: XOR<ClassCreateWithoutAnnouncementsInput, ClassUncheckedCreateWithoutAnnouncementsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutAnnouncementsInput
    upsert?: ClassUpsertWithoutAnnouncementsInput
    disconnect?: ClassWhereInput | boolean
    delete?: ClassWhereInput | boolean
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutAnnouncementsInput, ClassUpdateWithoutAnnouncementsInput>, ClassUncheckedUpdateWithoutAnnouncementsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRolesFilter<$PrismaModel = never> = {
    equals?: $Enums.Roles | EnumRolesFieldRefInput<$PrismaModel>
    in?: $Enums.Roles[] | ListEnumRolesFieldRefInput<$PrismaModel>
    notIn?: $Enums.Roles[] | ListEnumRolesFieldRefInput<$PrismaModel>
    not?: NestedEnumRolesFilter<$PrismaModel> | $Enums.Roles
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumRolesWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Roles | EnumRolesFieldRefInput<$PrismaModel>
    in?: $Enums.Roles[] | ListEnumRolesFieldRefInput<$PrismaModel>
    notIn?: $Enums.Roles[] | ListEnumRolesFieldRefInput<$PrismaModel>
    not?: NestedEnumRolesWithAggregatesFilter<$PrismaModel> | $Enums.Roles
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRolesFilter<$PrismaModel>
    _max?: NestedEnumRolesFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumUserSexFilter<$PrismaModel = never> = {
    equals?: $Enums.UserSex | EnumUserSexFieldRefInput<$PrismaModel>
    in?: $Enums.UserSex[] | ListEnumUserSexFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserSex[] | ListEnumUserSexFieldRefInput<$PrismaModel>
    not?: NestedEnumUserSexFilter<$PrismaModel> | $Enums.UserSex
  }

  export type NestedEnumUserSexWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserSex | EnumUserSexFieldRefInput<$PrismaModel>
    in?: $Enums.UserSex[] | ListEnumUserSexFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserSex[] | ListEnumUserSexFieldRefInput<$PrismaModel>
    not?: NestedEnumUserSexWithAggregatesFilter<$PrismaModel> | $Enums.UserSex
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserSexFilter<$PrismaModel>
    _max?: NestedEnumUserSexFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumTermsFilter<$PrismaModel = never> = {
    equals?: $Enums.Terms | EnumTermsFieldRefInput<$PrismaModel>
    in?: $Enums.Terms[] | ListEnumTermsFieldRefInput<$PrismaModel>
    notIn?: $Enums.Terms[] | ListEnumTermsFieldRefInput<$PrismaModel>
    not?: NestedEnumTermsFilter<$PrismaModel> | $Enums.Terms
  }

  export type NestedEnumTermStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TermStatus | EnumTermStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TermStatus[] | ListEnumTermStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TermStatus[] | ListEnumTermStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTermStatusFilter<$PrismaModel> | $Enums.TermStatus
  }

  export type NestedEnumTermsWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Terms | EnumTermsFieldRefInput<$PrismaModel>
    in?: $Enums.Terms[] | ListEnumTermsFieldRefInput<$PrismaModel>
    notIn?: $Enums.Terms[] | ListEnumTermsFieldRefInput<$PrismaModel>
    not?: NestedEnumTermsWithAggregatesFilter<$PrismaModel> | $Enums.Terms
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTermsFilter<$PrismaModel>
    _max?: NestedEnumTermsFilter<$PrismaModel>
  }

  export type NestedEnumTermStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TermStatus | EnumTermStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TermStatus[] | ListEnumTermStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TermStatus[] | ListEnumTermStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTermStatusWithAggregatesFilter<$PrismaModel> | $Enums.TermStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTermStatusFilter<$PrismaModel>
    _max?: NestedEnumTermStatusFilter<$PrismaModel>
  }

  export type NestedEnumTestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TestStatus | EnumTestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TestStatus[] | ListEnumTestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TestStatus[] | ListEnumTestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTestStatusFilter<$PrismaModel> | $Enums.TestStatus
  }

  export type NestedEnumTestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TestStatus | EnumTestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TestStatus[] | ListEnumTestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TestStatus[] | ListEnumTestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTestStatusWithAggregatesFilter<$PrismaModel> | $Enums.TestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTestStatusFilter<$PrismaModel>
    _max?: NestedEnumTestStatusFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type StudentCreateWithoutSchoolInput = {
    id?: string
    username: string
    admissionnumber: string
    firstname: string
    surname: string
    othername?: string | null
    birthday: Date | string
    gender: $Enums.UserSex
    religion?: string | null
    studenttype: string
    house: string
    bloodgroup: string
    admissiondate?: Date | string
    email: string
    phone?: string | null
    address: string
    state: string
    lga: string
    avarta?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    parent: ParentCreateNestedOneWithoutStudentsInput
    class: ClassCreateNestedOneWithoutStudentsInput
    attendances?: AttendanceCreateNestedManyWithoutStudentInput
    assignments?: AssignmentCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    answers?: AnswerCreateNestedManyWithoutStudentInput
    grades?: StudentGradeCreateNestedManyWithoutStudentInput
    effective?: EffectiveDomainCreateNestedManyWithoutStudentInput
    psychomotive?: PsychomotiveDomainCreateNestedManyWithoutStudentInput
    payments?: PaymentCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutSchoolInput = {
    id?: string
    username: string
    admissionnumber: string
    firstname: string
    surname: string
    othername?: string | null
    birthday: Date | string
    gender: $Enums.UserSex
    religion?: string | null
    studenttype: string
    house: string
    bloodgroup: string
    admissiondate?: Date | string
    email: string
    phone?: string | null
    address: string
    state: string
    lga: string
    avarta?: string | null
    parentid: string
    classid: string
    createdAt?: Date | string
    updateAt?: Date | string
    attendances?: AttendanceUncheckedCreateNestedManyWithoutStudentInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    answers?: AnswerUncheckedCreateNestedManyWithoutStudentInput
    grades?: StudentGradeUncheckedCreateNestedManyWithoutStudentInput
    effective?: EffectiveDomainUncheckedCreateNestedManyWithoutStudentInput
    psychomotive?: PsychomotiveDomainUncheckedCreateNestedManyWithoutStudentInput
    payments?: PaymentUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutSchoolInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutSchoolInput, StudentUncheckedCreateWithoutSchoolInput>
  }

  export type StudentCreateManySchoolInputEnvelope = {
    data: StudentCreateManySchoolInput | StudentCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type TeacherCreateWithoutSchoolInput = {
    id?: string
    username: string
    title: string
    firstname: string
    surname: string
    othername?: string | null
    birthday?: Date | string | null
    bloodgroup?: string | null
    gender: $Enums.UserSex
    state: string
    lga: string
    email: string
    phone?: string | null
    address: string
    avarta?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    subjects?: SubjectCreateNestedManyWithoutTeachersInput
    classes?: ClassCreateNestedManyWithoutFormmasterInput
    assignments?: AssignmentCreateNestedManyWithoutTeacherInput
    tests?: TestCreateNestedManyWithoutTeacherInput
  }

  export type TeacherUncheckedCreateWithoutSchoolInput = {
    id?: string
    username: string
    title: string
    firstname: string
    surname: string
    othername?: string | null
    birthday?: Date | string | null
    bloodgroup?: string | null
    gender: $Enums.UserSex
    state: string
    lga: string
    email: string
    phone?: string | null
    address: string
    avarta?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    subjects?: SubjectUncheckedCreateNestedManyWithoutTeachersInput
    classes?: ClassUncheckedCreateNestedManyWithoutFormmasterInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutTeacherInput
    tests?: TestUncheckedCreateNestedManyWithoutTeacherInput
  }

  export type TeacherCreateOrConnectWithoutSchoolInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherCreateWithoutSchoolInput, TeacherUncheckedCreateWithoutSchoolInput>
  }

  export type TeacherCreateManySchoolInputEnvelope = {
    data: TeacherCreateManySchoolInput | TeacherCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type SubjectCreateWithoutSchoolInput = {
    id?: string
    name: string
    category: string
    createdAt?: Date | string
    updateAt?: Date | string
    teachers?: TeacherCreateNestedManyWithoutSubjectsInput
    assignments?: AssignmentCreateNestedManyWithoutSubjectInput
    grades?: SubjectGradeCreateNestedManyWithoutSubjectInput
    tests?: TestCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutSchoolInput = {
    id?: string
    name: string
    category: string
    createdAt?: Date | string
    updateAt?: Date | string
    teachers?: TeacherUncheckedCreateNestedManyWithoutSubjectsInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutSubjectInput
    grades?: SubjectGradeUncheckedCreateNestedManyWithoutSubjectInput
    tests?: TestUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutSchoolInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutSchoolInput, SubjectUncheckedCreateWithoutSchoolInput>
  }

  export type SubjectCreateManySchoolInputEnvelope = {
    data: SubjectCreateManySchoolInput | SubjectCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type PaymentSetupCreateWithoutSchoolInput = {
    id?: string
    amount: number
    fees: number
    partpayment?: boolean
    session: string
    term: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type PaymentSetupUncheckedCreateWithoutSchoolInput = {
    id?: string
    amount: number
    fees: number
    partpayment?: boolean
    session: string
    term: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type PaymentSetupCreateOrConnectWithoutSchoolInput = {
    where: PaymentSetupWhereUniqueInput
    create: XOR<PaymentSetupCreateWithoutSchoolInput, PaymentSetupUncheckedCreateWithoutSchoolInput>
  }

  export type PaymentSetupCreateManySchoolInputEnvelope = {
    data: PaymentSetupCreateManySchoolInput | PaymentSetupCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type PaymentCreateWithoutSchoolInput = {
    id?: string
    session: string
    term: $Enums.Terms
    amount: number
    createdAt?: Date | string
    updateAt?: Date | string
    student: StudentCreateNestedOneWithoutPaymentsInput
  }

  export type PaymentUncheckedCreateWithoutSchoolInput = {
    id?: string
    session: string
    term: $Enums.Terms
    amount: number
    studentid: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type PaymentCreateOrConnectWithoutSchoolInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutSchoolInput, PaymentUncheckedCreateWithoutSchoolInput>
  }

  export type PaymentCreateManySchoolInputEnvelope = {
    data: PaymentCreateManySchoolInput | PaymentCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type StudentUpsertWithWhereUniqueWithoutSchoolInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutSchoolInput, StudentUncheckedUpdateWithoutSchoolInput>
    create: XOR<StudentCreateWithoutSchoolInput, StudentUncheckedCreateWithoutSchoolInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutSchoolInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutSchoolInput, StudentUncheckedUpdateWithoutSchoolInput>
  }

  export type StudentUpdateManyWithWhereWithoutSchoolInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutSchoolInput>
  }

  export type StudentScalarWhereInput = {
    AND?: StudentScalarWhereInput | StudentScalarWhereInput[]
    OR?: StudentScalarWhereInput[]
    NOT?: StudentScalarWhereInput | StudentScalarWhereInput[]
    id?: StringFilter<"Student"> | string
    username?: StringFilter<"Student"> | string
    admissionnumber?: StringFilter<"Student"> | string
    firstname?: StringFilter<"Student"> | string
    surname?: StringFilter<"Student"> | string
    othername?: StringNullableFilter<"Student"> | string | null
    birthday?: DateTimeFilter<"Student"> | Date | string
    gender?: EnumUserSexFilter<"Student"> | $Enums.UserSex
    religion?: StringNullableFilter<"Student"> | string | null
    studenttype?: StringFilter<"Student"> | string
    house?: StringFilter<"Student"> | string
    bloodgroup?: StringFilter<"Student"> | string
    admissiondate?: DateTimeFilter<"Student"> | Date | string
    email?: StringFilter<"Student"> | string
    phone?: StringNullableFilter<"Student"> | string | null
    address?: StringFilter<"Student"> | string
    state?: StringFilter<"Student"> | string
    lga?: StringFilter<"Student"> | string
    avarta?: StringNullableFilter<"Student"> | string | null
    parentid?: StringFilter<"Student"> | string
    schoolid?: StringFilter<"Student"> | string
    classid?: StringFilter<"Student"> | string
    createdAt?: DateTimeFilter<"Student"> | Date | string
    updateAt?: DateTimeFilter<"Student"> | Date | string
  }

  export type TeacherUpsertWithWhereUniqueWithoutSchoolInput = {
    where: TeacherWhereUniqueInput
    update: XOR<TeacherUpdateWithoutSchoolInput, TeacherUncheckedUpdateWithoutSchoolInput>
    create: XOR<TeacherCreateWithoutSchoolInput, TeacherUncheckedCreateWithoutSchoolInput>
  }

  export type TeacherUpdateWithWhereUniqueWithoutSchoolInput = {
    where: TeacherWhereUniqueInput
    data: XOR<TeacherUpdateWithoutSchoolInput, TeacherUncheckedUpdateWithoutSchoolInput>
  }

  export type TeacherUpdateManyWithWhereWithoutSchoolInput = {
    where: TeacherScalarWhereInput
    data: XOR<TeacherUpdateManyMutationInput, TeacherUncheckedUpdateManyWithoutSchoolInput>
  }

  export type TeacherScalarWhereInput = {
    AND?: TeacherScalarWhereInput | TeacherScalarWhereInput[]
    OR?: TeacherScalarWhereInput[]
    NOT?: TeacherScalarWhereInput | TeacherScalarWhereInput[]
    id?: StringFilter<"Teacher"> | string
    username?: StringFilter<"Teacher"> | string
    title?: StringFilter<"Teacher"> | string
    firstname?: StringFilter<"Teacher"> | string
    surname?: StringFilter<"Teacher"> | string
    othername?: StringNullableFilter<"Teacher"> | string | null
    birthday?: DateTimeNullableFilter<"Teacher"> | Date | string | null
    bloodgroup?: StringNullableFilter<"Teacher"> | string | null
    gender?: EnumUserSexFilter<"Teacher"> | $Enums.UserSex
    state?: StringFilter<"Teacher"> | string
    lga?: StringFilter<"Teacher"> | string
    email?: StringFilter<"Teacher"> | string
    phone?: StringNullableFilter<"Teacher"> | string | null
    address?: StringFilter<"Teacher"> | string
    avarta?: StringNullableFilter<"Teacher"> | string | null
    schoolid?: StringFilter<"Teacher"> | string
    createdAt?: DateTimeFilter<"Teacher"> | Date | string
    updateAt?: DateTimeFilter<"Teacher"> | Date | string
  }

  export type SubjectUpsertWithWhereUniqueWithoutSchoolInput = {
    where: SubjectWhereUniqueInput
    update: XOR<SubjectUpdateWithoutSchoolInput, SubjectUncheckedUpdateWithoutSchoolInput>
    create: XOR<SubjectCreateWithoutSchoolInput, SubjectUncheckedCreateWithoutSchoolInput>
  }

  export type SubjectUpdateWithWhereUniqueWithoutSchoolInput = {
    where: SubjectWhereUniqueInput
    data: XOR<SubjectUpdateWithoutSchoolInput, SubjectUncheckedUpdateWithoutSchoolInput>
  }

  export type SubjectUpdateManyWithWhereWithoutSchoolInput = {
    where: SubjectScalarWhereInput
    data: XOR<SubjectUpdateManyMutationInput, SubjectUncheckedUpdateManyWithoutSchoolInput>
  }

  export type SubjectScalarWhereInput = {
    AND?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
    OR?: SubjectScalarWhereInput[]
    NOT?: SubjectScalarWhereInput | SubjectScalarWhereInput[]
    id?: StringFilter<"Subject"> | string
    name?: StringFilter<"Subject"> | string
    category?: StringFilter<"Subject"> | string
    schoolid?: StringFilter<"Subject"> | string
    createdAt?: DateTimeFilter<"Subject"> | Date | string
    updateAt?: DateTimeFilter<"Subject"> | Date | string
  }

  export type PaymentSetupUpsertWithWhereUniqueWithoutSchoolInput = {
    where: PaymentSetupWhereUniqueInput
    update: XOR<PaymentSetupUpdateWithoutSchoolInput, PaymentSetupUncheckedUpdateWithoutSchoolInput>
    create: XOR<PaymentSetupCreateWithoutSchoolInput, PaymentSetupUncheckedCreateWithoutSchoolInput>
  }

  export type PaymentSetupUpdateWithWhereUniqueWithoutSchoolInput = {
    where: PaymentSetupWhereUniqueInput
    data: XOR<PaymentSetupUpdateWithoutSchoolInput, PaymentSetupUncheckedUpdateWithoutSchoolInput>
  }

  export type PaymentSetupUpdateManyWithWhereWithoutSchoolInput = {
    where: PaymentSetupScalarWhereInput
    data: XOR<PaymentSetupUpdateManyMutationInput, PaymentSetupUncheckedUpdateManyWithoutSchoolInput>
  }

  export type PaymentSetupScalarWhereInput = {
    AND?: PaymentSetupScalarWhereInput | PaymentSetupScalarWhereInput[]
    OR?: PaymentSetupScalarWhereInput[]
    NOT?: PaymentSetupScalarWhereInput | PaymentSetupScalarWhereInput[]
    id?: StringFilter<"PaymentSetup"> | string
    amount?: IntFilter<"PaymentSetup"> | number
    fees?: IntFilter<"PaymentSetup"> | number
    partpayment?: BoolFilter<"PaymentSetup"> | boolean
    session?: StringFilter<"PaymentSetup"> | string
    term?: StringFilter<"PaymentSetup"> | string
    schoolid?: StringFilter<"PaymentSetup"> | string
    createdAt?: DateTimeFilter<"PaymentSetup"> | Date | string
    updateAt?: DateTimeFilter<"PaymentSetup"> | Date | string
  }

  export type PaymentUpsertWithWhereUniqueWithoutSchoolInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutSchoolInput, PaymentUncheckedUpdateWithoutSchoolInput>
    create: XOR<PaymentCreateWithoutSchoolInput, PaymentUncheckedCreateWithoutSchoolInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutSchoolInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutSchoolInput, PaymentUncheckedUpdateWithoutSchoolInput>
  }

  export type PaymentUpdateManyWithWhereWithoutSchoolInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutSchoolInput>
  }

  export type PaymentScalarWhereInput = {
    AND?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    OR?: PaymentScalarWhereInput[]
    NOT?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    id?: StringFilter<"Payment"> | string
    session?: StringFilter<"Payment"> | string
    term?: EnumTermsFilter<"Payment"> | $Enums.Terms
    amount?: IntFilter<"Payment"> | number
    schoolid?: StringFilter<"Payment"> | string
    studentid?: StringFilter<"Payment"> | string
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updateAt?: DateTimeFilter<"Payment"> | Date | string
  }

  export type ParentCreateWithoutStudentsInput = {
    id?: string
    username: string
    title: string
    firstname: string
    surname: string
    othername?: string | null
    birthday?: Date | string | null
    bloodgroup?: string | null
    gender: $Enums.UserSex
    occupation: string
    religion: string
    state: string
    lga: string
    email: string
    phone: string
    address: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type ParentUncheckedCreateWithoutStudentsInput = {
    id?: string
    username: string
    title: string
    firstname: string
    surname: string
    othername?: string | null
    birthday?: Date | string | null
    bloodgroup?: string | null
    gender: $Enums.UserSex
    occupation: string
    religion: string
    state: string
    lga: string
    email: string
    phone: string
    address: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type ParentCreateOrConnectWithoutStudentsInput = {
    where: ParentWhereUniqueInput
    create: XOR<ParentCreateWithoutStudentsInput, ParentUncheckedCreateWithoutStudentsInput>
  }

  export type SchoolCreateWithoutStudentsInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    address: string
    logo?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    teachers?: TeacherCreateNestedManyWithoutSchoolInput
    subjects?: SubjectCreateNestedManyWithoutSchoolInput
    paymentsetups?: PaymentSetupCreateNestedManyWithoutSchoolInput
    payments?: PaymentCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutStudentsInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    address: string
    logo?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    teachers?: TeacherUncheckedCreateNestedManyWithoutSchoolInput
    subjects?: SubjectUncheckedCreateNestedManyWithoutSchoolInput
    paymentsetups?: PaymentSetupUncheckedCreateNestedManyWithoutSchoolInput
    payments?: PaymentUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutStudentsInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutStudentsInput, SchoolUncheckedCreateWithoutStudentsInput>
  }

  export type ClassCreateWithoutStudentsInput = {
    id?: string
    name: string
    category: string
    level: string
    capacity?: number | null
    createdAt?: Date | string
    updateAt?: Date | string
    formmaster?: TeacherCreateNestedOneWithoutClassesInput
    gradings?: ClassGradeCreateNestedManyWithoutClassInput
    events?: EventCreateNestedManyWithoutClassInput
    announcements?: AnnouncementCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutStudentsInput = {
    id?: string
    name: string
    category: string
    level: string
    capacity?: number | null
    formmasterid?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    gradings?: ClassGradeUncheckedCreateNestedManyWithoutClassInput
    events?: EventUncheckedCreateNestedManyWithoutClassInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutStudentsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput>
  }

  export type AttendanceCreateWithoutStudentInput = {
    date: Date | string
    present: boolean
  }

  export type AttendanceUncheckedCreateWithoutStudentInput = {
    id?: number
    date: Date | string
    present: boolean
  }

  export type AttendanceCreateOrConnectWithoutStudentInput = {
    where: AttendanceWhereUniqueInput
    create: XOR<AttendanceCreateWithoutStudentInput, AttendanceUncheckedCreateWithoutStudentInput>
  }

  export type AttendanceCreateManyStudentInputEnvelope = {
    data: AttendanceCreateManyStudentInput | AttendanceCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type AssignmentCreateWithoutStudentsInput = {
    id?: string
    title: string
    text: string
    file: string
    duedate: Date | string
    graded: boolean
    createdAt?: Date | string
    updateAt?: Date | string
    subject: SubjectCreateNestedOneWithoutAssignmentsInput
    teacher: TeacherCreateNestedOneWithoutAssignmentsInput
    submissions?: SubmissionCreateNestedManyWithoutAssignmentInput
  }

  export type AssignmentUncheckedCreateWithoutStudentsInput = {
    id?: string
    title: string
    text: string
    file: string
    duedate: Date | string
    graded: boolean
    subjectid: string
    teacherid: string
    createdAt?: Date | string
    updateAt?: Date | string
    submissions?: SubmissionUncheckedCreateNestedManyWithoutAssignmentInput
  }

  export type AssignmentCreateOrConnectWithoutStudentsInput = {
    where: AssignmentWhereUniqueInput
    create: XOR<AssignmentCreateWithoutStudentsInput, AssignmentUncheckedCreateWithoutStudentsInput>
  }

  export type SubmissionCreateWithoutStudentInput = {
    id?: string
    answer: string
    feedback: string
    score: number
    file: string
    createdAt?: Date | string
    updateAt?: Date | string
    assignment?: AssignmentCreateNestedOneWithoutSubmissionsInput
  }

  export type SubmissionUncheckedCreateWithoutStudentInput = {
    id?: string
    answer: string
    feedback: string
    score: number
    file: string
    assignmentId?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type SubmissionCreateOrConnectWithoutStudentInput = {
    where: SubmissionWhereUniqueInput
    create: XOR<SubmissionCreateWithoutStudentInput, SubmissionUncheckedCreateWithoutStudentInput>
  }

  export type SubmissionCreateManyStudentInputEnvelope = {
    data: SubmissionCreateManyStudentInput | SubmissionCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type AnswerCreateWithoutStudentInput = {
    id?: string
    score: number
    createdAt?: Date | string
    updateAt?: Date | string
    test: TestCreateNestedOneWithoutAnswersInput
  }

  export type AnswerUncheckedCreateWithoutStudentInput = {
    id?: string
    score: number
    testid: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type AnswerCreateOrConnectWithoutStudentInput = {
    where: AnswerWhereUniqueInput
    create: XOR<AnswerCreateWithoutStudentInput, AnswerUncheckedCreateWithoutStudentInput>
  }

  export type AnswerCreateManyStudentInputEnvelope = {
    data: AnswerCreateManyStudentInput | AnswerCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type StudentGradeCreateWithoutStudentInput = {
    id?: string
    firstCa: number
    secondCa: number
    thirdCa: number
    fourthCa: number
    exams: number
    score: number
    grade: number
    remark: number
    subjectGrade: SubjectGradeCreateNestedOneWithoutStudentsInput
  }

  export type StudentGradeUncheckedCreateWithoutStudentInput = {
    id?: string
    firstCa: number
    secondCa: number
    thirdCa: number
    fourthCa: number
    exams: number
    score: number
    grade: number
    remark: number
    subjectgradeid: string
  }

  export type StudentGradeCreateOrConnectWithoutStudentInput = {
    where: StudentGradeWhereUniqueInput
    create: XOR<StudentGradeCreateWithoutStudentInput, StudentGradeUncheckedCreateWithoutStudentInput>
  }

  export type StudentGradeCreateManyStudentInputEnvelope = {
    data: StudentGradeCreateManyStudentInput | StudentGradeCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type EffectiveDomainCreateWithoutStudentInput = {
    id?: string
    classattendance: number
    punctuality: number
    initiative: number
    responsibility: number
    neatness: number
    cooperation: number
    organization: number
    grade: GradeCreateNestedOneWithoutEffectiveInput
  }

  export type EffectiveDomainUncheckedCreateWithoutStudentInput = {
    id?: string
    classattendance: number
    punctuality: number
    initiative: number
    responsibility: number
    neatness: number
    cooperation: number
    organization: number
    gradeid: string
  }

  export type EffectiveDomainCreateOrConnectWithoutStudentInput = {
    where: EffectiveDomainWhereUniqueInput
    create: XOR<EffectiveDomainCreateWithoutStudentInput, EffectiveDomainUncheckedCreateWithoutStudentInput>
  }

  export type EffectiveDomainCreateManyStudentInputEnvelope = {
    data: EffectiveDomainCreateManyStudentInput | EffectiveDomainCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type PsychomotiveDomainCreateWithoutStudentInput = {
    id?: string
    hardworking: number
    sports: number
    grade: GradeCreateNestedOneWithoutPsychomotiveInput
  }

  export type PsychomotiveDomainUncheckedCreateWithoutStudentInput = {
    id?: string
    hardworking: number
    sports: number
    gradeid: string
  }

  export type PsychomotiveDomainCreateOrConnectWithoutStudentInput = {
    where: PsychomotiveDomainWhereUniqueInput
    create: XOR<PsychomotiveDomainCreateWithoutStudentInput, PsychomotiveDomainUncheckedCreateWithoutStudentInput>
  }

  export type PsychomotiveDomainCreateManyStudentInputEnvelope = {
    data: PsychomotiveDomainCreateManyStudentInput | PsychomotiveDomainCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type PaymentCreateWithoutStudentInput = {
    id?: string
    session: string
    term: $Enums.Terms
    amount: number
    createdAt?: Date | string
    updateAt?: Date | string
    school: SchoolCreateNestedOneWithoutPaymentsInput
  }

  export type PaymentUncheckedCreateWithoutStudentInput = {
    id?: string
    session: string
    term: $Enums.Terms
    amount: number
    schoolid: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type PaymentCreateOrConnectWithoutStudentInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutStudentInput, PaymentUncheckedCreateWithoutStudentInput>
  }

  export type PaymentCreateManyStudentInputEnvelope = {
    data: PaymentCreateManyStudentInput | PaymentCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type ParentUpsertWithoutStudentsInput = {
    update: XOR<ParentUpdateWithoutStudentsInput, ParentUncheckedUpdateWithoutStudentsInput>
    create: XOR<ParentCreateWithoutStudentsInput, ParentUncheckedCreateWithoutStudentsInput>
    where?: ParentWhereInput
  }

  export type ParentUpdateToOneWithWhereWithoutStudentsInput = {
    where?: ParentWhereInput
    data: XOR<ParentUpdateWithoutStudentsInput, ParentUncheckedUpdateWithoutStudentsInput>
  }

  export type ParentUpdateWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodgroup?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    occupation?: StringFieldUpdateOperationsInput | string
    religion?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParentUncheckedUpdateWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodgroup?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    occupation?: StringFieldUpdateOperationsInput | string
    religion?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchoolUpsertWithoutStudentsInput = {
    update: XOR<SchoolUpdateWithoutStudentsInput, SchoolUncheckedUpdateWithoutStudentsInput>
    create: XOR<SchoolCreateWithoutStudentsInput, SchoolUncheckedCreateWithoutStudentsInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutStudentsInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutStudentsInput, SchoolUncheckedUpdateWithoutStudentsInput>
  }

  export type SchoolUpdateWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teachers?: TeacherUpdateManyWithoutSchoolNestedInput
    subjects?: SubjectUpdateManyWithoutSchoolNestedInput
    paymentsetups?: PaymentSetupUpdateManyWithoutSchoolNestedInput
    payments?: PaymentUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teachers?: TeacherUncheckedUpdateManyWithoutSchoolNestedInput
    subjects?: SubjectUncheckedUpdateManyWithoutSchoolNestedInput
    paymentsetups?: PaymentSetupUncheckedUpdateManyWithoutSchoolNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type ClassUpsertWithoutStudentsInput = {
    update: XOR<ClassUpdateWithoutStudentsInput, ClassUncheckedUpdateWithoutStudentsInput>
    create: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutStudentsInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutStudentsInput, ClassUncheckedUpdateWithoutStudentsInput>
  }

  export type ClassUpdateWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    formmaster?: TeacherUpdateOneWithoutClassesNestedInput
    gradings?: ClassGradeUpdateManyWithoutClassNestedInput
    events?: EventUpdateManyWithoutClassNestedInput
    announcements?: AnnouncementUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    formmasterid?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gradings?: ClassGradeUncheckedUpdateManyWithoutClassNestedInput
    events?: EventUncheckedUpdateManyWithoutClassNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutClassNestedInput
  }

  export type AttendanceUpsertWithWhereUniqueWithoutStudentInput = {
    where: AttendanceWhereUniqueInput
    update: XOR<AttendanceUpdateWithoutStudentInput, AttendanceUncheckedUpdateWithoutStudentInput>
    create: XOR<AttendanceCreateWithoutStudentInput, AttendanceUncheckedCreateWithoutStudentInput>
  }

  export type AttendanceUpdateWithWhereUniqueWithoutStudentInput = {
    where: AttendanceWhereUniqueInput
    data: XOR<AttendanceUpdateWithoutStudentInput, AttendanceUncheckedUpdateWithoutStudentInput>
  }

  export type AttendanceUpdateManyWithWhereWithoutStudentInput = {
    where: AttendanceScalarWhereInput
    data: XOR<AttendanceUpdateManyMutationInput, AttendanceUncheckedUpdateManyWithoutStudentInput>
  }

  export type AttendanceScalarWhereInput = {
    AND?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
    OR?: AttendanceScalarWhereInput[]
    NOT?: AttendanceScalarWhereInput | AttendanceScalarWhereInput[]
    id?: IntFilter<"Attendance"> | number
    date?: DateTimeFilter<"Attendance"> | Date | string
    present?: BoolFilter<"Attendance"> | boolean
    studentId?: StringFilter<"Attendance"> | string
  }

  export type AssignmentUpsertWithWhereUniqueWithoutStudentsInput = {
    where: AssignmentWhereUniqueInput
    update: XOR<AssignmentUpdateWithoutStudentsInput, AssignmentUncheckedUpdateWithoutStudentsInput>
    create: XOR<AssignmentCreateWithoutStudentsInput, AssignmentUncheckedCreateWithoutStudentsInput>
  }

  export type AssignmentUpdateWithWhereUniqueWithoutStudentsInput = {
    where: AssignmentWhereUniqueInput
    data: XOR<AssignmentUpdateWithoutStudentsInput, AssignmentUncheckedUpdateWithoutStudentsInput>
  }

  export type AssignmentUpdateManyWithWhereWithoutStudentsInput = {
    where: AssignmentScalarWhereInput
    data: XOR<AssignmentUpdateManyMutationInput, AssignmentUncheckedUpdateManyWithoutStudentsInput>
  }

  export type AssignmentScalarWhereInput = {
    AND?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
    OR?: AssignmentScalarWhereInput[]
    NOT?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
    id?: StringFilter<"Assignment"> | string
    title?: StringFilter<"Assignment"> | string
    text?: StringFilter<"Assignment"> | string
    file?: StringFilter<"Assignment"> | string
    duedate?: DateTimeFilter<"Assignment"> | Date | string
    graded?: BoolFilter<"Assignment"> | boolean
    subjectid?: StringFilter<"Assignment"> | string
    teacherid?: StringFilter<"Assignment"> | string
    createdAt?: DateTimeFilter<"Assignment"> | Date | string
    updateAt?: DateTimeFilter<"Assignment"> | Date | string
  }

  export type SubmissionUpsertWithWhereUniqueWithoutStudentInput = {
    where: SubmissionWhereUniqueInput
    update: XOR<SubmissionUpdateWithoutStudentInput, SubmissionUncheckedUpdateWithoutStudentInput>
    create: XOR<SubmissionCreateWithoutStudentInput, SubmissionUncheckedCreateWithoutStudentInput>
  }

  export type SubmissionUpdateWithWhereUniqueWithoutStudentInput = {
    where: SubmissionWhereUniqueInput
    data: XOR<SubmissionUpdateWithoutStudentInput, SubmissionUncheckedUpdateWithoutStudentInput>
  }

  export type SubmissionUpdateManyWithWhereWithoutStudentInput = {
    where: SubmissionScalarWhereInput
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyWithoutStudentInput>
  }

  export type SubmissionScalarWhereInput = {
    AND?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
    OR?: SubmissionScalarWhereInput[]
    NOT?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
    id?: StringFilter<"Submission"> | string
    answer?: StringFilter<"Submission"> | string
    feedback?: StringFilter<"Submission"> | string
    score?: IntFilter<"Submission"> | number
    file?: StringFilter<"Submission"> | string
    assignmentId?: StringNullableFilter<"Submission"> | string | null
    studentId?: StringFilter<"Submission"> | string
    createdAt?: DateTimeFilter<"Submission"> | Date | string
    updateAt?: DateTimeFilter<"Submission"> | Date | string
  }

  export type AnswerUpsertWithWhereUniqueWithoutStudentInput = {
    where: AnswerWhereUniqueInput
    update: XOR<AnswerUpdateWithoutStudentInput, AnswerUncheckedUpdateWithoutStudentInput>
    create: XOR<AnswerCreateWithoutStudentInput, AnswerUncheckedCreateWithoutStudentInput>
  }

  export type AnswerUpdateWithWhereUniqueWithoutStudentInput = {
    where: AnswerWhereUniqueInput
    data: XOR<AnswerUpdateWithoutStudentInput, AnswerUncheckedUpdateWithoutStudentInput>
  }

  export type AnswerUpdateManyWithWhereWithoutStudentInput = {
    where: AnswerScalarWhereInput
    data: XOR<AnswerUpdateManyMutationInput, AnswerUncheckedUpdateManyWithoutStudentInput>
  }

  export type AnswerScalarWhereInput = {
    AND?: AnswerScalarWhereInput | AnswerScalarWhereInput[]
    OR?: AnswerScalarWhereInput[]
    NOT?: AnswerScalarWhereInput | AnswerScalarWhereInput[]
    id?: StringFilter<"Answer"> | string
    score?: IntFilter<"Answer"> | number
    testid?: StringFilter<"Answer"> | string
    studentid?: StringFilter<"Answer"> | string
    createdAt?: DateTimeFilter<"Answer"> | Date | string
    updateAt?: DateTimeFilter<"Answer"> | Date | string
  }

  export type StudentGradeUpsertWithWhereUniqueWithoutStudentInput = {
    where: StudentGradeWhereUniqueInput
    update: XOR<StudentGradeUpdateWithoutStudentInput, StudentGradeUncheckedUpdateWithoutStudentInput>
    create: XOR<StudentGradeCreateWithoutStudentInput, StudentGradeUncheckedCreateWithoutStudentInput>
  }

  export type StudentGradeUpdateWithWhereUniqueWithoutStudentInput = {
    where: StudentGradeWhereUniqueInput
    data: XOR<StudentGradeUpdateWithoutStudentInput, StudentGradeUncheckedUpdateWithoutStudentInput>
  }

  export type StudentGradeUpdateManyWithWhereWithoutStudentInput = {
    where: StudentGradeScalarWhereInput
    data: XOR<StudentGradeUpdateManyMutationInput, StudentGradeUncheckedUpdateManyWithoutStudentInput>
  }

  export type StudentGradeScalarWhereInput = {
    AND?: StudentGradeScalarWhereInput | StudentGradeScalarWhereInput[]
    OR?: StudentGradeScalarWhereInput[]
    NOT?: StudentGradeScalarWhereInput | StudentGradeScalarWhereInput[]
    id?: StringFilter<"StudentGrade"> | string
    firstCa?: IntFilter<"StudentGrade"> | number
    secondCa?: IntFilter<"StudentGrade"> | number
    thirdCa?: IntFilter<"StudentGrade"> | number
    fourthCa?: IntFilter<"StudentGrade"> | number
    exams?: IntFilter<"StudentGrade"> | number
    score?: IntFilter<"StudentGrade"> | number
    grade?: IntFilter<"StudentGrade"> | number
    remark?: IntFilter<"StudentGrade"> | number
    studentid?: StringFilter<"StudentGrade"> | string
    subjectgradeid?: StringFilter<"StudentGrade"> | string
  }

  export type EffectiveDomainUpsertWithWhereUniqueWithoutStudentInput = {
    where: EffectiveDomainWhereUniqueInput
    update: XOR<EffectiveDomainUpdateWithoutStudentInput, EffectiveDomainUncheckedUpdateWithoutStudentInput>
    create: XOR<EffectiveDomainCreateWithoutStudentInput, EffectiveDomainUncheckedCreateWithoutStudentInput>
  }

  export type EffectiveDomainUpdateWithWhereUniqueWithoutStudentInput = {
    where: EffectiveDomainWhereUniqueInput
    data: XOR<EffectiveDomainUpdateWithoutStudentInput, EffectiveDomainUncheckedUpdateWithoutStudentInput>
  }

  export type EffectiveDomainUpdateManyWithWhereWithoutStudentInput = {
    where: EffectiveDomainScalarWhereInput
    data: XOR<EffectiveDomainUpdateManyMutationInput, EffectiveDomainUncheckedUpdateManyWithoutStudentInput>
  }

  export type EffectiveDomainScalarWhereInput = {
    AND?: EffectiveDomainScalarWhereInput | EffectiveDomainScalarWhereInput[]
    OR?: EffectiveDomainScalarWhereInput[]
    NOT?: EffectiveDomainScalarWhereInput | EffectiveDomainScalarWhereInput[]
    id?: StringFilter<"EffectiveDomain"> | string
    classattendance?: IntFilter<"EffectiveDomain"> | number
    punctuality?: IntFilter<"EffectiveDomain"> | number
    initiative?: IntFilter<"EffectiveDomain"> | number
    responsibility?: IntFilter<"EffectiveDomain"> | number
    neatness?: IntFilter<"EffectiveDomain"> | number
    cooperation?: IntFilter<"EffectiveDomain"> | number
    organization?: IntFilter<"EffectiveDomain"> | number
    studentid?: StringFilter<"EffectiveDomain"> | string
    gradeid?: StringFilter<"EffectiveDomain"> | string
  }

  export type PsychomotiveDomainUpsertWithWhereUniqueWithoutStudentInput = {
    where: PsychomotiveDomainWhereUniqueInput
    update: XOR<PsychomotiveDomainUpdateWithoutStudentInput, PsychomotiveDomainUncheckedUpdateWithoutStudentInput>
    create: XOR<PsychomotiveDomainCreateWithoutStudentInput, PsychomotiveDomainUncheckedCreateWithoutStudentInput>
  }

  export type PsychomotiveDomainUpdateWithWhereUniqueWithoutStudentInput = {
    where: PsychomotiveDomainWhereUniqueInput
    data: XOR<PsychomotiveDomainUpdateWithoutStudentInput, PsychomotiveDomainUncheckedUpdateWithoutStudentInput>
  }

  export type PsychomotiveDomainUpdateManyWithWhereWithoutStudentInput = {
    where: PsychomotiveDomainScalarWhereInput
    data: XOR<PsychomotiveDomainUpdateManyMutationInput, PsychomotiveDomainUncheckedUpdateManyWithoutStudentInput>
  }

  export type PsychomotiveDomainScalarWhereInput = {
    AND?: PsychomotiveDomainScalarWhereInput | PsychomotiveDomainScalarWhereInput[]
    OR?: PsychomotiveDomainScalarWhereInput[]
    NOT?: PsychomotiveDomainScalarWhereInput | PsychomotiveDomainScalarWhereInput[]
    id?: StringFilter<"PsychomotiveDomain"> | string
    hardworking?: IntFilter<"PsychomotiveDomain"> | number
    sports?: IntFilter<"PsychomotiveDomain"> | number
    studentid?: StringFilter<"PsychomotiveDomain"> | string
    gradeid?: StringFilter<"PsychomotiveDomain"> | string
  }

  export type PaymentUpsertWithWhereUniqueWithoutStudentInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutStudentInput, PaymentUncheckedUpdateWithoutStudentInput>
    create: XOR<PaymentCreateWithoutStudentInput, PaymentUncheckedCreateWithoutStudentInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutStudentInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutStudentInput, PaymentUncheckedUpdateWithoutStudentInput>
  }

  export type PaymentUpdateManyWithWhereWithoutStudentInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutStudentInput>
  }

  export type SchoolCreateWithoutTeachersInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    address: string
    logo?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    students?: StudentCreateNestedManyWithoutSchoolInput
    subjects?: SubjectCreateNestedManyWithoutSchoolInput
    paymentsetups?: PaymentSetupCreateNestedManyWithoutSchoolInput
    payments?: PaymentCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutTeachersInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    address: string
    logo?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    students?: StudentUncheckedCreateNestedManyWithoutSchoolInput
    subjects?: SubjectUncheckedCreateNestedManyWithoutSchoolInput
    paymentsetups?: PaymentSetupUncheckedCreateNestedManyWithoutSchoolInput
    payments?: PaymentUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutTeachersInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutTeachersInput, SchoolUncheckedCreateWithoutTeachersInput>
  }

  export type SubjectCreateWithoutTeachersInput = {
    id?: string
    name: string
    category: string
    createdAt?: Date | string
    updateAt?: Date | string
    school: SchoolCreateNestedOneWithoutSubjectsInput
    assignments?: AssignmentCreateNestedManyWithoutSubjectInput
    grades?: SubjectGradeCreateNestedManyWithoutSubjectInput
    tests?: TestCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutTeachersInput = {
    id?: string
    name: string
    category: string
    schoolid: string
    createdAt?: Date | string
    updateAt?: Date | string
    assignments?: AssignmentUncheckedCreateNestedManyWithoutSubjectInput
    grades?: SubjectGradeUncheckedCreateNestedManyWithoutSubjectInput
    tests?: TestUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutTeachersInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutTeachersInput, SubjectUncheckedCreateWithoutTeachersInput>
  }

  export type ClassCreateWithoutFormmasterInput = {
    id?: string
    name: string
    category: string
    level: string
    capacity?: number | null
    createdAt?: Date | string
    updateAt?: Date | string
    students?: StudentCreateNestedManyWithoutClassInput
    gradings?: ClassGradeCreateNestedManyWithoutClassInput
    events?: EventCreateNestedManyWithoutClassInput
    announcements?: AnnouncementCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutFormmasterInput = {
    id?: string
    name: string
    category: string
    level: string
    capacity?: number | null
    createdAt?: Date | string
    updateAt?: Date | string
    students?: StudentUncheckedCreateNestedManyWithoutClassInput
    gradings?: ClassGradeUncheckedCreateNestedManyWithoutClassInput
    events?: EventUncheckedCreateNestedManyWithoutClassInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutFormmasterInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutFormmasterInput, ClassUncheckedCreateWithoutFormmasterInput>
  }

  export type ClassCreateManyFormmasterInputEnvelope = {
    data: ClassCreateManyFormmasterInput | ClassCreateManyFormmasterInput[]
    skipDuplicates?: boolean
  }

  export type AssignmentCreateWithoutTeacherInput = {
    id?: string
    title: string
    text: string
    file: string
    duedate: Date | string
    graded: boolean
    createdAt?: Date | string
    updateAt?: Date | string
    subject: SubjectCreateNestedOneWithoutAssignmentsInput
    submissions?: SubmissionCreateNestedManyWithoutAssignmentInput
    students?: StudentCreateNestedManyWithoutAssignmentsInput
  }

  export type AssignmentUncheckedCreateWithoutTeacherInput = {
    id?: string
    title: string
    text: string
    file: string
    duedate: Date | string
    graded: boolean
    subjectid: string
    createdAt?: Date | string
    updateAt?: Date | string
    submissions?: SubmissionUncheckedCreateNestedManyWithoutAssignmentInput
    students?: StudentUncheckedCreateNestedManyWithoutAssignmentsInput
  }

  export type AssignmentCreateOrConnectWithoutTeacherInput = {
    where: AssignmentWhereUniqueInput
    create: XOR<AssignmentCreateWithoutTeacherInput, AssignmentUncheckedCreateWithoutTeacherInput>
  }

  export type AssignmentCreateManyTeacherInputEnvelope = {
    data: AssignmentCreateManyTeacherInput | AssignmentCreateManyTeacherInput[]
    skipDuplicates?: boolean
  }

  export type TestCreateWithoutTeacherInput = {
    id?: string
    title: string
    status: $Enums.TestStatus
    instructions: string
    duration: number
    maxscore: number
    open: boolean
    testdate: Date | string
    testtime: Date | string
    term: string
    createdAt?: Date | string
    updateAt?: Date | string
    questions?: QuestionCreateNestedManyWithoutTestInput
    answers?: AnswerCreateNestedManyWithoutTestInput
    subject: SubjectCreateNestedOneWithoutTestsInput
  }

  export type TestUncheckedCreateWithoutTeacherInput = {
    id?: string
    title: string
    status: $Enums.TestStatus
    instructions: string
    duration: number
    maxscore: number
    open: boolean
    testdate: Date | string
    testtime: Date | string
    term: string
    subjectid: string
    createdAt?: Date | string
    updateAt?: Date | string
    questions?: QuestionUncheckedCreateNestedManyWithoutTestInput
    answers?: AnswerUncheckedCreateNestedManyWithoutTestInput
  }

  export type TestCreateOrConnectWithoutTeacherInput = {
    where: TestWhereUniqueInput
    create: XOR<TestCreateWithoutTeacherInput, TestUncheckedCreateWithoutTeacherInput>
  }

  export type TestCreateManyTeacherInputEnvelope = {
    data: TestCreateManyTeacherInput | TestCreateManyTeacherInput[]
    skipDuplicates?: boolean
  }

  export type SchoolUpsertWithoutTeachersInput = {
    update: XOR<SchoolUpdateWithoutTeachersInput, SchoolUncheckedUpdateWithoutTeachersInput>
    create: XOR<SchoolCreateWithoutTeachersInput, SchoolUncheckedCreateWithoutTeachersInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutTeachersInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutTeachersInput, SchoolUncheckedUpdateWithoutTeachersInput>
  }

  export type SchoolUpdateWithoutTeachersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    students?: StudentUpdateManyWithoutSchoolNestedInput
    subjects?: SubjectUpdateManyWithoutSchoolNestedInput
    paymentsetups?: PaymentSetupUpdateManyWithoutSchoolNestedInput
    payments?: PaymentUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutTeachersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    students?: StudentUncheckedUpdateManyWithoutSchoolNestedInput
    subjects?: SubjectUncheckedUpdateManyWithoutSchoolNestedInput
    paymentsetups?: PaymentSetupUncheckedUpdateManyWithoutSchoolNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type SubjectUpsertWithWhereUniqueWithoutTeachersInput = {
    where: SubjectWhereUniqueInput
    update: XOR<SubjectUpdateWithoutTeachersInput, SubjectUncheckedUpdateWithoutTeachersInput>
    create: XOR<SubjectCreateWithoutTeachersInput, SubjectUncheckedCreateWithoutTeachersInput>
  }

  export type SubjectUpdateWithWhereUniqueWithoutTeachersInput = {
    where: SubjectWhereUniqueInput
    data: XOR<SubjectUpdateWithoutTeachersInput, SubjectUncheckedUpdateWithoutTeachersInput>
  }

  export type SubjectUpdateManyWithWhereWithoutTeachersInput = {
    where: SubjectScalarWhereInput
    data: XOR<SubjectUpdateManyMutationInput, SubjectUncheckedUpdateManyWithoutTeachersInput>
  }

  export type ClassUpsertWithWhereUniqueWithoutFormmasterInput = {
    where: ClassWhereUniqueInput
    update: XOR<ClassUpdateWithoutFormmasterInput, ClassUncheckedUpdateWithoutFormmasterInput>
    create: XOR<ClassCreateWithoutFormmasterInput, ClassUncheckedCreateWithoutFormmasterInput>
  }

  export type ClassUpdateWithWhereUniqueWithoutFormmasterInput = {
    where: ClassWhereUniqueInput
    data: XOR<ClassUpdateWithoutFormmasterInput, ClassUncheckedUpdateWithoutFormmasterInput>
  }

  export type ClassUpdateManyWithWhereWithoutFormmasterInput = {
    where: ClassScalarWhereInput
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyWithoutFormmasterInput>
  }

  export type ClassScalarWhereInput = {
    AND?: ClassScalarWhereInput | ClassScalarWhereInput[]
    OR?: ClassScalarWhereInput[]
    NOT?: ClassScalarWhereInput | ClassScalarWhereInput[]
    id?: StringFilter<"Class"> | string
    name?: StringFilter<"Class"> | string
    category?: StringFilter<"Class"> | string
    level?: StringFilter<"Class"> | string
    capacity?: IntNullableFilter<"Class"> | number | null
    formmasterid?: StringNullableFilter<"Class"> | string | null
    createdAt?: DateTimeFilter<"Class"> | Date | string
    updateAt?: DateTimeFilter<"Class"> | Date | string
  }

  export type AssignmentUpsertWithWhereUniqueWithoutTeacherInput = {
    where: AssignmentWhereUniqueInput
    update: XOR<AssignmentUpdateWithoutTeacherInput, AssignmentUncheckedUpdateWithoutTeacherInput>
    create: XOR<AssignmentCreateWithoutTeacherInput, AssignmentUncheckedCreateWithoutTeacherInput>
  }

  export type AssignmentUpdateWithWhereUniqueWithoutTeacherInput = {
    where: AssignmentWhereUniqueInput
    data: XOR<AssignmentUpdateWithoutTeacherInput, AssignmentUncheckedUpdateWithoutTeacherInput>
  }

  export type AssignmentUpdateManyWithWhereWithoutTeacherInput = {
    where: AssignmentScalarWhereInput
    data: XOR<AssignmentUpdateManyMutationInput, AssignmentUncheckedUpdateManyWithoutTeacherInput>
  }

  export type TestUpsertWithWhereUniqueWithoutTeacherInput = {
    where: TestWhereUniqueInput
    update: XOR<TestUpdateWithoutTeacherInput, TestUncheckedUpdateWithoutTeacherInput>
    create: XOR<TestCreateWithoutTeacherInput, TestUncheckedCreateWithoutTeacherInput>
  }

  export type TestUpdateWithWhereUniqueWithoutTeacherInput = {
    where: TestWhereUniqueInput
    data: XOR<TestUpdateWithoutTeacherInput, TestUncheckedUpdateWithoutTeacherInput>
  }

  export type TestUpdateManyWithWhereWithoutTeacherInput = {
    where: TestScalarWhereInput
    data: XOR<TestUpdateManyMutationInput, TestUncheckedUpdateManyWithoutTeacherInput>
  }

  export type TestScalarWhereInput = {
    AND?: TestScalarWhereInput | TestScalarWhereInput[]
    OR?: TestScalarWhereInput[]
    NOT?: TestScalarWhereInput | TestScalarWhereInput[]
    id?: StringFilter<"Test"> | string
    title?: StringFilter<"Test"> | string
    status?: EnumTestStatusFilter<"Test"> | $Enums.TestStatus
    instructions?: StringFilter<"Test"> | string
    duration?: IntFilter<"Test"> | number
    maxscore?: IntFilter<"Test"> | number
    open?: BoolFilter<"Test"> | boolean
    testdate?: DateTimeFilter<"Test"> | Date | string
    testtime?: DateTimeFilter<"Test"> | Date | string
    term?: StringFilter<"Test"> | string
    subjectid?: StringFilter<"Test"> | string
    teacherid?: StringFilter<"Test"> | string
    createdAt?: DateTimeFilter<"Test"> | Date | string
    updateAt?: DateTimeFilter<"Test"> | Date | string
  }

  export type StudentCreateWithoutParentInput = {
    id?: string
    username: string
    admissionnumber: string
    firstname: string
    surname: string
    othername?: string | null
    birthday: Date | string
    gender: $Enums.UserSex
    religion?: string | null
    studenttype: string
    house: string
    bloodgroup: string
    admissiondate?: Date | string
    email: string
    phone?: string | null
    address: string
    state: string
    lga: string
    avarta?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    school: SchoolCreateNestedOneWithoutStudentsInput
    class: ClassCreateNestedOneWithoutStudentsInput
    attendances?: AttendanceCreateNestedManyWithoutStudentInput
    assignments?: AssignmentCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    answers?: AnswerCreateNestedManyWithoutStudentInput
    grades?: StudentGradeCreateNestedManyWithoutStudentInput
    effective?: EffectiveDomainCreateNestedManyWithoutStudentInput
    psychomotive?: PsychomotiveDomainCreateNestedManyWithoutStudentInput
    payments?: PaymentCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutParentInput = {
    id?: string
    username: string
    admissionnumber: string
    firstname: string
    surname: string
    othername?: string | null
    birthday: Date | string
    gender: $Enums.UserSex
    religion?: string | null
    studenttype: string
    house: string
    bloodgroup: string
    admissiondate?: Date | string
    email: string
    phone?: string | null
    address: string
    state: string
    lga: string
    avarta?: string | null
    schoolid: string
    classid: string
    createdAt?: Date | string
    updateAt?: Date | string
    attendances?: AttendanceUncheckedCreateNestedManyWithoutStudentInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    answers?: AnswerUncheckedCreateNestedManyWithoutStudentInput
    grades?: StudentGradeUncheckedCreateNestedManyWithoutStudentInput
    effective?: EffectiveDomainUncheckedCreateNestedManyWithoutStudentInput
    psychomotive?: PsychomotiveDomainUncheckedCreateNestedManyWithoutStudentInput
    payments?: PaymentUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutParentInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutParentInput, StudentUncheckedCreateWithoutParentInput>
  }

  export type StudentCreateManyParentInputEnvelope = {
    data: StudentCreateManyParentInput | StudentCreateManyParentInput[]
    skipDuplicates?: boolean
  }

  export type StudentUpsertWithWhereUniqueWithoutParentInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutParentInput, StudentUncheckedUpdateWithoutParentInput>
    create: XOR<StudentCreateWithoutParentInput, StudentUncheckedCreateWithoutParentInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutParentInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutParentInput, StudentUncheckedUpdateWithoutParentInput>
  }

  export type StudentUpdateManyWithWhereWithoutParentInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutParentInput>
  }

  export type SchoolCreateWithoutSubjectsInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    address: string
    logo?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    students?: StudentCreateNestedManyWithoutSchoolInput
    teachers?: TeacherCreateNestedManyWithoutSchoolInput
    paymentsetups?: PaymentSetupCreateNestedManyWithoutSchoolInput
    payments?: PaymentCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutSubjectsInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    address: string
    logo?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    students?: StudentUncheckedCreateNestedManyWithoutSchoolInput
    teachers?: TeacherUncheckedCreateNestedManyWithoutSchoolInput
    paymentsetups?: PaymentSetupUncheckedCreateNestedManyWithoutSchoolInput
    payments?: PaymentUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutSubjectsInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutSubjectsInput, SchoolUncheckedCreateWithoutSubjectsInput>
  }

  export type TeacherCreateWithoutSubjectsInput = {
    id?: string
    username: string
    title: string
    firstname: string
    surname: string
    othername?: string | null
    birthday?: Date | string | null
    bloodgroup?: string | null
    gender: $Enums.UserSex
    state: string
    lga: string
    email: string
    phone?: string | null
    address: string
    avarta?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    school: SchoolCreateNestedOneWithoutTeachersInput
    classes?: ClassCreateNestedManyWithoutFormmasterInput
    assignments?: AssignmentCreateNestedManyWithoutTeacherInput
    tests?: TestCreateNestedManyWithoutTeacherInput
  }

  export type TeacherUncheckedCreateWithoutSubjectsInput = {
    id?: string
    username: string
    title: string
    firstname: string
    surname: string
    othername?: string | null
    birthday?: Date | string | null
    bloodgroup?: string | null
    gender: $Enums.UserSex
    state: string
    lga: string
    email: string
    phone?: string | null
    address: string
    avarta?: string | null
    schoolid: string
    createdAt?: Date | string
    updateAt?: Date | string
    classes?: ClassUncheckedCreateNestedManyWithoutFormmasterInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutTeacherInput
    tests?: TestUncheckedCreateNestedManyWithoutTeacherInput
  }

  export type TeacherCreateOrConnectWithoutSubjectsInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherCreateWithoutSubjectsInput, TeacherUncheckedCreateWithoutSubjectsInput>
  }

  export type AssignmentCreateWithoutSubjectInput = {
    id?: string
    title: string
    text: string
    file: string
    duedate: Date | string
    graded: boolean
    createdAt?: Date | string
    updateAt?: Date | string
    teacher: TeacherCreateNestedOneWithoutAssignmentsInput
    submissions?: SubmissionCreateNestedManyWithoutAssignmentInput
    students?: StudentCreateNestedManyWithoutAssignmentsInput
  }

  export type AssignmentUncheckedCreateWithoutSubjectInput = {
    id?: string
    title: string
    text: string
    file: string
    duedate: Date | string
    graded: boolean
    teacherid: string
    createdAt?: Date | string
    updateAt?: Date | string
    submissions?: SubmissionUncheckedCreateNestedManyWithoutAssignmentInput
    students?: StudentUncheckedCreateNestedManyWithoutAssignmentsInput
  }

  export type AssignmentCreateOrConnectWithoutSubjectInput = {
    where: AssignmentWhereUniqueInput
    create: XOR<AssignmentCreateWithoutSubjectInput, AssignmentUncheckedCreateWithoutSubjectInput>
  }

  export type AssignmentCreateManySubjectInputEnvelope = {
    data: AssignmentCreateManySubjectInput | AssignmentCreateManySubjectInput[]
    skipDuplicates?: boolean
  }

  export type SubjectGradeCreateWithoutSubjectInput = {
    id?: string
    class: ClassGradeCreateNestedOneWithoutSubjectsInput
    students?: StudentGradeCreateNestedManyWithoutSubjectGradeInput
  }

  export type SubjectGradeUncheckedCreateWithoutSubjectInput = {
    id?: string
    classid: string
    students?: StudentGradeUncheckedCreateNestedManyWithoutSubjectGradeInput
  }

  export type SubjectGradeCreateOrConnectWithoutSubjectInput = {
    where: SubjectGradeWhereUniqueInput
    create: XOR<SubjectGradeCreateWithoutSubjectInput, SubjectGradeUncheckedCreateWithoutSubjectInput>
  }

  export type SubjectGradeCreateManySubjectInputEnvelope = {
    data: SubjectGradeCreateManySubjectInput | SubjectGradeCreateManySubjectInput[]
    skipDuplicates?: boolean
  }

  export type TestCreateWithoutSubjectInput = {
    id?: string
    title: string
    status: $Enums.TestStatus
    instructions: string
    duration: number
    maxscore: number
    open: boolean
    testdate: Date | string
    testtime: Date | string
    term: string
    createdAt?: Date | string
    updateAt?: Date | string
    questions?: QuestionCreateNestedManyWithoutTestInput
    answers?: AnswerCreateNestedManyWithoutTestInput
    teacher: TeacherCreateNestedOneWithoutTestsInput
  }

  export type TestUncheckedCreateWithoutSubjectInput = {
    id?: string
    title: string
    status: $Enums.TestStatus
    instructions: string
    duration: number
    maxscore: number
    open: boolean
    testdate: Date | string
    testtime: Date | string
    term: string
    teacherid: string
    createdAt?: Date | string
    updateAt?: Date | string
    questions?: QuestionUncheckedCreateNestedManyWithoutTestInput
    answers?: AnswerUncheckedCreateNestedManyWithoutTestInput
  }

  export type TestCreateOrConnectWithoutSubjectInput = {
    where: TestWhereUniqueInput
    create: XOR<TestCreateWithoutSubjectInput, TestUncheckedCreateWithoutSubjectInput>
  }

  export type TestCreateManySubjectInputEnvelope = {
    data: TestCreateManySubjectInput | TestCreateManySubjectInput[]
    skipDuplicates?: boolean
  }

  export type SchoolUpsertWithoutSubjectsInput = {
    update: XOR<SchoolUpdateWithoutSubjectsInput, SchoolUncheckedUpdateWithoutSubjectsInput>
    create: XOR<SchoolCreateWithoutSubjectsInput, SchoolUncheckedCreateWithoutSubjectsInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutSubjectsInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutSubjectsInput, SchoolUncheckedUpdateWithoutSubjectsInput>
  }

  export type SchoolUpdateWithoutSubjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    students?: StudentUpdateManyWithoutSchoolNestedInput
    teachers?: TeacherUpdateManyWithoutSchoolNestedInput
    paymentsetups?: PaymentSetupUpdateManyWithoutSchoolNestedInput
    payments?: PaymentUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutSubjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    students?: StudentUncheckedUpdateManyWithoutSchoolNestedInput
    teachers?: TeacherUncheckedUpdateManyWithoutSchoolNestedInput
    paymentsetups?: PaymentSetupUncheckedUpdateManyWithoutSchoolNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type TeacherUpsertWithWhereUniqueWithoutSubjectsInput = {
    where: TeacherWhereUniqueInput
    update: XOR<TeacherUpdateWithoutSubjectsInput, TeacherUncheckedUpdateWithoutSubjectsInput>
    create: XOR<TeacherCreateWithoutSubjectsInput, TeacherUncheckedCreateWithoutSubjectsInput>
  }

  export type TeacherUpdateWithWhereUniqueWithoutSubjectsInput = {
    where: TeacherWhereUniqueInput
    data: XOR<TeacherUpdateWithoutSubjectsInput, TeacherUncheckedUpdateWithoutSubjectsInput>
  }

  export type TeacherUpdateManyWithWhereWithoutSubjectsInput = {
    where: TeacherScalarWhereInput
    data: XOR<TeacherUpdateManyMutationInput, TeacherUncheckedUpdateManyWithoutSubjectsInput>
  }

  export type AssignmentUpsertWithWhereUniqueWithoutSubjectInput = {
    where: AssignmentWhereUniqueInput
    update: XOR<AssignmentUpdateWithoutSubjectInput, AssignmentUncheckedUpdateWithoutSubjectInput>
    create: XOR<AssignmentCreateWithoutSubjectInput, AssignmentUncheckedCreateWithoutSubjectInput>
  }

  export type AssignmentUpdateWithWhereUniqueWithoutSubjectInput = {
    where: AssignmentWhereUniqueInput
    data: XOR<AssignmentUpdateWithoutSubjectInput, AssignmentUncheckedUpdateWithoutSubjectInput>
  }

  export type AssignmentUpdateManyWithWhereWithoutSubjectInput = {
    where: AssignmentScalarWhereInput
    data: XOR<AssignmentUpdateManyMutationInput, AssignmentUncheckedUpdateManyWithoutSubjectInput>
  }

  export type SubjectGradeUpsertWithWhereUniqueWithoutSubjectInput = {
    where: SubjectGradeWhereUniqueInput
    update: XOR<SubjectGradeUpdateWithoutSubjectInput, SubjectGradeUncheckedUpdateWithoutSubjectInput>
    create: XOR<SubjectGradeCreateWithoutSubjectInput, SubjectGradeUncheckedCreateWithoutSubjectInput>
  }

  export type SubjectGradeUpdateWithWhereUniqueWithoutSubjectInput = {
    where: SubjectGradeWhereUniqueInput
    data: XOR<SubjectGradeUpdateWithoutSubjectInput, SubjectGradeUncheckedUpdateWithoutSubjectInput>
  }

  export type SubjectGradeUpdateManyWithWhereWithoutSubjectInput = {
    where: SubjectGradeScalarWhereInput
    data: XOR<SubjectGradeUpdateManyMutationInput, SubjectGradeUncheckedUpdateManyWithoutSubjectInput>
  }

  export type SubjectGradeScalarWhereInput = {
    AND?: SubjectGradeScalarWhereInput | SubjectGradeScalarWhereInput[]
    OR?: SubjectGradeScalarWhereInput[]
    NOT?: SubjectGradeScalarWhereInput | SubjectGradeScalarWhereInput[]
    id?: StringFilter<"SubjectGrade"> | string
    subjectid?: StringFilter<"SubjectGrade"> | string
    classid?: StringFilter<"SubjectGrade"> | string
  }

  export type TestUpsertWithWhereUniqueWithoutSubjectInput = {
    where: TestWhereUniqueInput
    update: XOR<TestUpdateWithoutSubjectInput, TestUncheckedUpdateWithoutSubjectInput>
    create: XOR<TestCreateWithoutSubjectInput, TestUncheckedCreateWithoutSubjectInput>
  }

  export type TestUpdateWithWhereUniqueWithoutSubjectInput = {
    where: TestWhereUniqueInput
    data: XOR<TestUpdateWithoutSubjectInput, TestUncheckedUpdateWithoutSubjectInput>
  }

  export type TestUpdateManyWithWhereWithoutSubjectInput = {
    where: TestScalarWhereInput
    data: XOR<TestUpdateManyMutationInput, TestUncheckedUpdateManyWithoutSubjectInput>
  }

  export type TeacherCreateWithoutClassesInput = {
    id?: string
    username: string
    title: string
    firstname: string
    surname: string
    othername?: string | null
    birthday?: Date | string | null
    bloodgroup?: string | null
    gender: $Enums.UserSex
    state: string
    lga: string
    email: string
    phone?: string | null
    address: string
    avarta?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    school: SchoolCreateNestedOneWithoutTeachersInput
    subjects?: SubjectCreateNestedManyWithoutTeachersInput
    assignments?: AssignmentCreateNestedManyWithoutTeacherInput
    tests?: TestCreateNestedManyWithoutTeacherInput
  }

  export type TeacherUncheckedCreateWithoutClassesInput = {
    id?: string
    username: string
    title: string
    firstname: string
    surname: string
    othername?: string | null
    birthday?: Date | string | null
    bloodgroup?: string | null
    gender: $Enums.UserSex
    state: string
    lga: string
    email: string
    phone?: string | null
    address: string
    avarta?: string | null
    schoolid: string
    createdAt?: Date | string
    updateAt?: Date | string
    subjects?: SubjectUncheckedCreateNestedManyWithoutTeachersInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutTeacherInput
    tests?: TestUncheckedCreateNestedManyWithoutTeacherInput
  }

  export type TeacherCreateOrConnectWithoutClassesInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherCreateWithoutClassesInput, TeacherUncheckedCreateWithoutClassesInput>
  }

  export type StudentCreateWithoutClassInput = {
    id?: string
    username: string
    admissionnumber: string
    firstname: string
    surname: string
    othername?: string | null
    birthday: Date | string
    gender: $Enums.UserSex
    religion?: string | null
    studenttype: string
    house: string
    bloodgroup: string
    admissiondate?: Date | string
    email: string
    phone?: string | null
    address: string
    state: string
    lga: string
    avarta?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    parent: ParentCreateNestedOneWithoutStudentsInput
    school: SchoolCreateNestedOneWithoutStudentsInput
    attendances?: AttendanceCreateNestedManyWithoutStudentInput
    assignments?: AssignmentCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    answers?: AnswerCreateNestedManyWithoutStudentInput
    grades?: StudentGradeCreateNestedManyWithoutStudentInput
    effective?: EffectiveDomainCreateNestedManyWithoutStudentInput
    psychomotive?: PsychomotiveDomainCreateNestedManyWithoutStudentInput
    payments?: PaymentCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutClassInput = {
    id?: string
    username: string
    admissionnumber: string
    firstname: string
    surname: string
    othername?: string | null
    birthday: Date | string
    gender: $Enums.UserSex
    religion?: string | null
    studenttype: string
    house: string
    bloodgroup: string
    admissiondate?: Date | string
    email: string
    phone?: string | null
    address: string
    state: string
    lga: string
    avarta?: string | null
    parentid: string
    schoolid: string
    createdAt?: Date | string
    updateAt?: Date | string
    attendances?: AttendanceUncheckedCreateNestedManyWithoutStudentInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    answers?: AnswerUncheckedCreateNestedManyWithoutStudentInput
    grades?: StudentGradeUncheckedCreateNestedManyWithoutStudentInput
    effective?: EffectiveDomainUncheckedCreateNestedManyWithoutStudentInput
    psychomotive?: PsychomotiveDomainUncheckedCreateNestedManyWithoutStudentInput
    payments?: PaymentUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutClassInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutClassInput, StudentUncheckedCreateWithoutClassInput>
  }

  export type StudentCreateManyClassInputEnvelope = {
    data: StudentCreateManyClassInput | StudentCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type ClassGradeCreateWithoutClassInput = {
    id?: string
    grade: GradeCreateNestedOneWithoutGradingsInput
    subjects?: SubjectGradeCreateNestedManyWithoutClassInput
  }

  export type ClassGradeUncheckedCreateWithoutClassInput = {
    id?: string
    gradeid: string
    subjects?: SubjectGradeUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassGradeCreateOrConnectWithoutClassInput = {
    where: ClassGradeWhereUniqueInput
    create: XOR<ClassGradeCreateWithoutClassInput, ClassGradeUncheckedCreateWithoutClassInput>
  }

  export type ClassGradeCreateManyClassInputEnvelope = {
    data: ClassGradeCreateManyClassInput | ClassGradeCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type EventCreateWithoutClassInput = {
    title: string
    description: string
    startTime: Date | string
    endTime: Date | string
  }

  export type EventUncheckedCreateWithoutClassInput = {
    id?: number
    title: string
    description: string
    startTime: Date | string
    endTime: Date | string
  }

  export type EventCreateOrConnectWithoutClassInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutClassInput, EventUncheckedCreateWithoutClassInput>
  }

  export type EventCreateManyClassInputEnvelope = {
    data: EventCreateManyClassInput | EventCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type AnnouncementCreateWithoutClassInput = {
    title: string
    description: string
    date: Date | string
  }

  export type AnnouncementUncheckedCreateWithoutClassInput = {
    id?: number
    title: string
    description: string
    date: Date | string
  }

  export type AnnouncementCreateOrConnectWithoutClassInput = {
    where: AnnouncementWhereUniqueInput
    create: XOR<AnnouncementCreateWithoutClassInput, AnnouncementUncheckedCreateWithoutClassInput>
  }

  export type AnnouncementCreateManyClassInputEnvelope = {
    data: AnnouncementCreateManyClassInput | AnnouncementCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type TeacherUpsertWithoutClassesInput = {
    update: XOR<TeacherUpdateWithoutClassesInput, TeacherUncheckedUpdateWithoutClassesInput>
    create: XOR<TeacherCreateWithoutClassesInput, TeacherUncheckedCreateWithoutClassesInput>
    where?: TeacherWhereInput
  }

  export type TeacherUpdateToOneWithWhereWithoutClassesInput = {
    where?: TeacherWhereInput
    data: XOR<TeacherUpdateWithoutClassesInput, TeacherUncheckedUpdateWithoutClassesInput>
  }

  export type TeacherUpdateWithoutClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodgroup?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutTeachersNestedInput
    subjects?: SubjectUpdateManyWithoutTeachersNestedInput
    assignments?: AssignmentUpdateManyWithoutTeacherNestedInput
    tests?: TestUpdateManyWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateWithoutClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodgroup?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    schoolid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subjects?: SubjectUncheckedUpdateManyWithoutTeachersNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    tests?: TestUncheckedUpdateManyWithoutTeacherNestedInput
  }

  export type StudentUpsertWithWhereUniqueWithoutClassInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutClassInput, StudentUncheckedUpdateWithoutClassInput>
    create: XOR<StudentCreateWithoutClassInput, StudentUncheckedCreateWithoutClassInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutClassInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutClassInput, StudentUncheckedUpdateWithoutClassInput>
  }

  export type StudentUpdateManyWithWhereWithoutClassInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutClassInput>
  }

  export type ClassGradeUpsertWithWhereUniqueWithoutClassInput = {
    where: ClassGradeWhereUniqueInput
    update: XOR<ClassGradeUpdateWithoutClassInput, ClassGradeUncheckedUpdateWithoutClassInput>
    create: XOR<ClassGradeCreateWithoutClassInput, ClassGradeUncheckedCreateWithoutClassInput>
  }

  export type ClassGradeUpdateWithWhereUniqueWithoutClassInput = {
    where: ClassGradeWhereUniqueInput
    data: XOR<ClassGradeUpdateWithoutClassInput, ClassGradeUncheckedUpdateWithoutClassInput>
  }

  export type ClassGradeUpdateManyWithWhereWithoutClassInput = {
    where: ClassGradeScalarWhereInput
    data: XOR<ClassGradeUpdateManyMutationInput, ClassGradeUncheckedUpdateManyWithoutClassInput>
  }

  export type ClassGradeScalarWhereInput = {
    AND?: ClassGradeScalarWhereInput | ClassGradeScalarWhereInput[]
    OR?: ClassGradeScalarWhereInput[]
    NOT?: ClassGradeScalarWhereInput | ClassGradeScalarWhereInput[]
    id?: StringFilter<"ClassGrade"> | string
    classid?: StringFilter<"ClassGrade"> | string
    gradeid?: StringFilter<"ClassGrade"> | string
  }

  export type EventUpsertWithWhereUniqueWithoutClassInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutClassInput, EventUncheckedUpdateWithoutClassInput>
    create: XOR<EventCreateWithoutClassInput, EventUncheckedCreateWithoutClassInput>
  }

  export type EventUpdateWithWhereUniqueWithoutClassInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutClassInput, EventUncheckedUpdateWithoutClassInput>
  }

  export type EventUpdateManyWithWhereWithoutClassInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutClassInput>
  }

  export type EventScalarWhereInput = {
    AND?: EventScalarWhereInput | EventScalarWhereInput[]
    OR?: EventScalarWhereInput[]
    NOT?: EventScalarWhereInput | EventScalarWhereInput[]
    id?: IntFilter<"Event"> | number
    title?: StringFilter<"Event"> | string
    description?: StringFilter<"Event"> | string
    startTime?: DateTimeFilter<"Event"> | Date | string
    endTime?: DateTimeFilter<"Event"> | Date | string
    classId?: StringNullableFilter<"Event"> | string | null
  }

  export type AnnouncementUpsertWithWhereUniqueWithoutClassInput = {
    where: AnnouncementWhereUniqueInput
    update: XOR<AnnouncementUpdateWithoutClassInput, AnnouncementUncheckedUpdateWithoutClassInput>
    create: XOR<AnnouncementCreateWithoutClassInput, AnnouncementUncheckedCreateWithoutClassInput>
  }

  export type AnnouncementUpdateWithWhereUniqueWithoutClassInput = {
    where: AnnouncementWhereUniqueInput
    data: XOR<AnnouncementUpdateWithoutClassInput, AnnouncementUncheckedUpdateWithoutClassInput>
  }

  export type AnnouncementUpdateManyWithWhereWithoutClassInput = {
    where: AnnouncementScalarWhereInput
    data: XOR<AnnouncementUpdateManyMutationInput, AnnouncementUncheckedUpdateManyWithoutClassInput>
  }

  export type AnnouncementScalarWhereInput = {
    AND?: AnnouncementScalarWhereInput | AnnouncementScalarWhereInput[]
    OR?: AnnouncementScalarWhereInput[]
    NOT?: AnnouncementScalarWhereInput | AnnouncementScalarWhereInput[]
    id?: IntFilter<"Announcement"> | number
    title?: StringFilter<"Announcement"> | string
    description?: StringFilter<"Announcement"> | string
    date?: DateTimeFilter<"Announcement"> | Date | string
    classId?: StringNullableFilter<"Announcement"> | string | null
  }

  export type SchoolCreateWithoutPaymentsetupsInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    address: string
    logo?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    students?: StudentCreateNestedManyWithoutSchoolInput
    teachers?: TeacherCreateNestedManyWithoutSchoolInput
    subjects?: SubjectCreateNestedManyWithoutSchoolInput
    payments?: PaymentCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutPaymentsetupsInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    address: string
    logo?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    students?: StudentUncheckedCreateNestedManyWithoutSchoolInput
    teachers?: TeacherUncheckedCreateNestedManyWithoutSchoolInput
    subjects?: SubjectUncheckedCreateNestedManyWithoutSchoolInput
    payments?: PaymentUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutPaymentsetupsInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutPaymentsetupsInput, SchoolUncheckedCreateWithoutPaymentsetupsInput>
  }

  export type SchoolUpsertWithoutPaymentsetupsInput = {
    update: XOR<SchoolUpdateWithoutPaymentsetupsInput, SchoolUncheckedUpdateWithoutPaymentsetupsInput>
    create: XOR<SchoolCreateWithoutPaymentsetupsInput, SchoolUncheckedCreateWithoutPaymentsetupsInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutPaymentsetupsInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutPaymentsetupsInput, SchoolUncheckedUpdateWithoutPaymentsetupsInput>
  }

  export type SchoolUpdateWithoutPaymentsetupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    students?: StudentUpdateManyWithoutSchoolNestedInput
    teachers?: TeacherUpdateManyWithoutSchoolNestedInput
    subjects?: SubjectUpdateManyWithoutSchoolNestedInput
    payments?: PaymentUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutPaymentsetupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    students?: StudentUncheckedUpdateManyWithoutSchoolNestedInput
    teachers?: TeacherUncheckedUpdateManyWithoutSchoolNestedInput
    subjects?: SubjectUncheckedUpdateManyWithoutSchoolNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolCreateWithoutPaymentsInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    address: string
    logo?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    students?: StudentCreateNestedManyWithoutSchoolInput
    teachers?: TeacherCreateNestedManyWithoutSchoolInput
    subjects?: SubjectCreateNestedManyWithoutSchoolInput
    paymentsetups?: PaymentSetupCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutPaymentsInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    address: string
    logo?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    students?: StudentUncheckedCreateNestedManyWithoutSchoolInput
    teachers?: TeacherUncheckedCreateNestedManyWithoutSchoolInput
    subjects?: SubjectUncheckedCreateNestedManyWithoutSchoolInput
    paymentsetups?: PaymentSetupUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutPaymentsInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutPaymentsInput, SchoolUncheckedCreateWithoutPaymentsInput>
  }

  export type StudentCreateWithoutPaymentsInput = {
    id?: string
    username: string
    admissionnumber: string
    firstname: string
    surname: string
    othername?: string | null
    birthday: Date | string
    gender: $Enums.UserSex
    religion?: string | null
    studenttype: string
    house: string
    bloodgroup: string
    admissiondate?: Date | string
    email: string
    phone?: string | null
    address: string
    state: string
    lga: string
    avarta?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    parent: ParentCreateNestedOneWithoutStudentsInput
    school: SchoolCreateNestedOneWithoutStudentsInput
    class: ClassCreateNestedOneWithoutStudentsInput
    attendances?: AttendanceCreateNestedManyWithoutStudentInput
    assignments?: AssignmentCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    answers?: AnswerCreateNestedManyWithoutStudentInput
    grades?: StudentGradeCreateNestedManyWithoutStudentInput
    effective?: EffectiveDomainCreateNestedManyWithoutStudentInput
    psychomotive?: PsychomotiveDomainCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutPaymentsInput = {
    id?: string
    username: string
    admissionnumber: string
    firstname: string
    surname: string
    othername?: string | null
    birthday: Date | string
    gender: $Enums.UserSex
    religion?: string | null
    studenttype: string
    house: string
    bloodgroup: string
    admissiondate?: Date | string
    email: string
    phone?: string | null
    address: string
    state: string
    lga: string
    avarta?: string | null
    parentid: string
    schoolid: string
    classid: string
    createdAt?: Date | string
    updateAt?: Date | string
    attendances?: AttendanceUncheckedCreateNestedManyWithoutStudentInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    answers?: AnswerUncheckedCreateNestedManyWithoutStudentInput
    grades?: StudentGradeUncheckedCreateNestedManyWithoutStudentInput
    effective?: EffectiveDomainUncheckedCreateNestedManyWithoutStudentInput
    psychomotive?: PsychomotiveDomainUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutPaymentsInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutPaymentsInput, StudentUncheckedCreateWithoutPaymentsInput>
  }

  export type SchoolUpsertWithoutPaymentsInput = {
    update: XOR<SchoolUpdateWithoutPaymentsInput, SchoolUncheckedUpdateWithoutPaymentsInput>
    create: XOR<SchoolCreateWithoutPaymentsInput, SchoolUncheckedCreateWithoutPaymentsInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutPaymentsInput, SchoolUncheckedUpdateWithoutPaymentsInput>
  }

  export type SchoolUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    students?: StudentUpdateManyWithoutSchoolNestedInput
    teachers?: TeacherUpdateManyWithoutSchoolNestedInput
    subjects?: SubjectUpdateManyWithoutSchoolNestedInput
    paymentsetups?: PaymentSetupUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    students?: StudentUncheckedUpdateManyWithoutSchoolNestedInput
    teachers?: TeacherUncheckedUpdateManyWithoutSchoolNestedInput
    subjects?: SubjectUncheckedUpdateManyWithoutSchoolNestedInput
    paymentsetups?: PaymentSetupUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type StudentUpsertWithoutPaymentsInput = {
    update: XOR<StudentUpdateWithoutPaymentsInput, StudentUncheckedUpdateWithoutPaymentsInput>
    create: XOR<StudentCreateWithoutPaymentsInput, StudentUncheckedCreateWithoutPaymentsInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutPaymentsInput, StudentUncheckedUpdateWithoutPaymentsInput>
  }

  export type StudentUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    admissionnumber?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    studenttype?: StringFieldUpdateOperationsInput | string
    house?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
    admissiondate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: ParentUpdateOneRequiredWithoutStudentsNestedInput
    school?: SchoolUpdateOneRequiredWithoutStudentsNestedInput
    class?: ClassUpdateOneRequiredWithoutStudentsNestedInput
    attendances?: AttendanceUpdateManyWithoutStudentNestedInput
    assignments?: AssignmentUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    answers?: AnswerUpdateManyWithoutStudentNestedInput
    grades?: StudentGradeUpdateManyWithoutStudentNestedInput
    effective?: EffectiveDomainUpdateManyWithoutStudentNestedInput
    psychomotive?: PsychomotiveDomainUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    admissionnumber?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    studenttype?: StringFieldUpdateOperationsInput | string
    house?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
    admissiondate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    parentid?: StringFieldUpdateOperationsInput | string
    schoolid?: StringFieldUpdateOperationsInput | string
    classid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendances?: AttendanceUncheckedUpdateManyWithoutStudentNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    answers?: AnswerUncheckedUpdateManyWithoutStudentNestedInput
    grades?: StudentGradeUncheckedUpdateManyWithoutStudentNestedInput
    effective?: EffectiveDomainUncheckedUpdateManyWithoutStudentNestedInput
    psychomotive?: PsychomotiveDomainUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type SubjectCreateWithoutAssignmentsInput = {
    id?: string
    name: string
    category: string
    createdAt?: Date | string
    updateAt?: Date | string
    school: SchoolCreateNestedOneWithoutSubjectsInput
    teachers?: TeacherCreateNestedManyWithoutSubjectsInput
    grades?: SubjectGradeCreateNestedManyWithoutSubjectInput
    tests?: TestCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutAssignmentsInput = {
    id?: string
    name: string
    category: string
    schoolid: string
    createdAt?: Date | string
    updateAt?: Date | string
    teachers?: TeacherUncheckedCreateNestedManyWithoutSubjectsInput
    grades?: SubjectGradeUncheckedCreateNestedManyWithoutSubjectInput
    tests?: TestUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutAssignmentsInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutAssignmentsInput, SubjectUncheckedCreateWithoutAssignmentsInput>
  }

  export type TeacherCreateWithoutAssignmentsInput = {
    id?: string
    username: string
    title: string
    firstname: string
    surname: string
    othername?: string | null
    birthday?: Date | string | null
    bloodgroup?: string | null
    gender: $Enums.UserSex
    state: string
    lga: string
    email: string
    phone?: string | null
    address: string
    avarta?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    school: SchoolCreateNestedOneWithoutTeachersInput
    subjects?: SubjectCreateNestedManyWithoutTeachersInput
    classes?: ClassCreateNestedManyWithoutFormmasterInput
    tests?: TestCreateNestedManyWithoutTeacherInput
  }

  export type TeacherUncheckedCreateWithoutAssignmentsInput = {
    id?: string
    username: string
    title: string
    firstname: string
    surname: string
    othername?: string | null
    birthday?: Date | string | null
    bloodgroup?: string | null
    gender: $Enums.UserSex
    state: string
    lga: string
    email: string
    phone?: string | null
    address: string
    avarta?: string | null
    schoolid: string
    createdAt?: Date | string
    updateAt?: Date | string
    subjects?: SubjectUncheckedCreateNestedManyWithoutTeachersInput
    classes?: ClassUncheckedCreateNestedManyWithoutFormmasterInput
    tests?: TestUncheckedCreateNestedManyWithoutTeacherInput
  }

  export type TeacherCreateOrConnectWithoutAssignmentsInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherCreateWithoutAssignmentsInput, TeacherUncheckedCreateWithoutAssignmentsInput>
  }

  export type SubmissionCreateWithoutAssignmentInput = {
    id?: string
    answer: string
    feedback: string
    score: number
    file: string
    createdAt?: Date | string
    updateAt?: Date | string
    student: StudentCreateNestedOneWithoutSubmissionsInput
  }

  export type SubmissionUncheckedCreateWithoutAssignmentInput = {
    id?: string
    answer: string
    feedback: string
    score: number
    file: string
    studentId: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type SubmissionCreateOrConnectWithoutAssignmentInput = {
    where: SubmissionWhereUniqueInput
    create: XOR<SubmissionCreateWithoutAssignmentInput, SubmissionUncheckedCreateWithoutAssignmentInput>
  }

  export type SubmissionCreateManyAssignmentInputEnvelope = {
    data: SubmissionCreateManyAssignmentInput | SubmissionCreateManyAssignmentInput[]
    skipDuplicates?: boolean
  }

  export type StudentCreateWithoutAssignmentsInput = {
    id?: string
    username: string
    admissionnumber: string
    firstname: string
    surname: string
    othername?: string | null
    birthday: Date | string
    gender: $Enums.UserSex
    religion?: string | null
    studenttype: string
    house: string
    bloodgroup: string
    admissiondate?: Date | string
    email: string
    phone?: string | null
    address: string
    state: string
    lga: string
    avarta?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    parent: ParentCreateNestedOneWithoutStudentsInput
    school: SchoolCreateNestedOneWithoutStudentsInput
    class: ClassCreateNestedOneWithoutStudentsInput
    attendances?: AttendanceCreateNestedManyWithoutStudentInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    answers?: AnswerCreateNestedManyWithoutStudentInput
    grades?: StudentGradeCreateNestedManyWithoutStudentInput
    effective?: EffectiveDomainCreateNestedManyWithoutStudentInput
    psychomotive?: PsychomotiveDomainCreateNestedManyWithoutStudentInput
    payments?: PaymentCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutAssignmentsInput = {
    id?: string
    username: string
    admissionnumber: string
    firstname: string
    surname: string
    othername?: string | null
    birthday: Date | string
    gender: $Enums.UserSex
    religion?: string | null
    studenttype: string
    house: string
    bloodgroup: string
    admissiondate?: Date | string
    email: string
    phone?: string | null
    address: string
    state: string
    lga: string
    avarta?: string | null
    parentid: string
    schoolid: string
    classid: string
    createdAt?: Date | string
    updateAt?: Date | string
    attendances?: AttendanceUncheckedCreateNestedManyWithoutStudentInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    answers?: AnswerUncheckedCreateNestedManyWithoutStudentInput
    grades?: StudentGradeUncheckedCreateNestedManyWithoutStudentInput
    effective?: EffectiveDomainUncheckedCreateNestedManyWithoutStudentInput
    psychomotive?: PsychomotiveDomainUncheckedCreateNestedManyWithoutStudentInput
    payments?: PaymentUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutAssignmentsInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutAssignmentsInput, StudentUncheckedCreateWithoutAssignmentsInput>
  }

  export type SubjectUpsertWithoutAssignmentsInput = {
    update: XOR<SubjectUpdateWithoutAssignmentsInput, SubjectUncheckedUpdateWithoutAssignmentsInput>
    create: XOR<SubjectCreateWithoutAssignmentsInput, SubjectUncheckedCreateWithoutAssignmentsInput>
    where?: SubjectWhereInput
  }

  export type SubjectUpdateToOneWithWhereWithoutAssignmentsInput = {
    where?: SubjectWhereInput
    data: XOR<SubjectUpdateWithoutAssignmentsInput, SubjectUncheckedUpdateWithoutAssignmentsInput>
  }

  export type SubjectUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutSubjectsNestedInput
    teachers?: TeacherUpdateManyWithoutSubjectsNestedInput
    grades?: SubjectGradeUpdateManyWithoutSubjectNestedInput
    tests?: TestUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    schoolid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teachers?: TeacherUncheckedUpdateManyWithoutSubjectsNestedInput
    grades?: SubjectGradeUncheckedUpdateManyWithoutSubjectNestedInput
    tests?: TestUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type TeacherUpsertWithoutAssignmentsInput = {
    update: XOR<TeacherUpdateWithoutAssignmentsInput, TeacherUncheckedUpdateWithoutAssignmentsInput>
    create: XOR<TeacherCreateWithoutAssignmentsInput, TeacherUncheckedCreateWithoutAssignmentsInput>
    where?: TeacherWhereInput
  }

  export type TeacherUpdateToOneWithWhereWithoutAssignmentsInput = {
    where?: TeacherWhereInput
    data: XOR<TeacherUpdateWithoutAssignmentsInput, TeacherUncheckedUpdateWithoutAssignmentsInput>
  }

  export type TeacherUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodgroup?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutTeachersNestedInput
    subjects?: SubjectUpdateManyWithoutTeachersNestedInput
    classes?: ClassUpdateManyWithoutFormmasterNestedInput
    tests?: TestUpdateManyWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodgroup?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    schoolid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subjects?: SubjectUncheckedUpdateManyWithoutTeachersNestedInput
    classes?: ClassUncheckedUpdateManyWithoutFormmasterNestedInput
    tests?: TestUncheckedUpdateManyWithoutTeacherNestedInput
  }

  export type SubmissionUpsertWithWhereUniqueWithoutAssignmentInput = {
    where: SubmissionWhereUniqueInput
    update: XOR<SubmissionUpdateWithoutAssignmentInput, SubmissionUncheckedUpdateWithoutAssignmentInput>
    create: XOR<SubmissionCreateWithoutAssignmentInput, SubmissionUncheckedCreateWithoutAssignmentInput>
  }

  export type SubmissionUpdateWithWhereUniqueWithoutAssignmentInput = {
    where: SubmissionWhereUniqueInput
    data: XOR<SubmissionUpdateWithoutAssignmentInput, SubmissionUncheckedUpdateWithoutAssignmentInput>
  }

  export type SubmissionUpdateManyWithWhereWithoutAssignmentInput = {
    where: SubmissionScalarWhereInput
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyWithoutAssignmentInput>
  }

  export type StudentUpsertWithWhereUniqueWithoutAssignmentsInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutAssignmentsInput, StudentUncheckedUpdateWithoutAssignmentsInput>
    create: XOR<StudentCreateWithoutAssignmentsInput, StudentUncheckedCreateWithoutAssignmentsInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutAssignmentsInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutAssignmentsInput, StudentUncheckedUpdateWithoutAssignmentsInput>
  }

  export type StudentUpdateManyWithWhereWithoutAssignmentsInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutAssignmentsInput>
  }

  export type QuestionCreateWithoutTestInput = {
    id?: string
    text: string
    options: JsonNullValueInput | InputJsonValue
    answer: string
  }

  export type QuestionUncheckedCreateWithoutTestInput = {
    id?: string
    text: string
    options: JsonNullValueInput | InputJsonValue
    answer: string
  }

  export type QuestionCreateOrConnectWithoutTestInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutTestInput, QuestionUncheckedCreateWithoutTestInput>
  }

  export type QuestionCreateManyTestInputEnvelope = {
    data: QuestionCreateManyTestInput | QuestionCreateManyTestInput[]
    skipDuplicates?: boolean
  }

  export type AnswerCreateWithoutTestInput = {
    id?: string
    score: number
    createdAt?: Date | string
    updateAt?: Date | string
    student: StudentCreateNestedOneWithoutAnswersInput
  }

  export type AnswerUncheckedCreateWithoutTestInput = {
    id?: string
    score: number
    studentid: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type AnswerCreateOrConnectWithoutTestInput = {
    where: AnswerWhereUniqueInput
    create: XOR<AnswerCreateWithoutTestInput, AnswerUncheckedCreateWithoutTestInput>
  }

  export type AnswerCreateManyTestInputEnvelope = {
    data: AnswerCreateManyTestInput | AnswerCreateManyTestInput[]
    skipDuplicates?: boolean
  }

  export type SubjectCreateWithoutTestsInput = {
    id?: string
    name: string
    category: string
    createdAt?: Date | string
    updateAt?: Date | string
    school: SchoolCreateNestedOneWithoutSubjectsInput
    teachers?: TeacherCreateNestedManyWithoutSubjectsInput
    assignments?: AssignmentCreateNestedManyWithoutSubjectInput
    grades?: SubjectGradeCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutTestsInput = {
    id?: string
    name: string
    category: string
    schoolid: string
    createdAt?: Date | string
    updateAt?: Date | string
    teachers?: TeacherUncheckedCreateNestedManyWithoutSubjectsInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutSubjectInput
    grades?: SubjectGradeUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutTestsInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutTestsInput, SubjectUncheckedCreateWithoutTestsInput>
  }

  export type TeacherCreateWithoutTestsInput = {
    id?: string
    username: string
    title: string
    firstname: string
    surname: string
    othername?: string | null
    birthday?: Date | string | null
    bloodgroup?: string | null
    gender: $Enums.UserSex
    state: string
    lga: string
    email: string
    phone?: string | null
    address: string
    avarta?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    school: SchoolCreateNestedOneWithoutTeachersInput
    subjects?: SubjectCreateNestedManyWithoutTeachersInput
    classes?: ClassCreateNestedManyWithoutFormmasterInput
    assignments?: AssignmentCreateNestedManyWithoutTeacherInput
  }

  export type TeacherUncheckedCreateWithoutTestsInput = {
    id?: string
    username: string
    title: string
    firstname: string
    surname: string
    othername?: string | null
    birthday?: Date | string | null
    bloodgroup?: string | null
    gender: $Enums.UserSex
    state: string
    lga: string
    email: string
    phone?: string | null
    address: string
    avarta?: string | null
    schoolid: string
    createdAt?: Date | string
    updateAt?: Date | string
    subjects?: SubjectUncheckedCreateNestedManyWithoutTeachersInput
    classes?: ClassUncheckedCreateNestedManyWithoutFormmasterInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutTeacherInput
  }

  export type TeacherCreateOrConnectWithoutTestsInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherCreateWithoutTestsInput, TeacherUncheckedCreateWithoutTestsInput>
  }

  export type QuestionUpsertWithWhereUniqueWithoutTestInput = {
    where: QuestionWhereUniqueInput
    update: XOR<QuestionUpdateWithoutTestInput, QuestionUncheckedUpdateWithoutTestInput>
    create: XOR<QuestionCreateWithoutTestInput, QuestionUncheckedCreateWithoutTestInput>
  }

  export type QuestionUpdateWithWhereUniqueWithoutTestInput = {
    where: QuestionWhereUniqueInput
    data: XOR<QuestionUpdateWithoutTestInput, QuestionUncheckedUpdateWithoutTestInput>
  }

  export type QuestionUpdateManyWithWhereWithoutTestInput = {
    where: QuestionScalarWhereInput
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyWithoutTestInput>
  }

  export type QuestionScalarWhereInput = {
    AND?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
    OR?: QuestionScalarWhereInput[]
    NOT?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
    id?: StringFilter<"Question"> | string
    text?: StringFilter<"Question"> | string
    options?: JsonFilter<"Question">
    answer?: StringFilter<"Question"> | string
    testid?: StringFilter<"Question"> | string
  }

  export type AnswerUpsertWithWhereUniqueWithoutTestInput = {
    where: AnswerWhereUniqueInput
    update: XOR<AnswerUpdateWithoutTestInput, AnswerUncheckedUpdateWithoutTestInput>
    create: XOR<AnswerCreateWithoutTestInput, AnswerUncheckedCreateWithoutTestInput>
  }

  export type AnswerUpdateWithWhereUniqueWithoutTestInput = {
    where: AnswerWhereUniqueInput
    data: XOR<AnswerUpdateWithoutTestInput, AnswerUncheckedUpdateWithoutTestInput>
  }

  export type AnswerUpdateManyWithWhereWithoutTestInput = {
    where: AnswerScalarWhereInput
    data: XOR<AnswerUpdateManyMutationInput, AnswerUncheckedUpdateManyWithoutTestInput>
  }

  export type SubjectUpsertWithoutTestsInput = {
    update: XOR<SubjectUpdateWithoutTestsInput, SubjectUncheckedUpdateWithoutTestsInput>
    create: XOR<SubjectCreateWithoutTestsInput, SubjectUncheckedCreateWithoutTestsInput>
    where?: SubjectWhereInput
  }

  export type SubjectUpdateToOneWithWhereWithoutTestsInput = {
    where?: SubjectWhereInput
    data: XOR<SubjectUpdateWithoutTestsInput, SubjectUncheckedUpdateWithoutTestsInput>
  }

  export type SubjectUpdateWithoutTestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutSubjectsNestedInput
    teachers?: TeacherUpdateManyWithoutSubjectsNestedInput
    assignments?: AssignmentUpdateManyWithoutSubjectNestedInput
    grades?: SubjectGradeUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutTestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    schoolid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teachers?: TeacherUncheckedUpdateManyWithoutSubjectsNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutSubjectNestedInput
    grades?: SubjectGradeUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type TeacherUpsertWithoutTestsInput = {
    update: XOR<TeacherUpdateWithoutTestsInput, TeacherUncheckedUpdateWithoutTestsInput>
    create: XOR<TeacherCreateWithoutTestsInput, TeacherUncheckedCreateWithoutTestsInput>
    where?: TeacherWhereInput
  }

  export type TeacherUpdateToOneWithWhereWithoutTestsInput = {
    where?: TeacherWhereInput
    data: XOR<TeacherUpdateWithoutTestsInput, TeacherUncheckedUpdateWithoutTestsInput>
  }

  export type TeacherUpdateWithoutTestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodgroup?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutTeachersNestedInput
    subjects?: SubjectUpdateManyWithoutTeachersNestedInput
    classes?: ClassUpdateManyWithoutFormmasterNestedInput
    assignments?: AssignmentUpdateManyWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateWithoutTestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodgroup?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    schoolid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subjects?: SubjectUncheckedUpdateManyWithoutTeachersNestedInput
    classes?: ClassUncheckedUpdateManyWithoutFormmasterNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutTeacherNestedInput
  }

  export type TestCreateWithoutQuestionsInput = {
    id?: string
    title: string
    status: $Enums.TestStatus
    instructions: string
    duration: number
    maxscore: number
    open: boolean
    testdate: Date | string
    testtime: Date | string
    term: string
    createdAt?: Date | string
    updateAt?: Date | string
    answers?: AnswerCreateNestedManyWithoutTestInput
    subject: SubjectCreateNestedOneWithoutTestsInput
    teacher: TeacherCreateNestedOneWithoutTestsInput
  }

  export type TestUncheckedCreateWithoutQuestionsInput = {
    id?: string
    title: string
    status: $Enums.TestStatus
    instructions: string
    duration: number
    maxscore: number
    open: boolean
    testdate: Date | string
    testtime: Date | string
    term: string
    subjectid: string
    teacherid: string
    createdAt?: Date | string
    updateAt?: Date | string
    answers?: AnswerUncheckedCreateNestedManyWithoutTestInput
  }

  export type TestCreateOrConnectWithoutQuestionsInput = {
    where: TestWhereUniqueInput
    create: XOR<TestCreateWithoutQuestionsInput, TestUncheckedCreateWithoutQuestionsInput>
  }

  export type TestUpsertWithoutQuestionsInput = {
    update: XOR<TestUpdateWithoutQuestionsInput, TestUncheckedUpdateWithoutQuestionsInput>
    create: XOR<TestCreateWithoutQuestionsInput, TestUncheckedCreateWithoutQuestionsInput>
    where?: TestWhereInput
  }

  export type TestUpdateToOneWithWhereWithoutQuestionsInput = {
    where?: TestWhereInput
    data: XOR<TestUpdateWithoutQuestionsInput, TestUncheckedUpdateWithoutQuestionsInput>
  }

  export type TestUpdateWithoutQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    instructions?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    maxscore?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    testdate?: DateTimeFieldUpdateOperationsInput | Date | string
    testtime?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    answers?: AnswerUpdateManyWithoutTestNestedInput
    subject?: SubjectUpdateOneRequiredWithoutTestsNestedInput
    teacher?: TeacherUpdateOneRequiredWithoutTestsNestedInput
  }

  export type TestUncheckedUpdateWithoutQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    instructions?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    maxscore?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    testdate?: DateTimeFieldUpdateOperationsInput | Date | string
    testtime?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: StringFieldUpdateOperationsInput | string
    subjectid?: StringFieldUpdateOperationsInput | string
    teacherid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    answers?: AnswerUncheckedUpdateManyWithoutTestNestedInput
  }

  export type TestCreateWithoutAnswersInput = {
    id?: string
    title: string
    status: $Enums.TestStatus
    instructions: string
    duration: number
    maxscore: number
    open: boolean
    testdate: Date | string
    testtime: Date | string
    term: string
    createdAt?: Date | string
    updateAt?: Date | string
    questions?: QuestionCreateNestedManyWithoutTestInput
    subject: SubjectCreateNestedOneWithoutTestsInput
    teacher: TeacherCreateNestedOneWithoutTestsInput
  }

  export type TestUncheckedCreateWithoutAnswersInput = {
    id?: string
    title: string
    status: $Enums.TestStatus
    instructions: string
    duration: number
    maxscore: number
    open: boolean
    testdate: Date | string
    testtime: Date | string
    term: string
    subjectid: string
    teacherid: string
    createdAt?: Date | string
    updateAt?: Date | string
    questions?: QuestionUncheckedCreateNestedManyWithoutTestInput
  }

  export type TestCreateOrConnectWithoutAnswersInput = {
    where: TestWhereUniqueInput
    create: XOR<TestCreateWithoutAnswersInput, TestUncheckedCreateWithoutAnswersInput>
  }

  export type StudentCreateWithoutAnswersInput = {
    id?: string
    username: string
    admissionnumber: string
    firstname: string
    surname: string
    othername?: string | null
    birthday: Date | string
    gender: $Enums.UserSex
    religion?: string | null
    studenttype: string
    house: string
    bloodgroup: string
    admissiondate?: Date | string
    email: string
    phone?: string | null
    address: string
    state: string
    lga: string
    avarta?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    parent: ParentCreateNestedOneWithoutStudentsInput
    school: SchoolCreateNestedOneWithoutStudentsInput
    class: ClassCreateNestedOneWithoutStudentsInput
    attendances?: AttendanceCreateNestedManyWithoutStudentInput
    assignments?: AssignmentCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    grades?: StudentGradeCreateNestedManyWithoutStudentInput
    effective?: EffectiveDomainCreateNestedManyWithoutStudentInput
    psychomotive?: PsychomotiveDomainCreateNestedManyWithoutStudentInput
    payments?: PaymentCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutAnswersInput = {
    id?: string
    username: string
    admissionnumber: string
    firstname: string
    surname: string
    othername?: string | null
    birthday: Date | string
    gender: $Enums.UserSex
    religion?: string | null
    studenttype: string
    house: string
    bloodgroup: string
    admissiondate?: Date | string
    email: string
    phone?: string | null
    address: string
    state: string
    lga: string
    avarta?: string | null
    parentid: string
    schoolid: string
    classid: string
    createdAt?: Date | string
    updateAt?: Date | string
    attendances?: AttendanceUncheckedCreateNestedManyWithoutStudentInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    grades?: StudentGradeUncheckedCreateNestedManyWithoutStudentInput
    effective?: EffectiveDomainUncheckedCreateNestedManyWithoutStudentInput
    psychomotive?: PsychomotiveDomainUncheckedCreateNestedManyWithoutStudentInput
    payments?: PaymentUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutAnswersInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutAnswersInput, StudentUncheckedCreateWithoutAnswersInput>
  }

  export type TestUpsertWithoutAnswersInput = {
    update: XOR<TestUpdateWithoutAnswersInput, TestUncheckedUpdateWithoutAnswersInput>
    create: XOR<TestCreateWithoutAnswersInput, TestUncheckedCreateWithoutAnswersInput>
    where?: TestWhereInput
  }

  export type TestUpdateToOneWithWhereWithoutAnswersInput = {
    where?: TestWhereInput
    data: XOR<TestUpdateWithoutAnswersInput, TestUncheckedUpdateWithoutAnswersInput>
  }

  export type TestUpdateWithoutAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    instructions?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    maxscore?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    testdate?: DateTimeFieldUpdateOperationsInput | Date | string
    testtime?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: QuestionUpdateManyWithoutTestNestedInput
    subject?: SubjectUpdateOneRequiredWithoutTestsNestedInput
    teacher?: TeacherUpdateOneRequiredWithoutTestsNestedInput
  }

  export type TestUncheckedUpdateWithoutAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    instructions?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    maxscore?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    testdate?: DateTimeFieldUpdateOperationsInput | Date | string
    testtime?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: StringFieldUpdateOperationsInput | string
    subjectid?: StringFieldUpdateOperationsInput | string
    teacherid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: QuestionUncheckedUpdateManyWithoutTestNestedInput
  }

  export type StudentUpsertWithoutAnswersInput = {
    update: XOR<StudentUpdateWithoutAnswersInput, StudentUncheckedUpdateWithoutAnswersInput>
    create: XOR<StudentCreateWithoutAnswersInput, StudentUncheckedCreateWithoutAnswersInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutAnswersInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutAnswersInput, StudentUncheckedUpdateWithoutAnswersInput>
  }

  export type StudentUpdateWithoutAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    admissionnumber?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    studenttype?: StringFieldUpdateOperationsInput | string
    house?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
    admissiondate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: ParentUpdateOneRequiredWithoutStudentsNestedInput
    school?: SchoolUpdateOneRequiredWithoutStudentsNestedInput
    class?: ClassUpdateOneRequiredWithoutStudentsNestedInput
    attendances?: AttendanceUpdateManyWithoutStudentNestedInput
    assignments?: AssignmentUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    grades?: StudentGradeUpdateManyWithoutStudentNestedInput
    effective?: EffectiveDomainUpdateManyWithoutStudentNestedInput
    psychomotive?: PsychomotiveDomainUpdateManyWithoutStudentNestedInput
    payments?: PaymentUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    admissionnumber?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    studenttype?: StringFieldUpdateOperationsInput | string
    house?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
    admissiondate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    parentid?: StringFieldUpdateOperationsInput | string
    schoolid?: StringFieldUpdateOperationsInput | string
    classid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendances?: AttendanceUncheckedUpdateManyWithoutStudentNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    grades?: StudentGradeUncheckedUpdateManyWithoutStudentNestedInput
    effective?: EffectiveDomainUncheckedUpdateManyWithoutStudentNestedInput
    psychomotive?: PsychomotiveDomainUncheckedUpdateManyWithoutStudentNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type AssignmentCreateWithoutSubmissionsInput = {
    id?: string
    title: string
    text: string
    file: string
    duedate: Date | string
    graded: boolean
    createdAt?: Date | string
    updateAt?: Date | string
    subject: SubjectCreateNestedOneWithoutAssignmentsInput
    teacher: TeacherCreateNestedOneWithoutAssignmentsInput
    students?: StudentCreateNestedManyWithoutAssignmentsInput
  }

  export type AssignmentUncheckedCreateWithoutSubmissionsInput = {
    id?: string
    title: string
    text: string
    file: string
    duedate: Date | string
    graded: boolean
    subjectid: string
    teacherid: string
    createdAt?: Date | string
    updateAt?: Date | string
    students?: StudentUncheckedCreateNestedManyWithoutAssignmentsInput
  }

  export type AssignmentCreateOrConnectWithoutSubmissionsInput = {
    where: AssignmentWhereUniqueInput
    create: XOR<AssignmentCreateWithoutSubmissionsInput, AssignmentUncheckedCreateWithoutSubmissionsInput>
  }

  export type StudentCreateWithoutSubmissionsInput = {
    id?: string
    username: string
    admissionnumber: string
    firstname: string
    surname: string
    othername?: string | null
    birthday: Date | string
    gender: $Enums.UserSex
    religion?: string | null
    studenttype: string
    house: string
    bloodgroup: string
    admissiondate?: Date | string
    email: string
    phone?: string | null
    address: string
    state: string
    lga: string
    avarta?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    parent: ParentCreateNestedOneWithoutStudentsInput
    school: SchoolCreateNestedOneWithoutStudentsInput
    class: ClassCreateNestedOneWithoutStudentsInput
    attendances?: AttendanceCreateNestedManyWithoutStudentInput
    assignments?: AssignmentCreateNestedManyWithoutStudentsInput
    answers?: AnswerCreateNestedManyWithoutStudentInput
    grades?: StudentGradeCreateNestedManyWithoutStudentInput
    effective?: EffectiveDomainCreateNestedManyWithoutStudentInput
    psychomotive?: PsychomotiveDomainCreateNestedManyWithoutStudentInput
    payments?: PaymentCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutSubmissionsInput = {
    id?: string
    username: string
    admissionnumber: string
    firstname: string
    surname: string
    othername?: string | null
    birthday: Date | string
    gender: $Enums.UserSex
    religion?: string | null
    studenttype: string
    house: string
    bloodgroup: string
    admissiondate?: Date | string
    email: string
    phone?: string | null
    address: string
    state: string
    lga: string
    avarta?: string | null
    parentid: string
    schoolid: string
    classid: string
    createdAt?: Date | string
    updateAt?: Date | string
    attendances?: AttendanceUncheckedCreateNestedManyWithoutStudentInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutStudentsInput
    answers?: AnswerUncheckedCreateNestedManyWithoutStudentInput
    grades?: StudentGradeUncheckedCreateNestedManyWithoutStudentInput
    effective?: EffectiveDomainUncheckedCreateNestedManyWithoutStudentInput
    psychomotive?: PsychomotiveDomainUncheckedCreateNestedManyWithoutStudentInput
    payments?: PaymentUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutSubmissionsInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutSubmissionsInput, StudentUncheckedCreateWithoutSubmissionsInput>
  }

  export type AssignmentUpsertWithoutSubmissionsInput = {
    update: XOR<AssignmentUpdateWithoutSubmissionsInput, AssignmentUncheckedUpdateWithoutSubmissionsInput>
    create: XOR<AssignmentCreateWithoutSubmissionsInput, AssignmentUncheckedCreateWithoutSubmissionsInput>
    where?: AssignmentWhereInput
  }

  export type AssignmentUpdateToOneWithWhereWithoutSubmissionsInput = {
    where?: AssignmentWhereInput
    data: XOR<AssignmentUpdateWithoutSubmissionsInput, AssignmentUncheckedUpdateWithoutSubmissionsInput>
  }

  export type AssignmentUpdateWithoutSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    file?: StringFieldUpdateOperationsInput | string
    duedate?: DateTimeFieldUpdateOperationsInput | Date | string
    graded?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: SubjectUpdateOneRequiredWithoutAssignmentsNestedInput
    teacher?: TeacherUpdateOneRequiredWithoutAssignmentsNestedInput
    students?: StudentUpdateManyWithoutAssignmentsNestedInput
  }

  export type AssignmentUncheckedUpdateWithoutSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    file?: StringFieldUpdateOperationsInput | string
    duedate?: DateTimeFieldUpdateOperationsInput | Date | string
    graded?: BoolFieldUpdateOperationsInput | boolean
    subjectid?: StringFieldUpdateOperationsInput | string
    teacherid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    students?: StudentUncheckedUpdateManyWithoutAssignmentsNestedInput
  }

  export type StudentUpsertWithoutSubmissionsInput = {
    update: XOR<StudentUpdateWithoutSubmissionsInput, StudentUncheckedUpdateWithoutSubmissionsInput>
    create: XOR<StudentCreateWithoutSubmissionsInput, StudentUncheckedCreateWithoutSubmissionsInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutSubmissionsInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutSubmissionsInput, StudentUncheckedUpdateWithoutSubmissionsInput>
  }

  export type StudentUpdateWithoutSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    admissionnumber?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    studenttype?: StringFieldUpdateOperationsInput | string
    house?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
    admissiondate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: ParentUpdateOneRequiredWithoutStudentsNestedInput
    school?: SchoolUpdateOneRequiredWithoutStudentsNestedInput
    class?: ClassUpdateOneRequiredWithoutStudentsNestedInput
    attendances?: AttendanceUpdateManyWithoutStudentNestedInput
    assignments?: AssignmentUpdateManyWithoutStudentsNestedInput
    answers?: AnswerUpdateManyWithoutStudentNestedInput
    grades?: StudentGradeUpdateManyWithoutStudentNestedInput
    effective?: EffectiveDomainUpdateManyWithoutStudentNestedInput
    psychomotive?: PsychomotiveDomainUpdateManyWithoutStudentNestedInput
    payments?: PaymentUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    admissionnumber?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    studenttype?: StringFieldUpdateOperationsInput | string
    house?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
    admissiondate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    parentid?: StringFieldUpdateOperationsInput | string
    schoolid?: StringFieldUpdateOperationsInput | string
    classid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendances?: AttendanceUncheckedUpdateManyWithoutStudentNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutStudentsNestedInput
    answers?: AnswerUncheckedUpdateManyWithoutStudentNestedInput
    grades?: StudentGradeUncheckedUpdateManyWithoutStudentNestedInput
    effective?: EffectiveDomainUncheckedUpdateManyWithoutStudentNestedInput
    psychomotive?: PsychomotiveDomainUncheckedUpdateManyWithoutStudentNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type ClassGradeCreateWithoutGradeInput = {
    id?: string
    class: ClassCreateNestedOneWithoutGradingsInput
    subjects?: SubjectGradeCreateNestedManyWithoutClassInput
  }

  export type ClassGradeUncheckedCreateWithoutGradeInput = {
    id?: string
    classid: string
    subjects?: SubjectGradeUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassGradeCreateOrConnectWithoutGradeInput = {
    where: ClassGradeWhereUniqueInput
    create: XOR<ClassGradeCreateWithoutGradeInput, ClassGradeUncheckedCreateWithoutGradeInput>
  }

  export type ClassGradeCreateManyGradeInputEnvelope = {
    data: ClassGradeCreateManyGradeInput | ClassGradeCreateManyGradeInput[]
    skipDuplicates?: boolean
  }

  export type EffectiveDomainCreateWithoutGradeInput = {
    id?: string
    classattendance: number
    punctuality: number
    initiative: number
    responsibility: number
    neatness: number
    cooperation: number
    organization: number
    student: StudentCreateNestedOneWithoutEffectiveInput
  }

  export type EffectiveDomainUncheckedCreateWithoutGradeInput = {
    id?: string
    classattendance: number
    punctuality: number
    initiative: number
    responsibility: number
    neatness: number
    cooperation: number
    organization: number
    studentid: string
  }

  export type EffectiveDomainCreateOrConnectWithoutGradeInput = {
    where: EffectiveDomainWhereUniqueInput
    create: XOR<EffectiveDomainCreateWithoutGradeInput, EffectiveDomainUncheckedCreateWithoutGradeInput>
  }

  export type EffectiveDomainCreateManyGradeInputEnvelope = {
    data: EffectiveDomainCreateManyGradeInput | EffectiveDomainCreateManyGradeInput[]
    skipDuplicates?: boolean
  }

  export type PsychomotiveDomainCreateWithoutGradeInput = {
    id?: string
    hardworking: number
    sports: number
    student: StudentCreateNestedOneWithoutPsychomotiveInput
  }

  export type PsychomotiveDomainUncheckedCreateWithoutGradeInput = {
    id?: string
    hardworking: number
    sports: number
    studentid: string
  }

  export type PsychomotiveDomainCreateOrConnectWithoutGradeInput = {
    where: PsychomotiveDomainWhereUniqueInput
    create: XOR<PsychomotiveDomainCreateWithoutGradeInput, PsychomotiveDomainUncheckedCreateWithoutGradeInput>
  }

  export type PsychomotiveDomainCreateManyGradeInputEnvelope = {
    data: PsychomotiveDomainCreateManyGradeInput | PsychomotiveDomainCreateManyGradeInput[]
    skipDuplicates?: boolean
  }

  export type ClassGradeUpsertWithWhereUniqueWithoutGradeInput = {
    where: ClassGradeWhereUniqueInput
    update: XOR<ClassGradeUpdateWithoutGradeInput, ClassGradeUncheckedUpdateWithoutGradeInput>
    create: XOR<ClassGradeCreateWithoutGradeInput, ClassGradeUncheckedCreateWithoutGradeInput>
  }

  export type ClassGradeUpdateWithWhereUniqueWithoutGradeInput = {
    where: ClassGradeWhereUniqueInput
    data: XOR<ClassGradeUpdateWithoutGradeInput, ClassGradeUncheckedUpdateWithoutGradeInput>
  }

  export type ClassGradeUpdateManyWithWhereWithoutGradeInput = {
    where: ClassGradeScalarWhereInput
    data: XOR<ClassGradeUpdateManyMutationInput, ClassGradeUncheckedUpdateManyWithoutGradeInput>
  }

  export type EffectiveDomainUpsertWithWhereUniqueWithoutGradeInput = {
    where: EffectiveDomainWhereUniqueInput
    update: XOR<EffectiveDomainUpdateWithoutGradeInput, EffectiveDomainUncheckedUpdateWithoutGradeInput>
    create: XOR<EffectiveDomainCreateWithoutGradeInput, EffectiveDomainUncheckedCreateWithoutGradeInput>
  }

  export type EffectiveDomainUpdateWithWhereUniqueWithoutGradeInput = {
    where: EffectiveDomainWhereUniqueInput
    data: XOR<EffectiveDomainUpdateWithoutGradeInput, EffectiveDomainUncheckedUpdateWithoutGradeInput>
  }

  export type EffectiveDomainUpdateManyWithWhereWithoutGradeInput = {
    where: EffectiveDomainScalarWhereInput
    data: XOR<EffectiveDomainUpdateManyMutationInput, EffectiveDomainUncheckedUpdateManyWithoutGradeInput>
  }

  export type PsychomotiveDomainUpsertWithWhereUniqueWithoutGradeInput = {
    where: PsychomotiveDomainWhereUniqueInput
    update: XOR<PsychomotiveDomainUpdateWithoutGradeInput, PsychomotiveDomainUncheckedUpdateWithoutGradeInput>
    create: XOR<PsychomotiveDomainCreateWithoutGradeInput, PsychomotiveDomainUncheckedCreateWithoutGradeInput>
  }

  export type PsychomotiveDomainUpdateWithWhereUniqueWithoutGradeInput = {
    where: PsychomotiveDomainWhereUniqueInput
    data: XOR<PsychomotiveDomainUpdateWithoutGradeInput, PsychomotiveDomainUncheckedUpdateWithoutGradeInput>
  }

  export type PsychomotiveDomainUpdateManyWithWhereWithoutGradeInput = {
    where: PsychomotiveDomainScalarWhereInput
    data: XOR<PsychomotiveDomainUpdateManyMutationInput, PsychomotiveDomainUncheckedUpdateManyWithoutGradeInput>
  }

  export type ClassCreateWithoutGradingsInput = {
    id?: string
    name: string
    category: string
    level: string
    capacity?: number | null
    createdAt?: Date | string
    updateAt?: Date | string
    formmaster?: TeacherCreateNestedOneWithoutClassesInput
    students?: StudentCreateNestedManyWithoutClassInput
    events?: EventCreateNestedManyWithoutClassInput
    announcements?: AnnouncementCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutGradingsInput = {
    id?: string
    name: string
    category: string
    level: string
    capacity?: number | null
    formmasterid?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    students?: StudentUncheckedCreateNestedManyWithoutClassInput
    events?: EventUncheckedCreateNestedManyWithoutClassInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutGradingsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutGradingsInput, ClassUncheckedCreateWithoutGradingsInput>
  }

  export type GradeCreateWithoutGradingsInput = {
    id?: string
    title: string
    session: string
    term: string
    createdAt?: Date | string
    updateAt?: Date | string
    effective?: EffectiveDomainCreateNestedManyWithoutGradeInput
    psychomotive?: PsychomotiveDomainCreateNestedManyWithoutGradeInput
  }

  export type GradeUncheckedCreateWithoutGradingsInput = {
    id?: string
    title: string
    session: string
    term: string
    createdAt?: Date | string
    updateAt?: Date | string
    effective?: EffectiveDomainUncheckedCreateNestedManyWithoutGradeInput
    psychomotive?: PsychomotiveDomainUncheckedCreateNestedManyWithoutGradeInput
  }

  export type GradeCreateOrConnectWithoutGradingsInput = {
    where: GradeWhereUniqueInput
    create: XOR<GradeCreateWithoutGradingsInput, GradeUncheckedCreateWithoutGradingsInput>
  }

  export type SubjectGradeCreateWithoutClassInput = {
    id?: string
    subject: SubjectCreateNestedOneWithoutGradesInput
    students?: StudentGradeCreateNestedManyWithoutSubjectGradeInput
  }

  export type SubjectGradeUncheckedCreateWithoutClassInput = {
    id?: string
    subjectid: string
    students?: StudentGradeUncheckedCreateNestedManyWithoutSubjectGradeInput
  }

  export type SubjectGradeCreateOrConnectWithoutClassInput = {
    where: SubjectGradeWhereUniqueInput
    create: XOR<SubjectGradeCreateWithoutClassInput, SubjectGradeUncheckedCreateWithoutClassInput>
  }

  export type SubjectGradeCreateManyClassInputEnvelope = {
    data: SubjectGradeCreateManyClassInput | SubjectGradeCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type ClassUpsertWithoutGradingsInput = {
    update: XOR<ClassUpdateWithoutGradingsInput, ClassUncheckedUpdateWithoutGradingsInput>
    create: XOR<ClassCreateWithoutGradingsInput, ClassUncheckedCreateWithoutGradingsInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutGradingsInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutGradingsInput, ClassUncheckedUpdateWithoutGradingsInput>
  }

  export type ClassUpdateWithoutGradingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    formmaster?: TeacherUpdateOneWithoutClassesNestedInput
    students?: StudentUpdateManyWithoutClassNestedInput
    events?: EventUpdateManyWithoutClassNestedInput
    announcements?: AnnouncementUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutGradingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    formmasterid?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    students?: StudentUncheckedUpdateManyWithoutClassNestedInput
    events?: EventUncheckedUpdateManyWithoutClassNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutClassNestedInput
  }

  export type GradeUpsertWithoutGradingsInput = {
    update: XOR<GradeUpdateWithoutGradingsInput, GradeUncheckedUpdateWithoutGradingsInput>
    create: XOR<GradeCreateWithoutGradingsInput, GradeUncheckedCreateWithoutGradingsInput>
    where?: GradeWhereInput
  }

  export type GradeUpdateToOneWithWhereWithoutGradingsInput = {
    where?: GradeWhereInput
    data: XOR<GradeUpdateWithoutGradingsInput, GradeUncheckedUpdateWithoutGradingsInput>
  }

  export type GradeUpdateWithoutGradingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    effective?: EffectiveDomainUpdateManyWithoutGradeNestedInput
    psychomotive?: PsychomotiveDomainUpdateManyWithoutGradeNestedInput
  }

  export type GradeUncheckedUpdateWithoutGradingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    effective?: EffectiveDomainUncheckedUpdateManyWithoutGradeNestedInput
    psychomotive?: PsychomotiveDomainUncheckedUpdateManyWithoutGradeNestedInput
  }

  export type SubjectGradeUpsertWithWhereUniqueWithoutClassInput = {
    where: SubjectGradeWhereUniqueInput
    update: XOR<SubjectGradeUpdateWithoutClassInput, SubjectGradeUncheckedUpdateWithoutClassInput>
    create: XOR<SubjectGradeCreateWithoutClassInput, SubjectGradeUncheckedCreateWithoutClassInput>
  }

  export type SubjectGradeUpdateWithWhereUniqueWithoutClassInput = {
    where: SubjectGradeWhereUniqueInput
    data: XOR<SubjectGradeUpdateWithoutClassInput, SubjectGradeUncheckedUpdateWithoutClassInput>
  }

  export type SubjectGradeUpdateManyWithWhereWithoutClassInput = {
    where: SubjectGradeScalarWhereInput
    data: XOR<SubjectGradeUpdateManyMutationInput, SubjectGradeUncheckedUpdateManyWithoutClassInput>
  }

  export type SubjectCreateWithoutGradesInput = {
    id?: string
    name: string
    category: string
    createdAt?: Date | string
    updateAt?: Date | string
    school: SchoolCreateNestedOneWithoutSubjectsInput
    teachers?: TeacherCreateNestedManyWithoutSubjectsInput
    assignments?: AssignmentCreateNestedManyWithoutSubjectInput
    tests?: TestCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateWithoutGradesInput = {
    id?: string
    name: string
    category: string
    schoolid: string
    createdAt?: Date | string
    updateAt?: Date | string
    teachers?: TeacherUncheckedCreateNestedManyWithoutSubjectsInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutSubjectInput
    tests?: TestUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectCreateOrConnectWithoutGradesInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutGradesInput, SubjectUncheckedCreateWithoutGradesInput>
  }

  export type ClassGradeCreateWithoutSubjectsInput = {
    id?: string
    class: ClassCreateNestedOneWithoutGradingsInput
    grade: GradeCreateNestedOneWithoutGradingsInput
  }

  export type ClassGradeUncheckedCreateWithoutSubjectsInput = {
    id?: string
    classid: string
    gradeid: string
  }

  export type ClassGradeCreateOrConnectWithoutSubjectsInput = {
    where: ClassGradeWhereUniqueInput
    create: XOR<ClassGradeCreateWithoutSubjectsInput, ClassGradeUncheckedCreateWithoutSubjectsInput>
  }

  export type StudentGradeCreateWithoutSubjectGradeInput = {
    id?: string
    firstCa: number
    secondCa: number
    thirdCa: number
    fourthCa: number
    exams: number
    score: number
    grade: number
    remark: number
    student: StudentCreateNestedOneWithoutGradesInput
  }

  export type StudentGradeUncheckedCreateWithoutSubjectGradeInput = {
    id?: string
    firstCa: number
    secondCa: number
    thirdCa: number
    fourthCa: number
    exams: number
    score: number
    grade: number
    remark: number
    studentid: string
  }

  export type StudentGradeCreateOrConnectWithoutSubjectGradeInput = {
    where: StudentGradeWhereUniqueInput
    create: XOR<StudentGradeCreateWithoutSubjectGradeInput, StudentGradeUncheckedCreateWithoutSubjectGradeInput>
  }

  export type StudentGradeCreateManySubjectGradeInputEnvelope = {
    data: StudentGradeCreateManySubjectGradeInput | StudentGradeCreateManySubjectGradeInput[]
    skipDuplicates?: boolean
  }

  export type SubjectUpsertWithoutGradesInput = {
    update: XOR<SubjectUpdateWithoutGradesInput, SubjectUncheckedUpdateWithoutGradesInput>
    create: XOR<SubjectCreateWithoutGradesInput, SubjectUncheckedCreateWithoutGradesInput>
    where?: SubjectWhereInput
  }

  export type SubjectUpdateToOneWithWhereWithoutGradesInput = {
    where?: SubjectWhereInput
    data: XOR<SubjectUpdateWithoutGradesInput, SubjectUncheckedUpdateWithoutGradesInput>
  }

  export type SubjectUpdateWithoutGradesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutSubjectsNestedInput
    teachers?: TeacherUpdateManyWithoutSubjectsNestedInput
    assignments?: AssignmentUpdateManyWithoutSubjectNestedInput
    tests?: TestUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutGradesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    schoolid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teachers?: TeacherUncheckedUpdateManyWithoutSubjectsNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutSubjectNestedInput
    tests?: TestUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type ClassGradeUpsertWithoutSubjectsInput = {
    update: XOR<ClassGradeUpdateWithoutSubjectsInput, ClassGradeUncheckedUpdateWithoutSubjectsInput>
    create: XOR<ClassGradeCreateWithoutSubjectsInput, ClassGradeUncheckedCreateWithoutSubjectsInput>
    where?: ClassGradeWhereInput
  }

  export type ClassGradeUpdateToOneWithWhereWithoutSubjectsInput = {
    where?: ClassGradeWhereInput
    data: XOR<ClassGradeUpdateWithoutSubjectsInput, ClassGradeUncheckedUpdateWithoutSubjectsInput>
  }

  export type ClassGradeUpdateWithoutSubjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    class?: ClassUpdateOneRequiredWithoutGradingsNestedInput
    grade?: GradeUpdateOneRequiredWithoutGradingsNestedInput
  }

  export type ClassGradeUncheckedUpdateWithoutSubjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    classid?: StringFieldUpdateOperationsInput | string
    gradeid?: StringFieldUpdateOperationsInput | string
  }

  export type StudentGradeUpsertWithWhereUniqueWithoutSubjectGradeInput = {
    where: StudentGradeWhereUniqueInput
    update: XOR<StudentGradeUpdateWithoutSubjectGradeInput, StudentGradeUncheckedUpdateWithoutSubjectGradeInput>
    create: XOR<StudentGradeCreateWithoutSubjectGradeInput, StudentGradeUncheckedCreateWithoutSubjectGradeInput>
  }

  export type StudentGradeUpdateWithWhereUniqueWithoutSubjectGradeInput = {
    where: StudentGradeWhereUniqueInput
    data: XOR<StudentGradeUpdateWithoutSubjectGradeInput, StudentGradeUncheckedUpdateWithoutSubjectGradeInput>
  }

  export type StudentGradeUpdateManyWithWhereWithoutSubjectGradeInput = {
    where: StudentGradeScalarWhereInput
    data: XOR<StudentGradeUpdateManyMutationInput, StudentGradeUncheckedUpdateManyWithoutSubjectGradeInput>
  }

  export type StudentCreateWithoutGradesInput = {
    id?: string
    username: string
    admissionnumber: string
    firstname: string
    surname: string
    othername?: string | null
    birthday: Date | string
    gender: $Enums.UserSex
    religion?: string | null
    studenttype: string
    house: string
    bloodgroup: string
    admissiondate?: Date | string
    email: string
    phone?: string | null
    address: string
    state: string
    lga: string
    avarta?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    parent: ParentCreateNestedOneWithoutStudentsInput
    school: SchoolCreateNestedOneWithoutStudentsInput
    class: ClassCreateNestedOneWithoutStudentsInput
    attendances?: AttendanceCreateNestedManyWithoutStudentInput
    assignments?: AssignmentCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    answers?: AnswerCreateNestedManyWithoutStudentInput
    effective?: EffectiveDomainCreateNestedManyWithoutStudentInput
    psychomotive?: PsychomotiveDomainCreateNestedManyWithoutStudentInput
    payments?: PaymentCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutGradesInput = {
    id?: string
    username: string
    admissionnumber: string
    firstname: string
    surname: string
    othername?: string | null
    birthday: Date | string
    gender: $Enums.UserSex
    religion?: string | null
    studenttype: string
    house: string
    bloodgroup: string
    admissiondate?: Date | string
    email: string
    phone?: string | null
    address: string
    state: string
    lga: string
    avarta?: string | null
    parentid: string
    schoolid: string
    classid: string
    createdAt?: Date | string
    updateAt?: Date | string
    attendances?: AttendanceUncheckedCreateNestedManyWithoutStudentInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    answers?: AnswerUncheckedCreateNestedManyWithoutStudentInput
    effective?: EffectiveDomainUncheckedCreateNestedManyWithoutStudentInput
    psychomotive?: PsychomotiveDomainUncheckedCreateNestedManyWithoutStudentInput
    payments?: PaymentUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutGradesInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutGradesInput, StudentUncheckedCreateWithoutGradesInput>
  }

  export type SubjectGradeCreateWithoutStudentsInput = {
    id?: string
    subject: SubjectCreateNestedOneWithoutGradesInput
    class: ClassGradeCreateNestedOneWithoutSubjectsInput
  }

  export type SubjectGradeUncheckedCreateWithoutStudentsInput = {
    id?: string
    subjectid: string
    classid: string
  }

  export type SubjectGradeCreateOrConnectWithoutStudentsInput = {
    where: SubjectGradeWhereUniqueInput
    create: XOR<SubjectGradeCreateWithoutStudentsInput, SubjectGradeUncheckedCreateWithoutStudentsInput>
  }

  export type StudentUpsertWithoutGradesInput = {
    update: XOR<StudentUpdateWithoutGradesInput, StudentUncheckedUpdateWithoutGradesInput>
    create: XOR<StudentCreateWithoutGradesInput, StudentUncheckedCreateWithoutGradesInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutGradesInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutGradesInput, StudentUncheckedUpdateWithoutGradesInput>
  }

  export type StudentUpdateWithoutGradesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    admissionnumber?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    studenttype?: StringFieldUpdateOperationsInput | string
    house?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
    admissiondate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: ParentUpdateOneRequiredWithoutStudentsNestedInput
    school?: SchoolUpdateOneRequiredWithoutStudentsNestedInput
    class?: ClassUpdateOneRequiredWithoutStudentsNestedInput
    attendances?: AttendanceUpdateManyWithoutStudentNestedInput
    assignments?: AssignmentUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    answers?: AnswerUpdateManyWithoutStudentNestedInput
    effective?: EffectiveDomainUpdateManyWithoutStudentNestedInput
    psychomotive?: PsychomotiveDomainUpdateManyWithoutStudentNestedInput
    payments?: PaymentUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutGradesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    admissionnumber?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    studenttype?: StringFieldUpdateOperationsInput | string
    house?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
    admissiondate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    parentid?: StringFieldUpdateOperationsInput | string
    schoolid?: StringFieldUpdateOperationsInput | string
    classid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendances?: AttendanceUncheckedUpdateManyWithoutStudentNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    answers?: AnswerUncheckedUpdateManyWithoutStudentNestedInput
    effective?: EffectiveDomainUncheckedUpdateManyWithoutStudentNestedInput
    psychomotive?: PsychomotiveDomainUncheckedUpdateManyWithoutStudentNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type SubjectGradeUpsertWithoutStudentsInput = {
    update: XOR<SubjectGradeUpdateWithoutStudentsInput, SubjectGradeUncheckedUpdateWithoutStudentsInput>
    create: XOR<SubjectGradeCreateWithoutStudentsInput, SubjectGradeUncheckedCreateWithoutStudentsInput>
    where?: SubjectGradeWhereInput
  }

  export type SubjectGradeUpdateToOneWithWhereWithoutStudentsInput = {
    where?: SubjectGradeWhereInput
    data: XOR<SubjectGradeUpdateWithoutStudentsInput, SubjectGradeUncheckedUpdateWithoutStudentsInput>
  }

  export type SubjectGradeUpdateWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: SubjectUpdateOneRequiredWithoutGradesNestedInput
    class?: ClassGradeUpdateOneRequiredWithoutSubjectsNestedInput
  }

  export type SubjectGradeUncheckedUpdateWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    subjectid?: StringFieldUpdateOperationsInput | string
    classid?: StringFieldUpdateOperationsInput | string
  }

  export type StudentCreateWithoutEffectiveInput = {
    id?: string
    username: string
    admissionnumber: string
    firstname: string
    surname: string
    othername?: string | null
    birthday: Date | string
    gender: $Enums.UserSex
    religion?: string | null
    studenttype: string
    house: string
    bloodgroup: string
    admissiondate?: Date | string
    email: string
    phone?: string | null
    address: string
    state: string
    lga: string
    avarta?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    parent: ParentCreateNestedOneWithoutStudentsInput
    school: SchoolCreateNestedOneWithoutStudentsInput
    class: ClassCreateNestedOneWithoutStudentsInput
    attendances?: AttendanceCreateNestedManyWithoutStudentInput
    assignments?: AssignmentCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    answers?: AnswerCreateNestedManyWithoutStudentInput
    grades?: StudentGradeCreateNestedManyWithoutStudentInput
    psychomotive?: PsychomotiveDomainCreateNestedManyWithoutStudentInput
    payments?: PaymentCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutEffectiveInput = {
    id?: string
    username: string
    admissionnumber: string
    firstname: string
    surname: string
    othername?: string | null
    birthday: Date | string
    gender: $Enums.UserSex
    religion?: string | null
    studenttype: string
    house: string
    bloodgroup: string
    admissiondate?: Date | string
    email: string
    phone?: string | null
    address: string
    state: string
    lga: string
    avarta?: string | null
    parentid: string
    schoolid: string
    classid: string
    createdAt?: Date | string
    updateAt?: Date | string
    attendances?: AttendanceUncheckedCreateNestedManyWithoutStudentInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    answers?: AnswerUncheckedCreateNestedManyWithoutStudentInput
    grades?: StudentGradeUncheckedCreateNestedManyWithoutStudentInput
    psychomotive?: PsychomotiveDomainUncheckedCreateNestedManyWithoutStudentInput
    payments?: PaymentUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutEffectiveInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutEffectiveInput, StudentUncheckedCreateWithoutEffectiveInput>
  }

  export type GradeCreateWithoutEffectiveInput = {
    id?: string
    title: string
    session: string
    term: string
    createdAt?: Date | string
    updateAt?: Date | string
    gradings?: ClassGradeCreateNestedManyWithoutGradeInput
    psychomotive?: PsychomotiveDomainCreateNestedManyWithoutGradeInput
  }

  export type GradeUncheckedCreateWithoutEffectiveInput = {
    id?: string
    title: string
    session: string
    term: string
    createdAt?: Date | string
    updateAt?: Date | string
    gradings?: ClassGradeUncheckedCreateNestedManyWithoutGradeInput
    psychomotive?: PsychomotiveDomainUncheckedCreateNestedManyWithoutGradeInput
  }

  export type GradeCreateOrConnectWithoutEffectiveInput = {
    where: GradeWhereUniqueInput
    create: XOR<GradeCreateWithoutEffectiveInput, GradeUncheckedCreateWithoutEffectiveInput>
  }

  export type StudentUpsertWithoutEffectiveInput = {
    update: XOR<StudentUpdateWithoutEffectiveInput, StudentUncheckedUpdateWithoutEffectiveInput>
    create: XOR<StudentCreateWithoutEffectiveInput, StudentUncheckedCreateWithoutEffectiveInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutEffectiveInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutEffectiveInput, StudentUncheckedUpdateWithoutEffectiveInput>
  }

  export type StudentUpdateWithoutEffectiveInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    admissionnumber?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    studenttype?: StringFieldUpdateOperationsInput | string
    house?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
    admissiondate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: ParentUpdateOneRequiredWithoutStudentsNestedInput
    school?: SchoolUpdateOneRequiredWithoutStudentsNestedInput
    class?: ClassUpdateOneRequiredWithoutStudentsNestedInput
    attendances?: AttendanceUpdateManyWithoutStudentNestedInput
    assignments?: AssignmentUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    answers?: AnswerUpdateManyWithoutStudentNestedInput
    grades?: StudentGradeUpdateManyWithoutStudentNestedInput
    psychomotive?: PsychomotiveDomainUpdateManyWithoutStudentNestedInput
    payments?: PaymentUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutEffectiveInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    admissionnumber?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    studenttype?: StringFieldUpdateOperationsInput | string
    house?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
    admissiondate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    parentid?: StringFieldUpdateOperationsInput | string
    schoolid?: StringFieldUpdateOperationsInput | string
    classid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendances?: AttendanceUncheckedUpdateManyWithoutStudentNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    answers?: AnswerUncheckedUpdateManyWithoutStudentNestedInput
    grades?: StudentGradeUncheckedUpdateManyWithoutStudentNestedInput
    psychomotive?: PsychomotiveDomainUncheckedUpdateManyWithoutStudentNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type GradeUpsertWithoutEffectiveInput = {
    update: XOR<GradeUpdateWithoutEffectiveInput, GradeUncheckedUpdateWithoutEffectiveInput>
    create: XOR<GradeCreateWithoutEffectiveInput, GradeUncheckedCreateWithoutEffectiveInput>
    where?: GradeWhereInput
  }

  export type GradeUpdateToOneWithWhereWithoutEffectiveInput = {
    where?: GradeWhereInput
    data: XOR<GradeUpdateWithoutEffectiveInput, GradeUncheckedUpdateWithoutEffectiveInput>
  }

  export type GradeUpdateWithoutEffectiveInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gradings?: ClassGradeUpdateManyWithoutGradeNestedInput
    psychomotive?: PsychomotiveDomainUpdateManyWithoutGradeNestedInput
  }

  export type GradeUncheckedUpdateWithoutEffectiveInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gradings?: ClassGradeUncheckedUpdateManyWithoutGradeNestedInput
    psychomotive?: PsychomotiveDomainUncheckedUpdateManyWithoutGradeNestedInput
  }

  export type StudentCreateWithoutPsychomotiveInput = {
    id?: string
    username: string
    admissionnumber: string
    firstname: string
    surname: string
    othername?: string | null
    birthday: Date | string
    gender: $Enums.UserSex
    religion?: string | null
    studenttype: string
    house: string
    bloodgroup: string
    admissiondate?: Date | string
    email: string
    phone?: string | null
    address: string
    state: string
    lga: string
    avarta?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    parent: ParentCreateNestedOneWithoutStudentsInput
    school: SchoolCreateNestedOneWithoutStudentsInput
    class: ClassCreateNestedOneWithoutStudentsInput
    attendances?: AttendanceCreateNestedManyWithoutStudentInput
    assignments?: AssignmentCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    answers?: AnswerCreateNestedManyWithoutStudentInput
    grades?: StudentGradeCreateNestedManyWithoutStudentInput
    effective?: EffectiveDomainCreateNestedManyWithoutStudentInput
    payments?: PaymentCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutPsychomotiveInput = {
    id?: string
    username: string
    admissionnumber: string
    firstname: string
    surname: string
    othername?: string | null
    birthday: Date | string
    gender: $Enums.UserSex
    religion?: string | null
    studenttype: string
    house: string
    bloodgroup: string
    admissiondate?: Date | string
    email: string
    phone?: string | null
    address: string
    state: string
    lga: string
    avarta?: string | null
    parentid: string
    schoolid: string
    classid: string
    createdAt?: Date | string
    updateAt?: Date | string
    attendances?: AttendanceUncheckedCreateNestedManyWithoutStudentInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    answers?: AnswerUncheckedCreateNestedManyWithoutStudentInput
    grades?: StudentGradeUncheckedCreateNestedManyWithoutStudentInput
    effective?: EffectiveDomainUncheckedCreateNestedManyWithoutStudentInput
    payments?: PaymentUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutPsychomotiveInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutPsychomotiveInput, StudentUncheckedCreateWithoutPsychomotiveInput>
  }

  export type GradeCreateWithoutPsychomotiveInput = {
    id?: string
    title: string
    session: string
    term: string
    createdAt?: Date | string
    updateAt?: Date | string
    gradings?: ClassGradeCreateNestedManyWithoutGradeInput
    effective?: EffectiveDomainCreateNestedManyWithoutGradeInput
  }

  export type GradeUncheckedCreateWithoutPsychomotiveInput = {
    id?: string
    title: string
    session: string
    term: string
    createdAt?: Date | string
    updateAt?: Date | string
    gradings?: ClassGradeUncheckedCreateNestedManyWithoutGradeInput
    effective?: EffectiveDomainUncheckedCreateNestedManyWithoutGradeInput
  }

  export type GradeCreateOrConnectWithoutPsychomotiveInput = {
    where: GradeWhereUniqueInput
    create: XOR<GradeCreateWithoutPsychomotiveInput, GradeUncheckedCreateWithoutPsychomotiveInput>
  }

  export type StudentUpsertWithoutPsychomotiveInput = {
    update: XOR<StudentUpdateWithoutPsychomotiveInput, StudentUncheckedUpdateWithoutPsychomotiveInput>
    create: XOR<StudentCreateWithoutPsychomotiveInput, StudentUncheckedCreateWithoutPsychomotiveInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutPsychomotiveInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutPsychomotiveInput, StudentUncheckedUpdateWithoutPsychomotiveInput>
  }

  export type StudentUpdateWithoutPsychomotiveInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    admissionnumber?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    studenttype?: StringFieldUpdateOperationsInput | string
    house?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
    admissiondate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: ParentUpdateOneRequiredWithoutStudentsNestedInput
    school?: SchoolUpdateOneRequiredWithoutStudentsNestedInput
    class?: ClassUpdateOneRequiredWithoutStudentsNestedInput
    attendances?: AttendanceUpdateManyWithoutStudentNestedInput
    assignments?: AssignmentUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    answers?: AnswerUpdateManyWithoutStudentNestedInput
    grades?: StudentGradeUpdateManyWithoutStudentNestedInput
    effective?: EffectiveDomainUpdateManyWithoutStudentNestedInput
    payments?: PaymentUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutPsychomotiveInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    admissionnumber?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    studenttype?: StringFieldUpdateOperationsInput | string
    house?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
    admissiondate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    parentid?: StringFieldUpdateOperationsInput | string
    schoolid?: StringFieldUpdateOperationsInput | string
    classid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendances?: AttendanceUncheckedUpdateManyWithoutStudentNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    answers?: AnswerUncheckedUpdateManyWithoutStudentNestedInput
    grades?: StudentGradeUncheckedUpdateManyWithoutStudentNestedInput
    effective?: EffectiveDomainUncheckedUpdateManyWithoutStudentNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type GradeUpsertWithoutPsychomotiveInput = {
    update: XOR<GradeUpdateWithoutPsychomotiveInput, GradeUncheckedUpdateWithoutPsychomotiveInput>
    create: XOR<GradeCreateWithoutPsychomotiveInput, GradeUncheckedCreateWithoutPsychomotiveInput>
    where?: GradeWhereInput
  }

  export type GradeUpdateToOneWithWhereWithoutPsychomotiveInput = {
    where?: GradeWhereInput
    data: XOR<GradeUpdateWithoutPsychomotiveInput, GradeUncheckedUpdateWithoutPsychomotiveInput>
  }

  export type GradeUpdateWithoutPsychomotiveInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gradings?: ClassGradeUpdateManyWithoutGradeNestedInput
    effective?: EffectiveDomainUpdateManyWithoutGradeNestedInput
  }

  export type GradeUncheckedUpdateWithoutPsychomotiveInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gradings?: ClassGradeUncheckedUpdateManyWithoutGradeNestedInput
    effective?: EffectiveDomainUncheckedUpdateManyWithoutGradeNestedInput
  }

  export type StudentCreateWithoutAttendancesInput = {
    id?: string
    username: string
    admissionnumber: string
    firstname: string
    surname: string
    othername?: string | null
    birthday: Date | string
    gender: $Enums.UserSex
    religion?: string | null
    studenttype: string
    house: string
    bloodgroup: string
    admissiondate?: Date | string
    email: string
    phone?: string | null
    address: string
    state: string
    lga: string
    avarta?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    parent: ParentCreateNestedOneWithoutStudentsInput
    school: SchoolCreateNestedOneWithoutStudentsInput
    class: ClassCreateNestedOneWithoutStudentsInput
    assignments?: AssignmentCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionCreateNestedManyWithoutStudentInput
    answers?: AnswerCreateNestedManyWithoutStudentInput
    grades?: StudentGradeCreateNestedManyWithoutStudentInput
    effective?: EffectiveDomainCreateNestedManyWithoutStudentInput
    psychomotive?: PsychomotiveDomainCreateNestedManyWithoutStudentInput
    payments?: PaymentCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutAttendancesInput = {
    id?: string
    username: string
    admissionnumber: string
    firstname: string
    surname: string
    othername?: string | null
    birthday: Date | string
    gender: $Enums.UserSex
    religion?: string | null
    studenttype: string
    house: string
    bloodgroup: string
    admissiondate?: Date | string
    email: string
    phone?: string | null
    address: string
    state: string
    lga: string
    avarta?: string | null
    parentid: string
    schoolid: string
    classid: string
    createdAt?: Date | string
    updateAt?: Date | string
    assignments?: AssignmentUncheckedCreateNestedManyWithoutStudentsInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutStudentInput
    answers?: AnswerUncheckedCreateNestedManyWithoutStudentInput
    grades?: StudentGradeUncheckedCreateNestedManyWithoutStudentInput
    effective?: EffectiveDomainUncheckedCreateNestedManyWithoutStudentInput
    psychomotive?: PsychomotiveDomainUncheckedCreateNestedManyWithoutStudentInput
    payments?: PaymentUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutAttendancesInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutAttendancesInput, StudentUncheckedCreateWithoutAttendancesInput>
  }

  export type StudentUpsertWithoutAttendancesInput = {
    update: XOR<StudentUpdateWithoutAttendancesInput, StudentUncheckedUpdateWithoutAttendancesInput>
    create: XOR<StudentCreateWithoutAttendancesInput, StudentUncheckedCreateWithoutAttendancesInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutAttendancesInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutAttendancesInput, StudentUncheckedUpdateWithoutAttendancesInput>
  }

  export type StudentUpdateWithoutAttendancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    admissionnumber?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    studenttype?: StringFieldUpdateOperationsInput | string
    house?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
    admissiondate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: ParentUpdateOneRequiredWithoutStudentsNestedInput
    school?: SchoolUpdateOneRequiredWithoutStudentsNestedInput
    class?: ClassUpdateOneRequiredWithoutStudentsNestedInput
    assignments?: AssignmentUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    answers?: AnswerUpdateManyWithoutStudentNestedInput
    grades?: StudentGradeUpdateManyWithoutStudentNestedInput
    effective?: EffectiveDomainUpdateManyWithoutStudentNestedInput
    psychomotive?: PsychomotiveDomainUpdateManyWithoutStudentNestedInput
    payments?: PaymentUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutAttendancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    admissionnumber?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    studenttype?: StringFieldUpdateOperationsInput | string
    house?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
    admissiondate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    parentid?: StringFieldUpdateOperationsInput | string
    schoolid?: StringFieldUpdateOperationsInput | string
    classid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignments?: AssignmentUncheckedUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    answers?: AnswerUncheckedUpdateManyWithoutStudentNestedInput
    grades?: StudentGradeUncheckedUpdateManyWithoutStudentNestedInput
    effective?: EffectiveDomainUncheckedUpdateManyWithoutStudentNestedInput
    psychomotive?: PsychomotiveDomainUncheckedUpdateManyWithoutStudentNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type ClassCreateWithoutEventsInput = {
    id?: string
    name: string
    category: string
    level: string
    capacity?: number | null
    createdAt?: Date | string
    updateAt?: Date | string
    formmaster?: TeacherCreateNestedOneWithoutClassesInput
    students?: StudentCreateNestedManyWithoutClassInput
    gradings?: ClassGradeCreateNestedManyWithoutClassInput
    announcements?: AnnouncementCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutEventsInput = {
    id?: string
    name: string
    category: string
    level: string
    capacity?: number | null
    formmasterid?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    students?: StudentUncheckedCreateNestedManyWithoutClassInput
    gradings?: ClassGradeUncheckedCreateNestedManyWithoutClassInput
    announcements?: AnnouncementUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutEventsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutEventsInput, ClassUncheckedCreateWithoutEventsInput>
  }

  export type ClassUpsertWithoutEventsInput = {
    update: XOR<ClassUpdateWithoutEventsInput, ClassUncheckedUpdateWithoutEventsInput>
    create: XOR<ClassCreateWithoutEventsInput, ClassUncheckedCreateWithoutEventsInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutEventsInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutEventsInput, ClassUncheckedUpdateWithoutEventsInput>
  }

  export type ClassUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    formmaster?: TeacherUpdateOneWithoutClassesNestedInput
    students?: StudentUpdateManyWithoutClassNestedInput
    gradings?: ClassGradeUpdateManyWithoutClassNestedInput
    announcements?: AnnouncementUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    formmasterid?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    students?: StudentUncheckedUpdateManyWithoutClassNestedInput
    gradings?: ClassGradeUncheckedUpdateManyWithoutClassNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassCreateWithoutAnnouncementsInput = {
    id?: string
    name: string
    category: string
    level: string
    capacity?: number | null
    createdAt?: Date | string
    updateAt?: Date | string
    formmaster?: TeacherCreateNestedOneWithoutClassesInput
    students?: StudentCreateNestedManyWithoutClassInput
    gradings?: ClassGradeCreateNestedManyWithoutClassInput
    events?: EventCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutAnnouncementsInput = {
    id?: string
    name: string
    category: string
    level: string
    capacity?: number | null
    formmasterid?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
    students?: StudentUncheckedCreateNestedManyWithoutClassInput
    gradings?: ClassGradeUncheckedCreateNestedManyWithoutClassInput
    events?: EventUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutAnnouncementsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutAnnouncementsInput, ClassUncheckedCreateWithoutAnnouncementsInput>
  }

  export type ClassUpsertWithoutAnnouncementsInput = {
    update: XOR<ClassUpdateWithoutAnnouncementsInput, ClassUncheckedUpdateWithoutAnnouncementsInput>
    create: XOR<ClassCreateWithoutAnnouncementsInput, ClassUncheckedCreateWithoutAnnouncementsInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutAnnouncementsInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutAnnouncementsInput, ClassUncheckedUpdateWithoutAnnouncementsInput>
  }

  export type ClassUpdateWithoutAnnouncementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    formmaster?: TeacherUpdateOneWithoutClassesNestedInput
    students?: StudentUpdateManyWithoutClassNestedInput
    gradings?: ClassGradeUpdateManyWithoutClassNestedInput
    events?: EventUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutAnnouncementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    formmasterid?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    students?: StudentUncheckedUpdateManyWithoutClassNestedInput
    gradings?: ClassGradeUncheckedUpdateManyWithoutClassNestedInput
    events?: EventUncheckedUpdateManyWithoutClassNestedInput
  }

  export type StudentCreateManySchoolInput = {
    id?: string
    username: string
    admissionnumber: string
    firstname: string
    surname: string
    othername?: string | null
    birthday: Date | string
    gender: $Enums.UserSex
    religion?: string | null
    studenttype: string
    house: string
    bloodgroup: string
    admissiondate?: Date | string
    email: string
    phone?: string | null
    address: string
    state: string
    lga: string
    avarta?: string | null
    parentid: string
    classid: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type TeacherCreateManySchoolInput = {
    id?: string
    username: string
    title: string
    firstname: string
    surname: string
    othername?: string | null
    birthday?: Date | string | null
    bloodgroup?: string | null
    gender: $Enums.UserSex
    state: string
    lga: string
    email: string
    phone?: string | null
    address: string
    avarta?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type SubjectCreateManySchoolInput = {
    id?: string
    name: string
    category: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type PaymentSetupCreateManySchoolInput = {
    id?: string
    amount: number
    fees: number
    partpayment?: boolean
    session: string
    term: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type PaymentCreateManySchoolInput = {
    id?: string
    session: string
    term: $Enums.Terms
    amount: number
    studentid: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type StudentUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    admissionnumber?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    studenttype?: StringFieldUpdateOperationsInput | string
    house?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
    admissiondate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: ParentUpdateOneRequiredWithoutStudentsNestedInput
    class?: ClassUpdateOneRequiredWithoutStudentsNestedInput
    attendances?: AttendanceUpdateManyWithoutStudentNestedInput
    assignments?: AssignmentUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    answers?: AnswerUpdateManyWithoutStudentNestedInput
    grades?: StudentGradeUpdateManyWithoutStudentNestedInput
    effective?: EffectiveDomainUpdateManyWithoutStudentNestedInput
    psychomotive?: PsychomotiveDomainUpdateManyWithoutStudentNestedInput
    payments?: PaymentUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    admissionnumber?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    studenttype?: StringFieldUpdateOperationsInput | string
    house?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
    admissiondate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    parentid?: StringFieldUpdateOperationsInput | string
    classid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendances?: AttendanceUncheckedUpdateManyWithoutStudentNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    answers?: AnswerUncheckedUpdateManyWithoutStudentNestedInput
    grades?: StudentGradeUncheckedUpdateManyWithoutStudentNestedInput
    effective?: EffectiveDomainUncheckedUpdateManyWithoutStudentNestedInput
    psychomotive?: PsychomotiveDomainUncheckedUpdateManyWithoutStudentNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateManyWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    admissionnumber?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    studenttype?: StringFieldUpdateOperationsInput | string
    house?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
    admissiondate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    parentid?: StringFieldUpdateOperationsInput | string
    classid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeacherUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodgroup?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subjects?: SubjectUpdateManyWithoutTeachersNestedInput
    classes?: ClassUpdateManyWithoutFormmasterNestedInput
    assignments?: AssignmentUpdateManyWithoutTeacherNestedInput
    tests?: TestUpdateManyWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodgroup?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subjects?: SubjectUncheckedUpdateManyWithoutTeachersNestedInput
    classes?: ClassUncheckedUpdateManyWithoutFormmasterNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    tests?: TestUncheckedUpdateManyWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateManyWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodgroup?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubjectUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teachers?: TeacherUpdateManyWithoutSubjectsNestedInput
    assignments?: AssignmentUpdateManyWithoutSubjectNestedInput
    grades?: SubjectGradeUpdateManyWithoutSubjectNestedInput
    tests?: TestUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teachers?: TeacherUncheckedUpdateManyWithoutSubjectsNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutSubjectNestedInput
    grades?: SubjectGradeUncheckedUpdateManyWithoutSubjectNestedInput
    tests?: TestUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateManyWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentSetupUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    fees?: IntFieldUpdateOperationsInput | number
    partpayment?: BoolFieldUpdateOperationsInput | boolean
    session?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentSetupUncheckedUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    fees?: IntFieldUpdateOperationsInput | number
    partpayment?: BoolFieldUpdateOperationsInput | boolean
    session?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentSetupUncheckedUpdateManyWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    fees?: IntFieldUpdateOperationsInput | number
    partpayment?: BoolFieldUpdateOperationsInput | boolean
    session?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    term?: EnumTermsFieldUpdateOperationsInput | $Enums.Terms
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    term?: EnumTermsFieldUpdateOperationsInput | $Enums.Terms
    amount?: IntFieldUpdateOperationsInput | number
    studentid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    term?: EnumTermsFieldUpdateOperationsInput | $Enums.Terms
    amount?: IntFieldUpdateOperationsInput | number
    studentid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AttendanceCreateManyStudentInput = {
    id?: number
    date: Date | string
    present: boolean
  }

  export type SubmissionCreateManyStudentInput = {
    id?: string
    answer: string
    feedback: string
    score: number
    file: string
    assignmentId?: string | null
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type AnswerCreateManyStudentInput = {
    id?: string
    score: number
    testid: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type StudentGradeCreateManyStudentInput = {
    id?: string
    firstCa: number
    secondCa: number
    thirdCa: number
    fourthCa: number
    exams: number
    score: number
    grade: number
    remark: number
    subjectgradeid: string
  }

  export type EffectiveDomainCreateManyStudentInput = {
    id?: string
    classattendance: number
    punctuality: number
    initiative: number
    responsibility: number
    neatness: number
    cooperation: number
    organization: number
    gradeid: string
  }

  export type PsychomotiveDomainCreateManyStudentInput = {
    id?: string
    hardworking: number
    sports: number
    gradeid: string
  }

  export type PaymentCreateManyStudentInput = {
    id?: string
    session: string
    term: $Enums.Terms
    amount: number
    schoolid: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type AttendanceUpdateWithoutStudentInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    present?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AttendanceUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    present?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AttendanceUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    present?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AssignmentUpdateWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    file?: StringFieldUpdateOperationsInput | string
    duedate?: DateTimeFieldUpdateOperationsInput | Date | string
    graded?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: SubjectUpdateOneRequiredWithoutAssignmentsNestedInput
    teacher?: TeacherUpdateOneRequiredWithoutAssignmentsNestedInput
    submissions?: SubmissionUpdateManyWithoutAssignmentNestedInput
  }

  export type AssignmentUncheckedUpdateWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    file?: StringFieldUpdateOperationsInput | string
    duedate?: DateTimeFieldUpdateOperationsInput | Date | string
    graded?: BoolFieldUpdateOperationsInput | boolean
    subjectid?: StringFieldUpdateOperationsInput | string
    teacherid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissions?: SubmissionUncheckedUpdateManyWithoutAssignmentNestedInput
  }

  export type AssignmentUncheckedUpdateManyWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    file?: StringFieldUpdateOperationsInput | string
    duedate?: DateTimeFieldUpdateOperationsInput | Date | string
    graded?: BoolFieldUpdateOperationsInput | boolean
    subjectid?: StringFieldUpdateOperationsInput | string
    teacherid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    file?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignment?: AssignmentUpdateOneWithoutSubmissionsNestedInput
  }

  export type SubmissionUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    file?: StringFieldUpdateOperationsInput | string
    assignmentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    file?: StringFieldUpdateOperationsInput | string
    assignmentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnswerUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    test?: TestUpdateOneRequiredWithoutAnswersNestedInput
  }

  export type AnswerUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    testid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnswerUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    testid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentGradeUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstCa?: IntFieldUpdateOperationsInput | number
    secondCa?: IntFieldUpdateOperationsInput | number
    thirdCa?: IntFieldUpdateOperationsInput | number
    fourthCa?: IntFieldUpdateOperationsInput | number
    exams?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    grade?: IntFieldUpdateOperationsInput | number
    remark?: IntFieldUpdateOperationsInput | number
    subjectGrade?: SubjectGradeUpdateOneRequiredWithoutStudentsNestedInput
  }

  export type StudentGradeUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstCa?: IntFieldUpdateOperationsInput | number
    secondCa?: IntFieldUpdateOperationsInput | number
    thirdCa?: IntFieldUpdateOperationsInput | number
    fourthCa?: IntFieldUpdateOperationsInput | number
    exams?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    grade?: IntFieldUpdateOperationsInput | number
    remark?: IntFieldUpdateOperationsInput | number
    subjectgradeid?: StringFieldUpdateOperationsInput | string
  }

  export type StudentGradeUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstCa?: IntFieldUpdateOperationsInput | number
    secondCa?: IntFieldUpdateOperationsInput | number
    thirdCa?: IntFieldUpdateOperationsInput | number
    fourthCa?: IntFieldUpdateOperationsInput | number
    exams?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    grade?: IntFieldUpdateOperationsInput | number
    remark?: IntFieldUpdateOperationsInput | number
    subjectgradeid?: StringFieldUpdateOperationsInput | string
  }

  export type EffectiveDomainUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    classattendance?: IntFieldUpdateOperationsInput | number
    punctuality?: IntFieldUpdateOperationsInput | number
    initiative?: IntFieldUpdateOperationsInput | number
    responsibility?: IntFieldUpdateOperationsInput | number
    neatness?: IntFieldUpdateOperationsInput | number
    cooperation?: IntFieldUpdateOperationsInput | number
    organization?: IntFieldUpdateOperationsInput | number
    grade?: GradeUpdateOneRequiredWithoutEffectiveNestedInput
  }

  export type EffectiveDomainUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    classattendance?: IntFieldUpdateOperationsInput | number
    punctuality?: IntFieldUpdateOperationsInput | number
    initiative?: IntFieldUpdateOperationsInput | number
    responsibility?: IntFieldUpdateOperationsInput | number
    neatness?: IntFieldUpdateOperationsInput | number
    cooperation?: IntFieldUpdateOperationsInput | number
    organization?: IntFieldUpdateOperationsInput | number
    gradeid?: StringFieldUpdateOperationsInput | string
  }

  export type EffectiveDomainUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    classattendance?: IntFieldUpdateOperationsInput | number
    punctuality?: IntFieldUpdateOperationsInput | number
    initiative?: IntFieldUpdateOperationsInput | number
    responsibility?: IntFieldUpdateOperationsInput | number
    neatness?: IntFieldUpdateOperationsInput | number
    cooperation?: IntFieldUpdateOperationsInput | number
    organization?: IntFieldUpdateOperationsInput | number
    gradeid?: StringFieldUpdateOperationsInput | string
  }

  export type PsychomotiveDomainUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    hardworking?: IntFieldUpdateOperationsInput | number
    sports?: IntFieldUpdateOperationsInput | number
    grade?: GradeUpdateOneRequiredWithoutPsychomotiveNestedInput
  }

  export type PsychomotiveDomainUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    hardworking?: IntFieldUpdateOperationsInput | number
    sports?: IntFieldUpdateOperationsInput | number
    gradeid?: StringFieldUpdateOperationsInput | string
  }

  export type PsychomotiveDomainUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    hardworking?: IntFieldUpdateOperationsInput | number
    sports?: IntFieldUpdateOperationsInput | number
    gradeid?: StringFieldUpdateOperationsInput | string
  }

  export type PaymentUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    term?: EnumTermsFieldUpdateOperationsInput | $Enums.Terms
    amount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    term?: EnumTermsFieldUpdateOperationsInput | $Enums.Terms
    amount?: IntFieldUpdateOperationsInput | number
    schoolid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    session?: StringFieldUpdateOperationsInput | string
    term?: EnumTermsFieldUpdateOperationsInput | $Enums.Terms
    amount?: IntFieldUpdateOperationsInput | number
    schoolid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassCreateManyFormmasterInput = {
    id?: string
    name: string
    category: string
    level: string
    capacity?: number | null
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type AssignmentCreateManyTeacherInput = {
    id?: string
    title: string
    text: string
    file: string
    duedate: Date | string
    graded: boolean
    subjectid: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type TestCreateManyTeacherInput = {
    id?: string
    title: string
    status: $Enums.TestStatus
    instructions: string
    duration: number
    maxscore: number
    open: boolean
    testdate: Date | string
    testtime: Date | string
    term: string
    subjectid: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type SubjectUpdateWithoutTeachersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutSubjectsNestedInput
    assignments?: AssignmentUpdateManyWithoutSubjectNestedInput
    grades?: SubjectGradeUpdateManyWithoutSubjectNestedInput
    tests?: TestUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateWithoutTeachersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    schoolid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignments?: AssignmentUncheckedUpdateManyWithoutSubjectNestedInput
    grades?: SubjectGradeUncheckedUpdateManyWithoutSubjectNestedInput
    tests?: TestUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateManyWithoutTeachersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    schoolid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassUpdateWithoutFormmasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    students?: StudentUpdateManyWithoutClassNestedInput
    gradings?: ClassGradeUpdateManyWithoutClassNestedInput
    events?: EventUpdateManyWithoutClassNestedInput
    announcements?: AnnouncementUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutFormmasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    students?: StudentUncheckedUpdateManyWithoutClassNestedInput
    gradings?: ClassGradeUncheckedUpdateManyWithoutClassNestedInput
    events?: EventUncheckedUpdateManyWithoutClassNestedInput
    announcements?: AnnouncementUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateManyWithoutFormmasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    level?: StringFieldUpdateOperationsInput | string
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssignmentUpdateWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    file?: StringFieldUpdateOperationsInput | string
    duedate?: DateTimeFieldUpdateOperationsInput | Date | string
    graded?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subject?: SubjectUpdateOneRequiredWithoutAssignmentsNestedInput
    submissions?: SubmissionUpdateManyWithoutAssignmentNestedInput
    students?: StudentUpdateManyWithoutAssignmentsNestedInput
  }

  export type AssignmentUncheckedUpdateWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    file?: StringFieldUpdateOperationsInput | string
    duedate?: DateTimeFieldUpdateOperationsInput | Date | string
    graded?: BoolFieldUpdateOperationsInput | boolean
    subjectid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissions?: SubmissionUncheckedUpdateManyWithoutAssignmentNestedInput
    students?: StudentUncheckedUpdateManyWithoutAssignmentsNestedInput
  }

  export type AssignmentUncheckedUpdateManyWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    file?: StringFieldUpdateOperationsInput | string
    duedate?: DateTimeFieldUpdateOperationsInput | Date | string
    graded?: BoolFieldUpdateOperationsInput | boolean
    subjectid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestUpdateWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    instructions?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    maxscore?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    testdate?: DateTimeFieldUpdateOperationsInput | Date | string
    testtime?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: QuestionUpdateManyWithoutTestNestedInput
    answers?: AnswerUpdateManyWithoutTestNestedInput
    subject?: SubjectUpdateOneRequiredWithoutTestsNestedInput
  }

  export type TestUncheckedUpdateWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    instructions?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    maxscore?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    testdate?: DateTimeFieldUpdateOperationsInput | Date | string
    testtime?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: StringFieldUpdateOperationsInput | string
    subjectid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: QuestionUncheckedUpdateManyWithoutTestNestedInput
    answers?: AnswerUncheckedUpdateManyWithoutTestNestedInput
  }

  export type TestUncheckedUpdateManyWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    instructions?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    maxscore?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    testdate?: DateTimeFieldUpdateOperationsInput | Date | string
    testtime?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: StringFieldUpdateOperationsInput | string
    subjectid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentCreateManyParentInput = {
    id?: string
    username: string
    admissionnumber: string
    firstname: string
    surname: string
    othername?: string | null
    birthday: Date | string
    gender: $Enums.UserSex
    religion?: string | null
    studenttype: string
    house: string
    bloodgroup: string
    admissiondate?: Date | string
    email: string
    phone?: string | null
    address: string
    state: string
    lga: string
    avarta?: string | null
    schoolid: string
    classid: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type StudentUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    admissionnumber?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    studenttype?: StringFieldUpdateOperationsInput | string
    house?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
    admissiondate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutStudentsNestedInput
    class?: ClassUpdateOneRequiredWithoutStudentsNestedInput
    attendances?: AttendanceUpdateManyWithoutStudentNestedInput
    assignments?: AssignmentUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    answers?: AnswerUpdateManyWithoutStudentNestedInput
    grades?: StudentGradeUpdateManyWithoutStudentNestedInput
    effective?: EffectiveDomainUpdateManyWithoutStudentNestedInput
    psychomotive?: PsychomotiveDomainUpdateManyWithoutStudentNestedInput
    payments?: PaymentUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    admissionnumber?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    studenttype?: StringFieldUpdateOperationsInput | string
    house?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
    admissiondate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    schoolid?: StringFieldUpdateOperationsInput | string
    classid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendances?: AttendanceUncheckedUpdateManyWithoutStudentNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    answers?: AnswerUncheckedUpdateManyWithoutStudentNestedInput
    grades?: StudentGradeUncheckedUpdateManyWithoutStudentNestedInput
    effective?: EffectiveDomainUncheckedUpdateManyWithoutStudentNestedInput
    psychomotive?: PsychomotiveDomainUncheckedUpdateManyWithoutStudentNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateManyWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    admissionnumber?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    studenttype?: StringFieldUpdateOperationsInput | string
    house?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
    admissiondate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    schoolid?: StringFieldUpdateOperationsInput | string
    classid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssignmentCreateManySubjectInput = {
    id?: string
    title: string
    text: string
    file: string
    duedate: Date | string
    graded: boolean
    teacherid: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type SubjectGradeCreateManySubjectInput = {
    id?: string
    classid: string
  }

  export type TestCreateManySubjectInput = {
    id?: string
    title: string
    status: $Enums.TestStatus
    instructions: string
    duration: number
    maxscore: number
    open: boolean
    testdate: Date | string
    testtime: Date | string
    term: string
    teacherid: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type TeacherUpdateWithoutSubjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodgroup?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutTeachersNestedInput
    classes?: ClassUpdateManyWithoutFormmasterNestedInput
    assignments?: AssignmentUpdateManyWithoutTeacherNestedInput
    tests?: TestUpdateManyWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateWithoutSubjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodgroup?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    schoolid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classes?: ClassUncheckedUpdateManyWithoutFormmasterNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    tests?: TestUncheckedUpdateManyWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateManyWithoutSubjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bloodgroup?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    schoolid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssignmentUpdateWithoutSubjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    file?: StringFieldUpdateOperationsInput | string
    duedate?: DateTimeFieldUpdateOperationsInput | Date | string
    graded?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teacher?: TeacherUpdateOneRequiredWithoutAssignmentsNestedInput
    submissions?: SubmissionUpdateManyWithoutAssignmentNestedInput
    students?: StudentUpdateManyWithoutAssignmentsNestedInput
  }

  export type AssignmentUncheckedUpdateWithoutSubjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    file?: StringFieldUpdateOperationsInput | string
    duedate?: DateTimeFieldUpdateOperationsInput | Date | string
    graded?: BoolFieldUpdateOperationsInput | boolean
    teacherid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissions?: SubmissionUncheckedUpdateManyWithoutAssignmentNestedInput
    students?: StudentUncheckedUpdateManyWithoutAssignmentsNestedInput
  }

  export type AssignmentUncheckedUpdateManyWithoutSubjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    file?: StringFieldUpdateOperationsInput | string
    duedate?: DateTimeFieldUpdateOperationsInput | Date | string
    graded?: BoolFieldUpdateOperationsInput | boolean
    teacherid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubjectGradeUpdateWithoutSubjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    class?: ClassGradeUpdateOneRequiredWithoutSubjectsNestedInput
    students?: StudentGradeUpdateManyWithoutSubjectGradeNestedInput
  }

  export type SubjectGradeUncheckedUpdateWithoutSubjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    classid?: StringFieldUpdateOperationsInput | string
    students?: StudentGradeUncheckedUpdateManyWithoutSubjectGradeNestedInput
  }

  export type SubjectGradeUncheckedUpdateManyWithoutSubjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    classid?: StringFieldUpdateOperationsInput | string
  }

  export type TestUpdateWithoutSubjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    instructions?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    maxscore?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    testdate?: DateTimeFieldUpdateOperationsInput | Date | string
    testtime?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: QuestionUpdateManyWithoutTestNestedInput
    answers?: AnswerUpdateManyWithoutTestNestedInput
    teacher?: TeacherUpdateOneRequiredWithoutTestsNestedInput
  }

  export type TestUncheckedUpdateWithoutSubjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    instructions?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    maxscore?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    testdate?: DateTimeFieldUpdateOperationsInput | Date | string
    testtime?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: StringFieldUpdateOperationsInput | string
    teacherid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: QuestionUncheckedUpdateManyWithoutTestNestedInput
    answers?: AnswerUncheckedUpdateManyWithoutTestNestedInput
  }

  export type TestUncheckedUpdateManyWithoutSubjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    status?: EnumTestStatusFieldUpdateOperationsInput | $Enums.TestStatus
    instructions?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    maxscore?: IntFieldUpdateOperationsInput | number
    open?: BoolFieldUpdateOperationsInput | boolean
    testdate?: DateTimeFieldUpdateOperationsInput | Date | string
    testtime?: DateTimeFieldUpdateOperationsInput | Date | string
    term?: StringFieldUpdateOperationsInput | string
    teacherid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentCreateManyClassInput = {
    id?: string
    username: string
    admissionnumber: string
    firstname: string
    surname: string
    othername?: string | null
    birthday: Date | string
    gender: $Enums.UserSex
    religion?: string | null
    studenttype: string
    house: string
    bloodgroup: string
    admissiondate?: Date | string
    email: string
    phone?: string | null
    address: string
    state: string
    lga: string
    avarta?: string | null
    parentid: string
    schoolid: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type ClassGradeCreateManyClassInput = {
    id?: string
    gradeid: string
  }

  export type EventCreateManyClassInput = {
    id?: number
    title: string
    description: string
    startTime: Date | string
    endTime: Date | string
  }

  export type AnnouncementCreateManyClassInput = {
    id?: number
    title: string
    description: string
    date: Date | string
  }

  export type StudentUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    admissionnumber?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    studenttype?: StringFieldUpdateOperationsInput | string
    house?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
    admissiondate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: ParentUpdateOneRequiredWithoutStudentsNestedInput
    school?: SchoolUpdateOneRequiredWithoutStudentsNestedInput
    attendances?: AttendanceUpdateManyWithoutStudentNestedInput
    assignments?: AssignmentUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    answers?: AnswerUpdateManyWithoutStudentNestedInput
    grades?: StudentGradeUpdateManyWithoutStudentNestedInput
    effective?: EffectiveDomainUpdateManyWithoutStudentNestedInput
    psychomotive?: PsychomotiveDomainUpdateManyWithoutStudentNestedInput
    payments?: PaymentUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    admissionnumber?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    studenttype?: StringFieldUpdateOperationsInput | string
    house?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
    admissiondate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    parentid?: StringFieldUpdateOperationsInput | string
    schoolid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendances?: AttendanceUncheckedUpdateManyWithoutStudentNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutStudentsNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    answers?: AnswerUncheckedUpdateManyWithoutStudentNestedInput
    grades?: StudentGradeUncheckedUpdateManyWithoutStudentNestedInput
    effective?: EffectiveDomainUncheckedUpdateManyWithoutStudentNestedInput
    psychomotive?: PsychomotiveDomainUncheckedUpdateManyWithoutStudentNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateManyWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    admissionnumber?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    studenttype?: StringFieldUpdateOperationsInput | string
    house?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
    admissiondate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    parentid?: StringFieldUpdateOperationsInput | string
    schoolid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassGradeUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    grade?: GradeUpdateOneRequiredWithoutGradingsNestedInput
    subjects?: SubjectGradeUpdateManyWithoutClassNestedInput
  }

  export type ClassGradeUncheckedUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    gradeid?: StringFieldUpdateOperationsInput | string
    subjects?: SubjectGradeUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassGradeUncheckedUpdateManyWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    gradeid?: StringFieldUpdateOperationsInput | string
  }

  export type EventUpdateWithoutClassInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUncheckedUpdateWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUncheckedUpdateManyWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnnouncementUpdateWithoutClassInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnnouncementUncheckedUpdateWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnnouncementUncheckedUpdateManyWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionCreateManyAssignmentInput = {
    id?: string
    answer: string
    feedback: string
    score: number
    file: string
    studentId: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type SubmissionUpdateWithoutAssignmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    file?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutSubmissionsNestedInput
  }

  export type SubmissionUncheckedUpdateWithoutAssignmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    file?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionUncheckedUpdateManyWithoutAssignmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    feedback?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    file?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    admissionnumber?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    studenttype?: StringFieldUpdateOperationsInput | string
    house?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
    admissiondate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: ParentUpdateOneRequiredWithoutStudentsNestedInput
    school?: SchoolUpdateOneRequiredWithoutStudentsNestedInput
    class?: ClassUpdateOneRequiredWithoutStudentsNestedInput
    attendances?: AttendanceUpdateManyWithoutStudentNestedInput
    submissions?: SubmissionUpdateManyWithoutStudentNestedInput
    answers?: AnswerUpdateManyWithoutStudentNestedInput
    grades?: StudentGradeUpdateManyWithoutStudentNestedInput
    effective?: EffectiveDomainUpdateManyWithoutStudentNestedInput
    psychomotive?: PsychomotiveDomainUpdateManyWithoutStudentNestedInput
    payments?: PaymentUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    admissionnumber?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    studenttype?: StringFieldUpdateOperationsInput | string
    house?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
    admissiondate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    parentid?: StringFieldUpdateOperationsInput | string
    schoolid?: StringFieldUpdateOperationsInput | string
    classid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendances?: AttendanceUncheckedUpdateManyWithoutStudentNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutStudentNestedInput
    answers?: AnswerUncheckedUpdateManyWithoutStudentNestedInput
    grades?: StudentGradeUncheckedUpdateManyWithoutStudentNestedInput
    effective?: EffectiveDomainUncheckedUpdateManyWithoutStudentNestedInput
    psychomotive?: PsychomotiveDomainUncheckedUpdateManyWithoutStudentNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateManyWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    admissionnumber?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    othername?: NullableStringFieldUpdateOperationsInput | string | null
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: EnumUserSexFieldUpdateOperationsInput | $Enums.UserSex
    religion?: NullableStringFieldUpdateOperationsInput | string | null
    studenttype?: StringFieldUpdateOperationsInput | string
    house?: StringFieldUpdateOperationsInput | string
    bloodgroup?: StringFieldUpdateOperationsInput | string
    admissiondate?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    lga?: StringFieldUpdateOperationsInput | string
    avarta?: NullableStringFieldUpdateOperationsInput | string | null
    parentid?: StringFieldUpdateOperationsInput | string
    schoolid?: StringFieldUpdateOperationsInput | string
    classid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionCreateManyTestInput = {
    id?: string
    text: string
    options: JsonNullValueInput | InputJsonValue
    answer: string
  }

  export type AnswerCreateManyTestInput = {
    id?: string
    score: number
    studentid: string
    createdAt?: Date | string
    updateAt?: Date | string
  }

  export type QuestionUpdateWithoutTestInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    options?: JsonNullValueInput | InputJsonValue
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionUncheckedUpdateWithoutTestInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    options?: JsonNullValueInput | InputJsonValue
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionUncheckedUpdateManyWithoutTestInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    options?: JsonNullValueInput | InputJsonValue
    answer?: StringFieldUpdateOperationsInput | string
  }

  export type AnswerUpdateWithoutTestInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutAnswersNestedInput
  }

  export type AnswerUncheckedUpdateWithoutTestInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    studentid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnswerUncheckedUpdateManyWithoutTestInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    studentid?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassGradeCreateManyGradeInput = {
    id?: string
    classid: string
  }

  export type EffectiveDomainCreateManyGradeInput = {
    id?: string
    classattendance: number
    punctuality: number
    initiative: number
    responsibility: number
    neatness: number
    cooperation: number
    organization: number
    studentid: string
  }

  export type PsychomotiveDomainCreateManyGradeInput = {
    id?: string
    hardworking: number
    sports: number
    studentid: string
  }

  export type ClassGradeUpdateWithoutGradeInput = {
    id?: StringFieldUpdateOperationsInput | string
    class?: ClassUpdateOneRequiredWithoutGradingsNestedInput
    subjects?: SubjectGradeUpdateManyWithoutClassNestedInput
  }

  export type ClassGradeUncheckedUpdateWithoutGradeInput = {
    id?: StringFieldUpdateOperationsInput | string
    classid?: StringFieldUpdateOperationsInput | string
    subjects?: SubjectGradeUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassGradeUncheckedUpdateManyWithoutGradeInput = {
    id?: StringFieldUpdateOperationsInput | string
    classid?: StringFieldUpdateOperationsInput | string
  }

  export type EffectiveDomainUpdateWithoutGradeInput = {
    id?: StringFieldUpdateOperationsInput | string
    classattendance?: IntFieldUpdateOperationsInput | number
    punctuality?: IntFieldUpdateOperationsInput | number
    initiative?: IntFieldUpdateOperationsInput | number
    responsibility?: IntFieldUpdateOperationsInput | number
    neatness?: IntFieldUpdateOperationsInput | number
    cooperation?: IntFieldUpdateOperationsInput | number
    organization?: IntFieldUpdateOperationsInput | number
    student?: StudentUpdateOneRequiredWithoutEffectiveNestedInput
  }

  export type EffectiveDomainUncheckedUpdateWithoutGradeInput = {
    id?: StringFieldUpdateOperationsInput | string
    classattendance?: IntFieldUpdateOperationsInput | number
    punctuality?: IntFieldUpdateOperationsInput | number
    initiative?: IntFieldUpdateOperationsInput | number
    responsibility?: IntFieldUpdateOperationsInput | number
    neatness?: IntFieldUpdateOperationsInput | number
    cooperation?: IntFieldUpdateOperationsInput | number
    organization?: IntFieldUpdateOperationsInput | number
    studentid?: StringFieldUpdateOperationsInput | string
  }

  export type EffectiveDomainUncheckedUpdateManyWithoutGradeInput = {
    id?: StringFieldUpdateOperationsInput | string
    classattendance?: IntFieldUpdateOperationsInput | number
    punctuality?: IntFieldUpdateOperationsInput | number
    initiative?: IntFieldUpdateOperationsInput | number
    responsibility?: IntFieldUpdateOperationsInput | number
    neatness?: IntFieldUpdateOperationsInput | number
    cooperation?: IntFieldUpdateOperationsInput | number
    organization?: IntFieldUpdateOperationsInput | number
    studentid?: StringFieldUpdateOperationsInput | string
  }

  export type PsychomotiveDomainUpdateWithoutGradeInput = {
    id?: StringFieldUpdateOperationsInput | string
    hardworking?: IntFieldUpdateOperationsInput | number
    sports?: IntFieldUpdateOperationsInput | number
    student?: StudentUpdateOneRequiredWithoutPsychomotiveNestedInput
  }

  export type PsychomotiveDomainUncheckedUpdateWithoutGradeInput = {
    id?: StringFieldUpdateOperationsInput | string
    hardworking?: IntFieldUpdateOperationsInput | number
    sports?: IntFieldUpdateOperationsInput | number
    studentid?: StringFieldUpdateOperationsInput | string
  }

  export type PsychomotiveDomainUncheckedUpdateManyWithoutGradeInput = {
    id?: StringFieldUpdateOperationsInput | string
    hardworking?: IntFieldUpdateOperationsInput | number
    sports?: IntFieldUpdateOperationsInput | number
    studentid?: StringFieldUpdateOperationsInput | string
  }

  export type SubjectGradeCreateManyClassInput = {
    id?: string
    subjectid: string
  }

  export type SubjectGradeUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: SubjectUpdateOneRequiredWithoutGradesNestedInput
    students?: StudentGradeUpdateManyWithoutSubjectGradeNestedInput
  }

  export type SubjectGradeUncheckedUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    subjectid?: StringFieldUpdateOperationsInput | string
    students?: StudentGradeUncheckedUpdateManyWithoutSubjectGradeNestedInput
  }

  export type SubjectGradeUncheckedUpdateManyWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    subjectid?: StringFieldUpdateOperationsInput | string
  }

  export type StudentGradeCreateManySubjectGradeInput = {
    id?: string
    firstCa: number
    secondCa: number
    thirdCa: number
    fourthCa: number
    exams: number
    score: number
    grade: number
    remark: number
    studentid: string
  }

  export type StudentGradeUpdateWithoutSubjectGradeInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstCa?: IntFieldUpdateOperationsInput | number
    secondCa?: IntFieldUpdateOperationsInput | number
    thirdCa?: IntFieldUpdateOperationsInput | number
    fourthCa?: IntFieldUpdateOperationsInput | number
    exams?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    grade?: IntFieldUpdateOperationsInput | number
    remark?: IntFieldUpdateOperationsInput | number
    student?: StudentUpdateOneRequiredWithoutGradesNestedInput
  }

  export type StudentGradeUncheckedUpdateWithoutSubjectGradeInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstCa?: IntFieldUpdateOperationsInput | number
    secondCa?: IntFieldUpdateOperationsInput | number
    thirdCa?: IntFieldUpdateOperationsInput | number
    fourthCa?: IntFieldUpdateOperationsInput | number
    exams?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    grade?: IntFieldUpdateOperationsInput | number
    remark?: IntFieldUpdateOperationsInput | number
    studentid?: StringFieldUpdateOperationsInput | string
  }

  export type StudentGradeUncheckedUpdateManyWithoutSubjectGradeInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstCa?: IntFieldUpdateOperationsInput | number
    secondCa?: IntFieldUpdateOperationsInput | number
    thirdCa?: IntFieldUpdateOperationsInput | number
    fourthCa?: IntFieldUpdateOperationsInput | number
    exams?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    grade?: IntFieldUpdateOperationsInput | number
    remark?: IntFieldUpdateOperationsInput | number
    studentid?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}